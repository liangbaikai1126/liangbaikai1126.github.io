{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5f00\u200b\u7684\u200b\u535a\u5ba2","text":"<p>\u200b\u4e1a\u7cbe\u4e8e\u52e4\u200b\uff0c\u200b\u8352\u4e8e\u200b\u5b09\u200b\uff1b\u200b\u884c\u6210\u4e8e\u601d\u200b\uff0c\u200b\u6bc1\u4e8e\u200b\u968f\u200b\u3002</p> <p>\u200b\u540d\u200b \u200b\u4eba\u200b \u200b\u540d\u200b \u200b\u8a00\u200b</p> <p>     \u200b\u6211\u8981\u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u5f80\u4e0a\u722c\u200b          \u200b\u5728\u200b\u6700\u9ad8\u70b9\u200b\u4e58\u7740\u200b\u53f6\u7247\u200b\u5f80\u524d\u200b\u98de\u200b       \u2014\u2014\u300a\u200b\u8717\u725b\u200b\u300b\u200b\u5468\u6770\u4f26\u200b </p> <p> </p>"},{"location":"%E5%85%B6%E4%BB%96/","title":"\u5199\u200b\u5728\u200b\u524d\u9762","text":"<p>\u200b\u6458\u8981\u200b</p> <p>\u200b\u4e3b\u8981\u200b\u8bb0\u5f55\u200b\u4e00\u4e9b\u200b\u76f8\u5bf9\u200b\u72ec\u7acb\u200b\u7684\u200b\u77e5\u8bc6\u200b\u6280\u672f\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"%E5%85%B6%E4%BB%96/Conda%E7%9B%B8%E5%85%B3/1/","title":"Conda \u200b\u76f8\u5173\u200b\u95ee\u9898","text":""},{"location":"%E5%85%B6%E4%BB%96/Conda%E7%9B%B8%E5%85%B3/1/#miniconda3-\u5728-ubuntu-\u73af\u5883\u4e0b\u7684\u5b89\u88c5","title":"Miniconda3 \u200b\u5728\u200b Ubuntu \u200b\u73af\u5883\u200b\u4e0b\u200b\u7684\u200b\u5b89\u88c5","text":"<p>\u200b\u5728\u200b Ubuntu \u200b\u73af\u5883\u200b\u4e0b\u200b\u4e00\u822c\u200b\u4f7f\u7528\u200b\u547d\u4ee4\u200b\u6765\u200b\u83b7\u53d6\u200b Miniconda3 \u200b\u7684\u200b\u5b89\u88c5\u5305\u200b</p> <p>\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8f93\u5165\u200b\u4e0b\u5217\u200b\u547d\u4ee4\u200b\u6765\u200b\u83b7\u53d6\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b Miniconda3</p> <p><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></p> <p>\u200b\u5728\u200b\u4e0b\u8f7d\u200b\u5b8c\u6bd5\u200b\u4e4b\u540e\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u9047\u5230\u200b\u6267\u884c\u200b\u6743\u9650\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u9700\u8981\u200b\u7ed9\u200b\u5b89\u88c5\u5305\u200b\u6dfb\u52a0\u200b\u53ef\u200b\u6267\u884c\u200b\u6743\u9650\u200b</p> <p><code>sudo chmod +x Miniconda3-latest-Linux-x86_64.sh</code></p> <p>\u200b\u6dfb\u52a0\u200b\u5b8c\u200b\u6743\u9650\u200b\u4e4b\u540e\u200b\uff0c\u200b\u5373\u53ef\u200b\u8fd0\u884c\u200b\u5b89\u88c5\u200b\u811a\u672c\u200b</p> <p><code>./Miniconda3-latest-Linux-x86_64.sh</code></p>"},{"location":"%E5%85%B6%E4%BB%96/Conda%E7%9B%B8%E5%85%B3/1/#\u7ec8\u7aef\u81ea\u52a8\u542f\u52a8-conda-base-\u73af\u5883","title":"\u7ec8\u7aef\u200b\u81ea\u52a8\u200b\u542f\u52a8\u200b Conda Base \u200b\u73af\u5883","text":"<p>\u200b\u5728\u200b\u5b89\u88c5\u200b\u4e86\u200b Conda \u200b\u540e\u200b\uff0c\u200b\u6709\u65f6\u200b\u6253\u5f00\u200b\u7ec8\u7aef\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6fc0\u6d3b\u200b Conda Base \u200b\u73af\u5883\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b</p> <p></p> <p>\u200b\u8981\u200b\u53d6\u6d88\u200b\u81ea\u52a8\u200b\u6fc0\u6d3b\u200b\u73af\u5883\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8f93\u5165\u200b </p> <p><code>conda config --set auto_activate_base false</code></p>"},{"location":"%E5%85%B6%E4%BB%96/Git%E7%9B%B8%E5%85%B3/1/","title":"Git \u200b\u76f8\u5173\u200b\u95ee\u9898","text":""},{"location":"%E5%85%B6%E4%BB%96/Git%E7%9B%B8%E5%85%B3/1/#ssl-certificate-problem","title":"SSL certificate problem","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200b <code>git clone</code> \u200b\u65f6\u200b\uff0c\u200b\u6709\u65f6\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\u63d0\u793a\u200b </p> <p><code>SSL certificate problem: unable to get local issuer certificate</code> </p> <p>\u200b\u95ee\u9898\u200b\u662f\u200b\u7531\u4e8e\u200b\u6ca1\u6709\u200b\u914d\u7f6e\u200b\u4fe1\u4efb\u200b\u7684\u200b\u670d\u52a1\u5668\u200b HTTPS \u200b\u9a8c\u8bc1\u200b\u3002</p> <p>\u200b\u9ed8\u8ba4\u200b\uff0ccURL \u200b\u88ab\u200b\u8bbe\u4e3a\u200b\u4e0d\u200b\u4fe1\u4efb\u200b\u4efb\u4f55\u200b CAs\uff0c\u200b\u5373\u200b\u4e0d\u200b\u4fe1\u4efb\u200b\u4efb\u4f55\u200b\u670d\u52a1\u5668\u200b\u9a8c\u8bc1\u200b</p> <p>\u200b\u89e3\u51b3\u529e\u6cd5\u200b\u4e4b\u4e00\u200b\u4e3a\u200b\u544a\u8bc9\u200b Git \u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b global \u200b\u9009\u9879\u200b\u6267\u884c\u200b\u8bc1\u4e66\u200b\u9a8c\u8bc1\u200b</p> <p>\u200b\u8f93\u5165\u200b <code>git config --global http.sslVerify false</code> \u200b\u5373\u53ef\u200b</p>"},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/","title":"Win11 \u200b\u5bb6\u5ead\u7248\u200b\u914d\u7f6e\u200b WSL2","text":""},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/#0-\u5b89\u88c5\u73af\u5883","title":"0. \u200b\u5b89\u88c5\u200b\u73af\u5883","text":"<p>Win \u200b\u7248\u672c\u200b\u76f8\u5173\u200b</p> <p>\u200b\u672c\u200b\u6559\u7a0b\u200b\u9002\u7528\u200b Windows 11 23H2 \u200b\u4ee5\u53ca\u200b 22H2\u3002\u200b\u5728\u200b 24H2 \u200b\u7248\u672c\u200b\u4e2d\u200b\uff0cHyper-V \u200b\u7591\u4f3c\u200b\u65e0\u6cd5\u200b\u542f\u7528\u200b\uff0c\u200b\u4e0d\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b\u672c\u200b\u6559\u7a0b\u200b\u3002</p> <p>\u200b\u7b14\u8005\u200b\u4f7f\u7528\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u4e3a\u200b Windows 11 \u200b\u5bb6\u5ead\u7248\u200b 23H2\uff0cCPU \u200b\u4e3a\u200b AMD Ryzen \u200b\u7cfb\u5217\u200b\u3002</p> <p>\u200b\u672c\u200b\u6559\u7a0b\u200b\u5c06\u200b\u5b89\u88c5\u200b WSL2 \u200b\u81f3\u975e\u200bC\u200b\u76d8\u200b\uff08D\u200b\u76d8\u200b\uff09\u3002</p> <p>\u200b\u7531\u4e8e\u200b Windows 11 \u200b\u5bb6\u5ead\u7248\u200b\u4e0d\u200b\u652f\u6301\u200b Hyper-V \u200b\u529f\u80fd\u200b\uff0c\u200b\u9700\u8981\u200b\u624b\u52a8\u200b\u8bbe\u7f6e\u200b\u5f00\u542f\u200b\u3002</p> <p>\u200b\u65b0\u5efa\u200b txt \u200b\u6587\u4ef6\u200b\u547d\u540d\u200b\u4e3a\u200b hyper-v (hyper-v.txt)\uff0c\u200b\u5e76\u200b\u590d\u5236\u200b\u4e0b\u8ff0\u200b\u4ee3\u7801\u200b\u5185\u5bb9\u200b\u3002</p> <pre><code>pushd \"%~dp0\"\n\ndir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum &gt;hyper-v.txt\n\nfor /f %%i in ('findstr /i . hyper-v.txt 2^&gt;nul') do dism /online /norestart /add-package:\"%SystemRoot%\\servicing\\Packages\\%%i\"\n\ndel hyper-v.txt\n\nDism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL\n\npause\n</code></pre> <p>\u200b\u4fee\u6539\u200b\u6587\u4ef6\u200b\u540e\u7f00\u200b\u4e3a\u200b .cmd\uff0c\u200b\u5373\u200b\u4fdd\u5b58\u200b\u4e3a\u200b cmd \u200b\u683c\u5f0f\u200b\u7684\u200b\u6587\u4ef6\u200b\uff08\u200b\u9700\u8981\u200b\u5148\u200b\u53d6\u6d88\u200b\u9690\u85cf\u200b\u6587\u4ef6\u200b\u540e\u7f00\u540d\u200b\u529f\u80fd\u200b\uff09\u3002</p> <p>\u200b\u53f3\u952e\u200b\u70b9\u51fb\u200b\u4ee5\u200b\u7ba1\u7406\u5458\u200b\u8eab\u4efd\u200b\u8fd0\u884c\u200b\uff0c\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u5faa\u73af\u200b\u8fd0\u884c\u200b\u73b0\u8c61\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5173\u95ed\u200b\u3002</p> <p>\u200b\u8e29\u200b\u5751\u200b</p> <p>\u200b\u7b14\u8005\u200b\u5b89\u88c5\u200b\u8fc7\u7a0b\u200b\u4e2d\u66fe\u200b\u5c06\u200b\u4e0a\u8ff0\u200b\u6587\u4ef6\u200b\u540e\u7f00\u200b\u6539\u4e3a\u200b .bat\uff0c\u200b\u4f1a\u200b\u62a5\u9519\u200b \u201cMicrosoft-Hyper-V \u200b\u672a\u77e5\u200b\u3002 \u200b\u672a\u200b\u8bc6\u522b\u200b\u51fa\u200b Windows \u200b\u529f\u80fd\u200b\u540d\u79f0\u200b\u3002\u201d\u3002</p> <p>\u200b\u5b8c\u6210\u200b\u4e0a\u8ff0\u200b\u51c6\u5907\u200b\u540e\u200b\uff0c\u200b\u5728\u200b\u542f\u7528\u200b\u6216\u200b\u5173\u95ed\u200b Windows \u200b\u529f\u80fd\u200b\u9762\u677f\u200b\u5904\u52fe\u9009\u200b\u4ee5\u4e0b\u200b\u51e0\u9879\u200b\uff1a</p> <ul> <li>Hyper-V</li> <li>Windows \u200b\u865a\u62df\u673a\u200b\u76d1\u63a7\u200b\u5e73\u53f0\u200b</li> <li>\u200b\u9002\u7528\u200b\u4e8e\u200b Linux \u200b\u7684\u200b Windows \u200b\u5b50\u7cfb\u7edf\u200b</li> <li>\u200b\u865a\u62df\u673a\u200b\u5e73\u53f0\u200b</li> </ul> <p></p>"},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/#1-\u5b89\u88c5\u5305\u4e0b\u8f7d","title":"1. \u200b\u5b89\u88c5\u5305\u200b\u4e0b\u8f7d","text":"<p>\u200b\u5728\u200b\u7cfb\u7edf\u200b\u81ea\u5e26\u200b\u5e94\u7528\u200b\u4e2d\u200b\u6253\u5f00\u200b Microsoft Store\uff0c\u200b\u641c\u7d22\u200b Ubuntu \u200b\u5e76\u200b\u6311\u9009\u200b\u81ea\u5df1\u200b\u9700\u8981\u200b\u7684\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u4e0b\u8f7d\u200b\uff0c\u200b\u6b64\u5904\u200b\u4e3a\u200b 22.04.3 LTS \u200b\u7248\u672c\u200b\u3002</p> <p></p>"},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/#2-\u63d0\u53d6\u5b89\u88c5\u5305","title":"2. \u200b\u63d0\u53d6\u200b\u5b89\u88c5\u5305","text":"<p>\u200b\u4e0b\u8f7d\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u5148\u200b\u4e0d\u8981\u200b\u8fd0\u884c\u200b\u3002\u200b\u4f7f\u7528\u200b\u7ba1\u7406\u5458\u200b\u8eab\u4efd\u200b\u8fd0\u884c\u200b\u547d\u4ee4\u884c\u200b\uff0c\u200b\u8f93\u5165\u200b <code>cd C:\\Program Files\\WindowsApps</code> \u200b\u5373\u200b\u8fdb\u5165\u200b\u5230\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u5546\u5e97\u200b\u5e94\u7528\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b\u3002</p> <p>\u200b\u952e\u5165\u200b <code>dir/od</code> \u200b\u6765\u200b\u67e5\u770b\u200b\u591a\u200b\u51fa\u6765\u200b\u7684\u200b\u5b50\u76ee\u5f55\u200b\u3002\u200b\u9700\u8981\u200b\u9009\u62e9\u200b\u5e26\u6709\u200b Ubuntu \u200b\u4ee5\u53ca\u200b x64 \u200b\u5b57\u6837\u200b\u7684\u200b\u76ee\u5f55\u200b\uff0c\u200b\u5148\u200b\u8bb0\u4f4f\u200b\u5927\u81f4\u200b\u7684\u200b\u76ee\u5f55\u540d\u200b\uff08\u200b\u56fe\u4e2d\u200b\u7ea2\u7ebf\u200b\u6240\u793a\u200b\uff09\u3002</p> <p></p> <p>\u200b\u63a5\u4e0b\u6765\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u627e\u5230\u200b<code>C:\\Program Files\\WindowsApps</code>\uff0c\u200b\u8bbe\u7f6e\u200b\u6253\u5f00\u200b\u6743\u9650\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u8be5\u200b\u76ee\u5f55\u200b\u53ef\u80fd\u200b\u4e3a\u200b\u9690\u85cf\u200b\u6587\u4ef6\u5939\u200b\uff0c\u200b\u5148\u200b\u5728\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u53f3\u4e0a\u65b9\u200b\u4f9d\u6b21\u200b\u70b9\u51fb\u200b \u200b\u67e5\u770b\u200b-&gt;\u200b\u663e\u793a\u200b-&gt;\u200b\u9690\u85cf\u200b\u7684\u200b\u9879\u76ee\u200b \u200b\u5e76\u200b\u8fdb\u884c\u200b\u52fe\u9009\u200b</p> <p>\u200b\u627e\u5230\u200b\u8be5\u200b\u76ee\u5f55\u200b\u540e\u200b\uff0c\u200b\u4f9d\u6b21\u200b\u70b9\u5f00\u200b \u200b\u5c5e\u6027\u200b-&gt;\u200b\u5b89\u5168\u200b-&gt;\u200b\u9ad8\u7ea7\u200b-&gt;\u200b\u66f4\u6539\u200b\u6240\u6709\u8005\u200b\uff0c\u200b\u8f93\u5165\u200b everyone\u3002\uff08\u200b\u53ef\u80fd\u200b\u5b58\u5728\u200b\u5b89\u5168\u200b\u98ce\u9669\u200b\uff0c\u200b\u8bf7\u200b\u614e\u91cd\u8003\u8651\u200b\uff09</p> <p></p> <p>\u200b\u52fe\u9009\u200b\u66ff\u6362\u200b\u5b50\u200b\u5bb9\u5668\u200b\u548c\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6240\u6709\u8005\u200b\uff0c\u200b\u5e94\u7528\u200b\u5e76\u200b\u786e\u5b9a\u200b\u3002</p> <p></p> <p>\u200b\u6253\u5f00\u200b\u540e\u200b\u9009\u62e9\u200b\u4e0a\u8ff0\u200b\u786e\u5b9a\u200b\u7684\u200b\u5b50\u76ee\u5f55\u200b\uff08\u200b\u4e0a\u8ff0\u200b\u7ea2\u7ebf\u200b\u6807\u8bc6\u200b\u7684\u200b\u76ee\u5f55\u200b\uff09\u200b\u7684\u200b\u6240\u6709\u200b\u5185\u5bb9\u200b\uff0c\u200b\u590d\u5236\u5230\u200bD\u200b\u76d8\u200b\u7684\u200b\u65b0\u5efa\u200b\u6587\u4ef6\u5939\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a<code>D:\\WSL2-Ubuntu-22.04</code></p> <p></p>"},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/#3-\u5b89\u88c5\u5b9e\u4f8b","title":"3. \u200b\u5b89\u88c5\u200b\u5b9e\u4f8b","text":"<p>\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u8f93\u5165\u200b <code>wsl --set-default-version 2</code>\uff0c\u200b\u8868\u793a\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b WSL2 \u200b\u7684\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u3002</p> <p>\u200b\u4e0b\u8f7d\u200b Windows Subsystem for Linux Update Setup \u200b\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\uff0c\u200b\u94fe\u63a5\u200b\u81ea\u884c\u200b\u641c\u7d22\u200b\u6216\u200b\u70b9\u51fb\u200b\u4e0b\u65b9\u200b\u3002</p> <p>https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</p> <p></p> <p>\u200b\u4e00\u8def\u200b\u70b9\u51fb\u200b Next \u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u5373\u53ef\u200b\u3002 </p> <p>\u200b\u5b8c\u6210\u200b\u540e\u200b\u63a5\u4e0b\u6765\u200b\u76f4\u63a5\u200b\u70b9\u51fb\u200b <code>D:\\WSL2-Ubuntu-22.04\\ubuntu2204.exe</code> \u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u3002</p> <p>\u200b\u5b89\u88c5\u200b\u5b8c\u6210\u200b\u540e\u200b\u53ef\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u8f93\u5165\u200b <code>wsl --status</code> \u200b\u6765\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u4e3a\u200b WSL2\u3002</p> <p></p>"},{"location":"%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/#4-\u5b89\u88c5\u5305\u6e05\u7406","title":"4. \u200b\u5b89\u88c5\u5305\u200b\u6e05\u7406","text":"<p>\u200b\u5148\u200b\u6253\u5f00\u200b\u5f00\u59cb\u83dc\u5355\u200b\uff0c\u200b\u53ef\u89c1\u200b\u521a\u624d\u200b\u5b89\u88c5\u200b\u7684\u200b\u53d1\u884c\u7248\u200b\uff0c\u200b\u9009\u62e9\u200b\u5378\u8f7d\u200b\uff08\u200b\u89c1\u200b\u4e0b\u56fe\u200b\uff09\u3002</p> <p>\u200b\u5378\u8f7d\u200b\u7684\u200b\u4f5c\u7528\u200b\u4e3a\u200b\u6e05\u9664\u200b\u4e0a\u8ff0\u200bC\u200b\u76d8\u4e2d\u200bWindowsApps\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u5b89\u88c5\u5305\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u5bf9\u200bD\u200b\u76d8\u200b\u7684\u200bWSL2\u200b\u9020\u6210\u200b\u5f71\u54cd\u200b\u3002</p> <p></p> <p>\u200b\u6b64\u5916\u200b\uff0c <code>D:\\WSL2-Ubuntu-22.04\\install.tar.gz</code>  \u200b\u4e5f\u200b\u53ef\u200b\u624b\u52a8\u200b\u4ece\u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u5220\u9664\u200b\uff0c\u200b\u5176\u200b\u5185\u5bb9\u200b\u5df2\u7ecf\u200b\u89e3\u538b\u200b\u5b89\u88c5\u200b\u3002</p> <p>\u200b\u81f3\u6b64\u200b\uff0cWSL2 \u200b\u5b89\u88c5\u200b\u5b8c\u6bd5\u200b\u3002</p>"},{"location":"%E5%85%B6%E4%BB%96/psbody%E5%AE%89%E8%A3%85/1/","title":"psbody \u200b\u5b89\u88c5","text":""},{"location":"%E5%85%B6%E4%BB%96/psbody%E5%AE%89%E8%A3%85/1/#0-\u5b89\u88c5\u73af\u5883","title":"0. \u200b\u5b89\u88c5\u200b\u73af\u5883","text":"<p>psbody \u200b\u5c5e\u4e8e\u200b Mesh \u200b\u4f9d\u8d56\u200b\u5305\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8bfb\u53d6\u200b\u4fdd\u5b58\u200b Obj \u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4f46\u200b\u7531\u4e8e\u200b\u5176\u200b\u5e74\u4ee3\u200b\u8fc7\u4e8e\u200b\u9065\u8fdc\u200b\u800c\u4e14\u200b\u65e0\u4eba\u200b\u7ef4\u62a4\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u5b89\u88c5\u200b\u73af\u5883\u200b\u6709\u7740\u200b\u76f8\u5f53\u200b\u4e25\u82db\u200b\u7684\u200b\u8981\u6c42\u200b\u3002</p> <p>\u200b\u7b14\u8005\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200b Win11 \u200b\u4e0b\u200b\u7684\u200b WSL-Ubuntu 20.04 \u200b\u7248\u672c\u200b\u4f5c\u4e3a\u200b\u5b89\u88c5\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u3002</p> <p>Ubuntu \u200b\u7248\u672c\u200b\u76f8\u5173\u200b</p> <p>Ubuntu 18.04 \u200b\u4e5f\u200b\u53ef\u200b\u8fdb\u884c\u200b psbody \u200b\u7684\u200b\u5b89\u88c5\u200b\u3002\u200b\u636e\u200b\u7b14\u8005\u200b\u4eb2\u6d4b\u200b Ubuntu 22.04 \u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u65e0\u6cd5\u200b\u5b89\u88c5\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e0d\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b\u3002</p>"},{"location":"%E5%85%B6%E4%BB%96/psbody%E5%AE%89%E8%A3%85/1/#1-\u4ed3\u5e93\u514b\u9686","title":"1. \u200b\u4ed3\u5e93\u200b\u514b\u9686","text":"<p>psbody \u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b conda \u200b\u6216\u8005\u200b pip \u200b\u4e00\u952e\u200b\u4e0b\u8f7d\u5b89\u88c5\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200b\u4ed3\u5e93\u200b\u514b\u9686\u200b\u5230\u200b\u672c\u5730\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b</p> <p>\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8f93\u5165\u200b\u4e0b\u5217\u200b\u547d\u4ee4\u200b\u8fdb\u884c\u200b\u514b\u9686\u200b</p> <p><code>git clone https://github.com/MPI-IS/mesh.git</code></p>"},{"location":"%E5%85%B6%E4%BB%96/psbody%E5%AE%89%E8%A3%85/1/#2-\u914d\u5408-conda-\u5b89\u88c5","title":"2. \u200b\u914d\u5408\u200b Conda \u200b\u5b89\u88c5","text":"<p>\u200b\u4f7f\u7528\u200b Conda \u200b\u521b\u5efa\u200b\u7684\u200b\u865a\u62df\u73af\u5883\u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u51c6\u5907\u200b</p> <p><code>conda create --name vName python=3.8.19</code></p> <p>\u200b\u521b\u5efa\u200b\u597d\u200b\u865a\u62df\u73af\u5883\u200b\u540e\u200b\u8fdb\u884c\u200b\u73af\u5883\u200b\u6fc0\u6d3b\u200b</p> <p><code>conda activate vName</code></p> <p>\u200b\u6fc0\u6d3b\u200b\u73af\u5883\u200b\u540e\u200b\uff0c\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b apt \u200b\u6765\u200b\u4e0b\u8f7d\u200b boost \u200b\u5305\u200b</p> <p><code>sudo apt-get install libboost-dev</code></p> <p>\u200b\u505a\u597d\u200b\u4e0a\u8ff0\u200b\u51c6\u5907\u200b\u540e\u200b\uff0c\u200b\u8fdb\u5165\u200b\u4e4b\u524d\u200b\u514b\u9686\u200b\u7684\u200b\u4ed3\u5e93\u200b\u76ee\u5f55\u200b</p> <p>\u200b\u7f16\u8f91\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b Makefile \u200b\u6587\u4ef6\u200b</p> <p><code>--install-option -&gt; --config-settings</code></p> <p>\u200b\u4fee\u6539\u200b\u597d\u540e\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u5b89\u88c5\u200b</p> <p><code>BOOST_INCLUDE_DIRS=/usr/include/boost make all</code></p>"},{"location":"%E5%85%B6%E4%BB%96/psbody%E5%AE%89%E8%A3%85/1/#3-\u53ef\u80fd\u51fa\u73b0\u7684-opengl-\u95ee\u9898","title":"3. \u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u7684\u200b OpenGL \u200b\u95ee\u9898","text":"<p>\u200b\u7f16\u8bd1\u200b\u597d\u200b\u6587\u4ef6\u200b\u540e\u200b\uff0c\u200b\u7531\u4e8e\u200b OpenGL \u200b\u7b49\u200b\u4f9d\u8d56\u200b\u95ee\u9898\u200b\uff0c\u200b\u8f93\u5165\u200b <code>make tests</code> \u200b\u540e\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u76f8\u5173\u200b\u62a5\u9519\u200b\u3002</p> <p>\u200b\u62a5\u9519\u200b <code>AttributeError: 'NoneType' object has no attribute 'eglGetCurrentContext'</code></p> <p>\u200b\u8fd9\u65f6\u200b\u9700\u8981\u200b\u5b89\u88c5\u200b Python \u200b\u4e2d\u200b\u7684\u200b OpenGL</p> <p>\u200b\u8f93\u5165\u200b\u4e0b\u5217\u200b\u547d\u4ee4\u200b</p> <pre><code>pip install PyOpenGL PyOpenGL_accelerate\nsudo apt-get install libosmesa6-dev freeglut3-dev\nsudo apt-get install libglfw3-dev libgles2-mesa-dev\nsudo apt-get install libosmesa6\n</code></pre> <p>\u200b\u5b8c\u6210\u200b\u4e0a\u8ff0\u200b\u5b89\u88c5\u200b\u540e\u200b\u8fdb\u884c\u200b <code>make tests</code> \u200b\u53ef\u200b\u987a\u5229\u200b\u901a\u8fc7\u200b\uff0c\u200b\u6b64\u65f6\u200b psbody \u200b\u5b89\u88c5\u200b\u5b8c\u6210\u200b\uff01</p>"},{"location":"%E5%88%B7%E9%A2%98/","title":"\u5237\u9898","text":"<p>\u200b\u6458\u8981\u200b</p> <p>\u200b\u81ea\u7528\u200b\uff0c\u200b\u5237\u9898\u200b\u7684\u200b\u8bb0\u5f55\u200b</p> <p>\u200b\u9898\u89e3\u200b\u91c7\u7528\u200b C++\uff0cPython</p>"},{"location":"%E5%88%B7%E9%A2%98/BFS/PAT%20A1091_Acute%20Stroke/","title":"PAT A1091 Acute Stroke","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e3a\u200b\u4e09\u7ef4\u200bBFS\uff0c\u200b\u672c\u8d28\u200b\u4e0a\u200b\u548c\u200b\u4e8c\u7ef4\u200bBFS\u200b\u76f8\u540c\u200b\uff0c\u200b\u4e0d\u8fc7\u200b\u4ece\u200b\u4e0a\u4e0b\u5de6\u53f3\u200b4\u200b\u79cd\u200b\u65b9\u5411\u200b\u62d3\u5c55\u200b\u4e3a\u200b\u4e0a\u4e0b\u5de6\u53f3\u200b\u524d\u540e\u200b6\u200b\u79cd\u200b\u65b9\u5411\u200b\u3002</p> <p>\u200b\u4e00\u4e2a\u200b\u8fde\u901a\u200b\u7a7a\u95f4\u200b\u5373\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u6838\u200b\uff0c\u200b\u8fbe\u5230\u200b\u9608\u503c\u200bT\u200b\u7684\u200b\u6838\u200b\u53ef\u4ee5\u200b\u7b97\u8fdb\u200b\u603b\u200b\u4f53\u79ef\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200bBFS\u200b\u4e2d\u200b\u6bcf\u6b21\u200b\u8c03\u7528\u200bBFS\u200b\u76f8\u5f53\u4e8e\u200b\u8d70\u8fc7\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u8fde\u901a\u200b\u533a\u57df\u200b\uff0c\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200bvisit\u200b\u6570\u7ec4\u200b\u9632\u6b62\u200b\u91cd\u590d\u200b\u8bbf\u95ee\u200b\u5df2\u7ecf\u200b\u8bbf\u95ee\u200b\u7684\u200b\u5750\u6807\u200b\u3002</p> <pre><code>#include&lt;cstdio&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\nint M, N, L, T, ans;\n\ntypedef struct {\n    int x, y, z;\n} Node;\n\nint dx[6] = {0, 0, 0, 0, 1, -1};\nint dy[6] = {0, 0, 1, -1, 0, 0};\nint dz[6] = {1, -1, 0, 0, 0, 0};\n\nint graph[1290][130][61];\nbool visit[1290][130][61];\n\nbool judge(int x, int y, int z) {\n    if(x &lt; 0 || x &gt;= M || y &lt; 0 || y &gt;= N || z &lt; 0 || z &gt;= L) {\n        return false;\n    }\n    if(graph[x][y][z] == 0 || visit[x][y][z] == true) {\n        return false;\n    }\n    return true;\n}\n\nint BFS(int x, int y, int z) {\n    queue&lt;Node&gt; q;\n    Node temp;\n    temp.x = x;\n    temp.y = y;\n    temp.z = z;\n    q.push(temp);\n    visit[x][y][z] = true;\n    int res = 0;\n    while(!q.empty()) {\n        Node node = q.front();\n        q.pop();\n        res++;\n        for(int i = 0; i &lt; 6; i++) {\n            int nx = node.x + dx[i];\n            int ny = node.y + dy[i];\n            int nz = node.z + dz[i];\n            if(judge(nx, ny, nz)) {\n                temp.x = nx;\n                temp.y = ny;\n                temp.z = nz;\n                q.push(temp);\n                visit[nx][ny][nz] = true;\n            }\n        }\n    }\n    if(res &lt; T) return 0;\n    return res;\n}\n\nint main() {\n    scanf(\"%d %d %d %d\", &amp;M, &amp;N, &amp;L, &amp;T);\n    for(int k = 0; k &lt; L; k++) \n        for(int i = 0; i &lt; M; i++) \n            for(int j = 0; j &lt; N; j++) \n                scanf(\"%d\", &amp;graph[i][j][k]);\n    for(int z = 0; z &lt; L; z++) \n        for(int x = 0; x &lt; M; x++)\n            for(int y = 0; y &lt; N; y++)\n                if(graph[x][y][z] == 1 &amp;&amp; visit[x][y][z] == false)\n                    ans += BFS(x, y, z);\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/DFS/PAT%20A1103_Integer%20Factorization/","title":"PAT A1103 Integer Factorization","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u5bf9\u200b\u5b58\u50a8\u200b\u56e0\u5b50\u200b\u7684\u200bfac\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5047\u8bbe\u200b p = 2\uff0c\u200b\u53ef\u200b\u5f97\u200b fac[0] = 0, fac[1] = 1, fac[2] = 4 \u200b\u7b49\u200b\u3002</p> <p>\u200b\u76f4\u63a5\u200b\u9884\u5904\u7406\u200b\u81f3\u200bfac[i] &gt;= n\uff0c\u200b\u518d\u200b\u901a\u8fc7\u200bDFS\u200b\u8fdb\u884c\u200b\u641c\u7d22\u200b\u6c42\u200b\u51fa\u200b\u6700\u4f18\u200b\u89e3\u200b\u3002  <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; fac, ans, res;\n\nint n, k, p, maxFacSum = 0;\n\nint power(int x) {\n    int num = 1;\n    for(int i = 0; i &lt; p; i++)\n        num *= x;\n    return num;\n}\n\nvoid DFS(int idx, int numK, int sum, int facSum) {\n    if(sum == n &amp;&amp; numK == k) {\n        if(facSum &gt; maxFacSum) {\n            ans = res;\n            maxFacSum = facSum;\n        }\n        return;\n    }\n    if(sum &gt; n || numK &gt; k) return;\n    if(idx &gt;= 1) {\n        res.push_back(idx);\n        DFS(idx, numK + 1, sum + fac[idx], facSum + idx);\n        res.pop_back();\n        DFS(idx - 1, numK, sum, facSum);\n    }\n}\n\nint main() {\n    scanf(\"%d %d %d\", &amp;n, &amp;k, &amp;p);\n    int facP = 0, cnt = 0;\n    while(facP &lt;= n) {\n        fac.push_back(facP);\n        facP = power(++cnt);\n    }\n    DFS(fac.size() - 1, 0, 0, 0);\n    if(maxFacSum == 0)\n        printf(\"Impossible\");\n    else {\n        printf(\"%d = %d^%d\", n, ans[0], p);\n        for(int i = 1; i &lt; ans.size(); i++)\n            printf(\" + %d^%d\", ans[i], p);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/PAT%20A1010_Radix/","title":"PAT A1010 Radix","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4f7f\u7528\u200b\u4e8c\u5206\u6cd5\u200b\u6765\u200b\u67e5\u627e\u200b\u7b54\u6848\u200b\u8fdb\u5236\u200b\u6570\u5b57\u200b\uff0c\u200b\u5148\u200b\u5c06\u200b\u5df2\u7ecf\u200b\u786e\u5b9a\u200b\u8fdb\u5236\u200b\u7684\u200b\u8f93\u5165\u200b N1 \u200b\u8f6c\u5316\u200b\u4e3a\u200b\u5341\u8fdb\u5236\u200b\uff0c\u200b\u518d\u200b\u5c06\u200b\u5f85\u200b\u786e\u5b9a\u200b\u8fdb\u5236\u200b\u7684\u200b\u8f93\u5165\u200b N2 \u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u5341\u8fdb\u5236\u200b\u3002</p> <p>\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u4f7f\u7528\u200b long long \u200b\u7c7b\u578b\u200b\u6765\u200b\u907f\u514d\u200b\u6ea2\u51fa\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\u786e\u5b9a\u200b\u4e0a\u754c\u200b\u548c\u200b\u4e0b\u754c\u200b\uff0c\u200b\u4e0b\u754c\u200b\u4e3a\u200b N2 \u200b\u7684\u200b\u5404\u4f4d\u200b\u4e2d\u200b\u6700\u5927\u503c\u200b + 1\uff0c\u200b\u4e0a\u754c\u200b\u4e3a\u200b N1 \u200b\u7684\u200b\u5341\u8fdb\u5236\u200b\u503c\u200b\u548c\u200b\u4e0b\u754c\u200b\u4e8c\u8005\u200b\u4e2d\u53d6\u200b\u6700\u5927\u503c\u200b\u3002\u200b\u6ce8\u610f\u200b\u4e24\u4e2a\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u76f8\u540c\u200b\u65f6\u200b\uff0c\u200b\u8f93\u5165\u200b\u7ed9\u51fa\u200b\u7684\u200b radix \u200b\u5373\u200b\u4e3a\u200b\u76ee\u6807\u200b\u8fdb\u5236\u200b\u3002 </p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nstring N1, N2;\nint tag, radix;\n\nint chToInt(char ch) {\n    return isalpha(ch) ? (ch - 'a' + 10) : (ch - '0');\n}\n\nint calLowBound(string s) {\n    int res = 0;\n    for(int i = 0; i &lt; s.size(); i++) {\n        res = max(res, chToInt(s[i]));\n    }\n    return res + 1;\n}\n\nlong long calDecVal(string s, long long a) {\n    if(a == 10) return (long long)atoi(s.c_str());\n    long long res = 0, k = 1;\n    for(int i = s.size() - 1; i &gt;= 0; i--) {\n        res += k * chToInt(s[i]);\n        k *= a;\n    }\n    return res;\n}\n\nlong long calRadix(string s, long long x, long long L, long long R) {\n    long long mid, temp;\n    // \u200b\u95ed\u200b\u533a\u95f4\u200b\u4e8c\u5206\u200b\n    while(L &lt;= R) {\n        mid = (L + R) / 2;\n        temp = calDecVal(s, mid);\n        if(temp == x) return mid;\n        else if(temp &gt; x || temp &lt; 0) R = mid - 1;\n        else L = mid + 1;\n    }\n    return -1;\n}\n\n\n\nint main() {\n    cin &gt;&gt; N1 &gt;&gt; N2 &gt;&gt; tag &gt;&gt; radix;\n    if(N1 == N2) {\n        cout &lt;&lt; radix;\n        return 0;\n    }\n    if(tag == 2) swap(N1, N2);\n    long long N1_DecVal = calDecVal(N1, radix);\n    long long L = calLowBound(N2);\n    long long R = max(N1_DecVal, L);\n    long long ans = calRadix(N2, N1_DecVal, L, R);\n    if(ans != -1) cout &lt;&lt; ans;\n    else cout &lt;&lt; \"Impossible\";\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85/PAT%20A1068_Find%20More%20Coins/","title":"PAT A1068 Find More Coins","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e3a\u200b0-1\u200b\u80cc\u5305\u200b\u7684\u200b\u53d8\u5f62\u200b\u7248\u200b\uff0c\u200b\u6c42\u200b0-1\u200b\u80cc\u5305\u200b\u7684\u200b\u6700\u5c0f\u200b\u5b57\u5178\u200b\u5e8f\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u5176\u4e2d\u200b dp[i][j] \u200b\u4ee3\u8868\u200b\u4ece\u200b 1 ~ i \u200b\u53f7\u200b\u786c\u5e01\u200b\u4e2d\u200b\u9009\u62e9\u200b\uff0c\u200b\u5728\u200b\u6700\u5927\u200b\u652f\u4ed8\u200b\u989d\u5ea6\u200b\u4e3a\u200b j \u200b\u7684\u200b\u6761\u4ef6\u200b\u4e0b\u80fd\u200b\u652f\u4ed8\u200b\u7684\u200b\u6700\u5927\u200b\u91d1\u989d\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u672c\u9898\u200b\u4e2d\u200b\u8d1f\u91cd\u200b\u548c\u200b\u4ef7\u503c\u200b\u4e3a\u200b\u540c\u4e00\u200b\u6570\u636e\u200b\uff0c\u200b\u7531\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b dp[i][j] = max{dp[i-1][j], dp[i-1][j - coins[i]] + coins[i]} \u200b\u77e5\u5176\u200b\u6700\u5927\u200b\u91d1\u989d\u200b\u4e0d\u4f1a\u200b\u8d85\u51fa\u200b\u6700\u5927\u200b\u989d\u5ea6\u200b\u3002</p> <p>\u200b\u6240\u4ee5\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u6709\u89e3\u200b\u7684\u200b\u6761\u4ef6\u200b\u4e3a\u200b dp[n][m] == m\uff0c\u200b\u5176\u4e2d\u200b n \u200b\u4e3a\u200b\u786c\u5e01\u200b\u603b\u6570\u200b\uff0cm \u200b\u4e3a\u200b\u76ee\u6807\u200b\u652f\u4ed8\u200b\u989d\u5ea6\u200b\u3002</p> <p>\u200b\u6700\u5c0f\u200b\u5b57\u5178\u200b\u5e8f\u200b\uff1a\u200b\u5c06\u200b\u786c\u5e01\u200b\u4ece\u5927\u5230\u200b\u5c0f\u200b\u6392\u5e8f\u200b\uff0c\u200b\u5148\u200b\u8003\u8651\u200b\u5927\u200b\u786c\u5e01\u200b\uff0c\u200b\u904d\u5386\u200b\u5230\u200b\u5c0f\u200b\u786c\u5e01\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u62c6\u5206\u200b\uff0c\u200b\u5373\u200b dp[i][j] &lt;= dp[i-1][j-coins[i]] + coins[i] \u200b\u65f6\u200b\u8fdb\u884c\u200b\u7684\u200b\u62c6\u5206\u200b\u3002</p> <p>\u200b\u6c42\u200b\u51fa\u200b\u8def\u5f84\u200b\u65f6\u200b\uff0c\u200b\u5bf9\u4e8e\u200b i \u200b\u53f7\u200b\u786c\u5e01\u200b\uff0c\u200b\u5224\u65ad\u200b dp[i][j] == dp[i-1][j-coins[i]] + coins[i] \u200b\u6210\u7acb\u200b\u5373\u200b\u9700\u8981\u200b\u9009\u62e9\u200b\u8be5\u200b\u786c\u5e01\u200b\u3002</p> <p>\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\uff1a\u200b\u5c06\u200b dp \u200b\u4f18\u5316\u200b\u6210\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6839\u636e\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u9700\u8981\u200b\u6539\u53d8\u200b v \u200b\u7684\u200b\u904d\u5386\u200b\u65b9\u5411\u200b\uff0c\u200b\u53e6\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b choose \u200b\u548c\u200b flag \u200b\u6570\u7ec4\u200b\u6765\u200b\u5224\u65ad\u200b\uff0c\u200b\u4ee3\u7801\u200b\u53ef\u89c1\u200b\u300a\u200b\u7b97\u6cd5\u200b\u7b14\u8bb0\u200b\u300b\u3002</p> <pre><code>// \u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u7248\u200b\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int MAXN = 10005, MAXM = 105;\nint coins[MAXN], dp[MAXN][MAXM];\nint n, m;\nvector&lt;int&gt; ans;\n\nbool cmp(int a, int b) {\n    return a &gt; b;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; coins[i];\n    sort(coins + 1, coins + n + 1, cmp);\n    // dp\u200b\u8fc7\u7a0b\u200b\n    for(int i = 1; i &lt;= n; i++) {\n        for(int v = coins[i]; v &lt;= m; v++) {\n            dp[i][v] = max(dp[i-1][v], dp[i-1][v-coins[i]] + coins[i]);\n        }\n    }\n    // \u200b\u8f93\u51fa\u200b\u8def\u5f84\u200b\n    if(dp[n][m] != m) cout &lt;&lt; \"No Solution\";\n    else {\n        int j = m;\n        for(int i = n; i &gt;= 1; i--) {\n            if(j &gt;= coins[i] &amp;&amp; dp[i][j] == dp[i - 1][j - coins[i]] + coins[i]) {\n                ans.push_back(coins[i]);\n                j -= coins[i];\n            }\n        }\n        for(int i = 0; i &lt; ans.size(); i++) {\n            cout &lt;&lt; ans[i];\n            if(i &lt; ans.size() - 1) cout &lt;&lt; \" \";\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/LeetCode%201039.%E5%A4%9A%E8%BE%B9%E5%BD%A2%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%9A%84%E6%9C%80%E4%BD%8E%E5%BE%97%E5%88%86/","title":"LeetCode 1039.\u200b\u591a\u8fb9\u5f62\u200b\u4e09\u89d2\u200b\u5256\u5206\u200b\u7684\u200b\u6700\u4f4e\u200b\u5f97\u5206","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6682\u65e0\u200b</p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/LeetCode%205.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","title":"LeetCode 5.\u200b\u6700\u957f\u200b\u56de\u6587\u200b\u5b50\u4e32","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e0e\u200b PAT A1040 \u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4e0e\u200b LeetCode 516 \u200b\u6700\u5927\u200b\u7684\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\u672c\u9898\u200b\u6c42\u200b\u7684\u200b\u662f\u200b\u5b50\u4e32\u200b\u800c\u200b\u975e\u5b50\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5b50\u200b\u5e8f\u5217\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u5220\u51cf\u200b\u3002</p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/LeetCode%20516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/","title":"LeetCode 516.\u200b\u6700\u957f\u200b\u56de\u6587\u200b\u5b50\u200b\u5e8f\u5217","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u56de\u6587\u200b\u5b50\u200b\u5e8f\u5217\u200b\u548c\u200bLCS\u200b\u7684\u200b\u505a\u6cd5\u200b\u6bd4\u8f83\u200b\u76f8\u4f3c\u200b\uff0cs[i] = s[j] \u200b\u65f6\u200b\uff0c\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e3a\u200b dp[i][j] = dp[i + 1][j - 1] + 2\u3002 \u200b\u5426\u5219\u200b\u4e3a\u200b dp[i][j] = max{dp[i + 1][j], dp[i][j - 1]} \u200b\u5373\u4e0d\u9009\u200b s[i] \u200b\u6216\u8005\u200b\u4e0d\u9009\u200b s[j]\u3002</p> <p>dp[i][j] \u200b\u4ee3\u8868\u200b\u4ece\u200b s[i] \u200b\u5230\u200b s[j] \u200b\u7684\u200b\u56de\u6587\u200b\u5b50\u200b\u5e8f\u5217\u200b\u6700\u5927\u200b\u957f\u5ea6\u200b\uff0c\u200b\u53ef\u77e5\u200b i \u200b\u7684\u200b\u8f6c\u79fb\u200b\u987a\u5e8f\u200b\u4ece\u200b n - 1 \u200b\u5230\u200b 0\uff0cj \u200b\u7684\u200b\u8f6c\u79fb\u200b\u987a\u5e8f\u200b\u4ece\u200b i + 1 \u200b\u5230\u200b n - 1\u3002</p> <p>\u200b\u672c\u9898\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\u3002</p> <pre><code>class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n = s.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));\n        for(int i = n - 1; i &gt;= 0; i--) {\n            dp[i][i] = 1;\n            for(int j = i + 1; j &lt; n; j++) {\n                if(s[i] == s[j])\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                else\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[0][n - 1];\n    }\n};\n\n//\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\nclass Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n = s.size();\n        vector&lt;int&gt; dp(n, 0);\n        for(int i = n - 1; i &gt;= 0; i--) {\n            dp[i] = 1;\n            int pre = 0;\n            for(int j = i + 1; j &lt; n; j++) {\n                int temp = dp[j];\n                if(s[i] == s[j])\n                    dp[j] = pre + 2;\n                else\n                    dp[j] = max(dp[j], dp[j - 1]);\n                pre = temp;\n            }\n        }\n        return dp[n - 1];\n    }\n};\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/PAT%20A1040_Longest%20Symmetric%20String/","title":"PAT A1040 Longest Symmetric String","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u7684\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e3a\u200b dp[i][j] = dp[i + 1][j - 1] &amp;&amp; s[i] = s[j]\uff0c\u200b\u6ce8\u610f\u200b\u5b50\u4e32\u200b\u957f\u5ea6\u200b\u4e3a\u200b2\u200b\u65f6\u200b\u7279\u6b8a\u200b\u5904\u7406\u200b\u3002</p> <p>\u200b\u672c\u9898\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\nbool dp[MAXN][MAXN];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int n = s.size();\n    int ans = 1;\n    for(int i = n - 1; i &gt;= 0; i--) {\n        dp[i][i] = true;\n        for(int j = i + 1; j &lt; n; j++) {\n            dp[i][j] = (s[i] == s[j]) &amp;&amp; (j - i &lt; 2 || dp[i + 1][j - 1]);\n            if(dp[i][j] &amp;&amp; j - i + 1 &gt; ans) ans = j - i + 1; \n        }\n    }\n    cout &lt;&lt; ans;\n    return 0;\n}\n\n// \u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\n#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\nbool dp[MAXN];\n\nint main() {\n    string s;\n    getline(cin, s);\n    int n = s.size();\n    int ans = 1;\n    for(int i = n - 1; i &gt;= 0; i--) {\n        bool pre = false;\n        dp[i] = true;\n        for(int j = i + 1; j &lt; n; j++) {\n            bool temp = dp[j];\n            dp[j] = (s[i] == s[j]) &amp;&amp; (j - i &lt; 2 || pre);\n            if(dp[j] &amp;&amp; j - i + 1 &gt; ans) ans = j - i + 1; \n            pre = temp;\n        }\n    }\n    cout &lt;&lt; ans;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/PAT%20A1007_Maximum%20Subsequence%20Sum/","title":"PAT A1007 Maximum Subsequence Sum","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200b\u4e00\u7ef4\u200bdp\u200b\u6570\u7ec4\u200b\uff0cdp[i]\u200b\u4ee3\u8868\u200b\u4ee5\u200ba[i]\u200b\u4e3a\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5b50\u200b\u5e8f\u5217\u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4f7f\u7528\u200bs[i]\u200b\u8bb0\u5f55\u200b\u5b50\u200b\u5e8f\u5217\u200b\u7b2c\u4e00\u4e2a\u200b\u503c\u200b\u7684\u200b\u4e0b\u6807\u200b\u3002 \u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e3a\u200b dp[i] = max(dp[i-1] + a[i], a[i]) <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 10005;\n\nint dp[MAXN], a[MAXN], s[MAXN];\nint K;\n\nint main() {\n    scanf(\"%d\", &amp;K);\n    bool flag = false;\n    for(int i = 0; i &lt; K; i++) {\n        scanf(\"%d\", &amp;a[i]);\n        if(a[i] &gt;= 0) flag = true;\n    }\n    if(!flag) {\n        printf(\"0 %d %d\", a[0], a[K - 1]);\n        return 0;\n    }\n    dp[0] = a[0];\n    for(int i = 1; i &lt; K; i++) {\n        if(dp[i - 1] + a[i] &gt; a[i]) {\n            dp[i] = dp[i - 1] + a[i];\n            s[i] = s[i-1];\n        } else {\n            dp[i] = a[i];\n            s[i] = i;\n        }\n    }\n    int res = 0;\n    for(int i = 1; i &lt; K; i++)\n        if(dp[i] &gt; dp[res])\n            res = i;\n    printf(\"%d %d %d\", dp[res], a[s[res]], a[res]);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97LIS/PAT%20A1045_Favorite%20Color%20Stripe/","title":"PAT A1045 Favorite Color Stripe","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u200b\u5c06\u200b\u559c\u6b22\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b M \u200b\u7684\u200b\u989c\u8272\u200b\u5e8f\u5217\u200b\u6620\u5c04\u200b\u5230\u200b 0 ~ M-1\uff0c\u200b\u4e4b\u540e\u200b\u76f4\u63a5\u200b\u5c06\u200b\u4e0d\u200b\u559c\u6b22\u200b\u7684\u200b\u989c\u8272\u200b\u5e8f\u5217\u200b\u5220\u53bb\u200b\uff0c\u200b\u91cd\u65b0\u6574\u7406\u200b\u5f97\u5230\u200b\u6620\u5c04\u200b\u540e\u200b\u5b58\u7559\u200b\u7684\u200b\u989c\u8272\u200b\u5e8f\u5217\u200ba\uff0c\u200b\u6b64\u65f6\u200b\u5b58\u7559\u200b\u7684\u200b\u5e8f\u5217\u200b\u4e00\u5b9a\u200b\u90fd\u200b\u662f\u200b\u559c\u6b22\u200b\u7684\u200b\u989c\u8272\u200b\u3002</p> <p>\u200b\u518d\u200b\u6309\u7167\u200bLIS\u200b\u7684\u200b\u6a21\u677f\u200b\uff0cdp[i]\u200b\u4ee3\u8868\u200ba[i]\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u6700\u957f\u200b\u5e8f\u5217\u200b\uff0c\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e3a\u200bdp[i] = max{dp[j]} + 1, 0 &lt; j &lt; i\uff0c\u200b\u4e14\u200b\u6ee1\u8db3\u200ba[j] &lt;= a[i]\u200b\u5373\u200b\u4e0d\u200b\u9012\u51cf\u200b\u3002</p> <pre><code>//LIS\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXC = 210;\nconst int MAXN = 10010;\n\nint hashTable[MAXC], a[MAXN], dp[MAXN];\n\nint main() {\n    int numColor, M;\n    scanf(\"%d%d\", &amp;numColor, &amp;M);\n    fill(hashTable, hashTable + MAXC, -1);\n    int color;\n    for(int i = 0; i &lt; M; i++) {\n        scanf(\"%d\", &amp;color);\n        hashTable[color] = i;\n    }\n    int totalColor, num = 0;\n    scanf(\"%d\", &amp;totalColor);\n    for(int i = 0; i &lt; totalColor; i++) {\n        scanf(\"%d\", &amp;color);\n        if(hashTable[color] &gt;= 0) \n            a[num++] = hashTable[color];\n    }\n    int ans = -1;\n    for(int i = 0; i &lt; num; i++) {\n        dp[i] = 1;\n        for(int j = 0; j &lt; i; j++) \n            if(a[j] &lt;= a[i] &amp;&amp; dp[i] &lt; dp[j] + 1)\n                dp[i] = dp[j] + 1;\n        ans = max(ans, dp[i]);\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n\n//LCS\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int MAXC = 210;\nconst int MAXN = 10005;\n\nint A[MAXC], B[MAXN], dp[MAXC][MAXN];\n\nint main() {\n    int N, M;\n    scanf(\"%d%d\", &amp;N, &amp;M);\n    for(int i = 1; i &lt;= M; i++)\n        scanf(\"%d\", &amp;A[i]);\n    int L;\n    scanf(\"%d\", &amp;L);\n    for(int i = 1; i &lt;= L; i++)\n        scanf(\"%d\", &amp;B[i]);\n    for(int i = 1; i &lt;= M; i++) {\n        for(int j = 1; j &lt;= L; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            if(A[i] == B[j]) dp[i][j] += 1;\n        }\n    }\n    printf(\"%d\", dp[M][L]);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97LCS/LeetCode%2072.%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/","title":"LeetCode 72.\u200b\u7f16\u8f91\u200b\u8ddd\u79bb","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u4e00\u5171\u200b\u6709\u200b\u4e09\u79cd\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u63d2\u5165\u200b\uff0c\u200b\u5220\u9664\u200b\u548c\u200b\u66ff\u6362\u200b\u3002\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e3a\u200b\uff0c\u200b\u82e5\u200b s[i] = t[j]\uff0cdp[i][j] = dp[i - 1][j - 1]\u3002d \u200b\u82e5\u200b s[i] != t[j]\uff0cdp[i][j] = min{dp[i][j - 1]\uff08\u200b\u63d2\u5165\u200b\uff09, dp[i - 1][j]\uff08\u200b\u5220\u9664\u200b\uff09, dp[i - 1][j - 1]\uff08\u200b\u66ff\u6362\u200b\uff09} + 1\u3002</p> <p>\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\uff1a\u200b\u672c\u9898\u200b\u4f9d\u8d56\u200b\u7684\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u53ef\u7528\u200b\u6eda\u52a8\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\u6210\u200b\u4e24\u4e2a\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4e24\u4e2a\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\u7684\u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u4ec5\u200b\u4f9d\u8d56\u4e8e\u200b\u5de6\u200b\uff0c\u200b\u4e0a\u200b\uff0c\u200b\u5de6\u200b\u4e0a\u200b\uff0c\u200b\u4e09\u4e2a\u200b\u65b9\u5411\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5de6\u4e0a\u200b\u4f1a\u200b\u88ab\u200b\u5de6\u200b\u8986\u76d6\u200b\u3002 \u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u4e34\u65f6\u200b\u53d8\u91cf\u200b\u6765\u200b\u4fdd\u5b58\u200b\u5de6\u4e0a\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u4f18\u5316\u200b\u6210\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\u3002 <pre><code>class Solution {\npublic:\n    int min(int a, int b, int c) {\n        if(a &lt; b) return a &gt; c ? c : a;\n        return b &gt; c ? c : b;\n    }\n\n    int minDistance(string word1, string word2) {\n        int m = word1.size(), n = word2.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(m + 1, vector&lt;int&gt;(n + 1, 0));\n        for(int j = 0; j &lt; n; j++) {\n            dp[0][j + 1] = j + 1;\n        }\n        for(int i = 0; i &lt; m; i++) {\n            dp[i + 1][0] = i + 1;\n            for(int j = 0; j &lt; n; j++) {\n                if(word1[i] == word2[j]) {\n                    dp[i + 1][j + 1] = dp[i][j];\n                } else {\n                    dp[i + 1][j + 1] = min(dp[i + 1][j], dp[i][j + 1], dp[i][j]) + 1;\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};\n\n//\u200b\u7a7a\u95f4\u200b\u4f18\u5316\u200b\nclass Solution {\npublic:\n    int min(int a, int b, int c) {\n        if(a &lt; b) return a &gt; c ? c : a;\n        return b &gt; c ? c : b;\n    }\n\n    int minDistance(string word1, string word2) {\n        int m = word1.size(), n = word2.size();\n        vector&lt;int&gt; dp(n + 1, 0);\n        for(int j = 0; j &lt; n; j++) {\n            dp[j + 1] = j + 1;\n        }\n        int pre, temp;\n        for(int i = 0; i &lt; m; i++) {\n            pre = dp[0];\n            dp[0] += 1;\n            for(int j = 0; j &lt; n; j++) {\n                temp = dp[j + 1];\n                if(word1[i] == word2[j]) {\n                    dp[j + 1] = pre;\n                } else {\n                    dp[j + 1] = min(dp[j], temp, pre) + 1;\n                }\n                pre = temp;\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97LCS/PAT%20A1045_Favorite%20Color%20Stripe/","title":"PAT A1045 Favorite Color Stripe","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e3a\u200b LCS \u200b\u6a21\u677f\u200b\u9898\u200b\u7684\u200b\u53d8\u5f62\u200b\u3002\u200b\u539f\u672c\u200b LCS \u200b\u72b6\u6001\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u82e5\u200b A[i] == B[j]\uff0c\u200b\u5219\u200b dp[i][j] = dp[i - 1][j - 1] + 1\uff08\u200b\u53ef\u200b\u8bc1\u660e\u200b\uff09\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u672c\u9898\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u4ea7\u751f\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u5339\u914d\u200b\uff0c\u200b\u6b64\u65f6\u200b\u8f6c\u79fb\u200b\u65b9\u7a0b\u200b\u53d8\u4e3a\u200b dp[i][j] = max{dp[i - 1][j], dp[i][j - 1]} + 1\u3002</p> <p>\u200b\u8fb9\u754c\u200b\uff1adp[i][0] = dp[0][j] = 0 (0 &lt;= i &lt;= n, 0 &lt;= j &lt;= n)</p> <pre><code>//LCS\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int MAXC = 210;\nconst int MAXN = 10005;\n\nint A[MAXC], B[MAXN], dp[MAXC][MAXN];\n\nint main() {\n    int N, M;\n    scanf(\"%d%d\", &amp;N, &amp;M);\n    for(int i = 1; i &lt;= M; i++)\n        scanf(\"%d\", &amp;A[i]);\n    int L;\n    scanf(\"%d\", &amp;L);\n    for(int i = 1; i &lt;= L; i++)\n        scanf(\"%d\", &amp;B[i]);\n    for(int i = 1; i &lt;= M; i++) {\n        for(int j = 1; j &lt;= L; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            if(A[i] == B[j]) dp[i][j] += 1;\n        }\n    }\n    printf(\"%d\", dp[M][L]);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1013_Battle%20Over%20Cities/","title":"PAT A1013 Battle Over Cities","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u53ef\u4ee5\u200b\u7528\u200bDFS\u200b\u548c\u200b\u5e76\u200b\u67e5\u96c6\u200b\u4e24\u79cd\u200b\u505a\u6cd5\u200b\u3002</p> <p>DFS\uff1a\u200b\u5bf9\u56fe\u200b\u8fdb\u884c\u200bDFS\u200b\u904d\u5386\u200b\uff0c\u200b\u5f97\u5230\u200b\u82e5\u5e72\u4e2a\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b\uff0c\u200b\u9700\u8981\u200b\u8865\u5145\u200b\u7684\u200b\u9053\u8def\u200b\u6570\u91cf\u200b\u5373\u200b\u4e3a\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b-1</p> <p>\u200b\u5e76\u200b\u67e5\u96c6\u200b\uff1a\u200b\u5bf9\u200b\u88ab\u200b\u5220\u9664\u200b\u4e4b\u5916\u200b\u7684\u200b\u70b9\u200b\u8fdb\u884c\u200bUnion\uff0c\u200b\u6700\u540e\u200b\u67e5\u8be2\u200b\u96c6\u5408\u200b\u4e2a\u6570\u200b\uff0c\u200b\u7b49\u540c\u4e8e\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b\u6570\u200b</p> <pre><code>//DFS\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n\nconst int maxn = 1005;\n\nvector&lt;int&gt; G[maxn];\nbool visit[maxn];\nint N, M, K;\nint delVertex;\n\nvoid DFS(int v) {\n    if(v == delVertex) return;\n    visit[v] = true;\n    for(int i = 0; i &lt; G[v].size(); i++) \n        if(!visit[G[v][i]]) DFS(G[v][i]);\n}\n\nint main() {\n    scanf(\"%d %d %d\", &amp;N, &amp;M, &amp;K);\n    int v1, v2;\n    for(int i = 0; i &lt; M; i++) {\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        G[v1].push_back(v2);\n        G[v2].push_back(v1);\n    }\n    int block;\n    for(int q = 0; q &lt; K; q++) {\n        scanf(\"%d\", &amp;delVertex);\n        memset(visit, false, sizeof(visit));\n        block = 0;\n        for(int i = 1; i &lt;= N; i++) {\n            if(i != delVertex &amp;&amp; !visit[i]) {\n                DFS(i);\n                block++;\n            }\n        }\n        printf(\"%d\\n\", block - 1);\n    }\n    return 0;\n}\n</code></pre> <pre><code>//\u200b\u5e76\u200b\u67e5\u96c6\u200b\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int maxn = 1005;\n\nvector&lt;int&gt; G[maxn];\nbool visit[maxn];\nint father[maxn];\nint N, M, K;\nint delVertex;\n\nint findFather(int x) {\n    int temp = x;\n    while(x != father[x])\n        x = father[x];\n    int a;\n    while(temp != father[temp]) {\n        a = temp;\n        temp = father[temp];\n        father[a] = x;\n    }\n    return x;\n}\n\nvoid Union(int a, int b) {\n    int fa = findFather(a);\n    int fb = findFather(b);\n    if(fa != fb) father[fa] = fb;\n}\n\nint main() {\n    scanf(\"%d %d %d\", &amp;N, &amp;M, &amp;K);\n    int v1, v2;\n    for(int i = 0; i &lt; M; i++) {\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        G[v1].push_back(v2);\n        G[v2].push_back(v1);\n    }\n    int block;\n    for(int q = 0; q &lt; K; q++) {\n        scanf(\"%d\", &amp;delVertex);\n        for(int i = 1; i &lt;= N; i++) {\n            father[i] = i;\n            visit[i] = false;\n        }\n        for(int i = 1; i &lt;= N; i++) {\n            for(int j = 0; j &lt; G[i].size(); j++) {\n                v1 = i, v2 = G[i][j];\n                if(v1 == delVertex || v2 == delVertex)\n                    continue;\n                Union(v1, v2);\n            }\n        }\n        block = 0;\n        for(int i = 1; i &lt;= N; i++) {\n            if(i == delVertex) continue;\n            int f = findFather(i);\n            if(!visit[f]) {\n                block++;\n                visit[f] = true;\n            }\n        }\n        printf(\"%d\\n\", block - 1);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1021_Deepest%20Root/","title":"PAT A1021 Deepest Root","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u9996\u5148\u200b\u5229\u7528\u200b\u5e76\u200b\u67e5\u96c6\u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u80fd\u591f\u200b\u6784\u6210\u200b\u4e00\u68f5\u6811\u200b\uff0c\u200b\u5373\u200b\u6574\u4e2a\u200b\u56fe\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200bfather\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u56fe\u200b\u8fde\u901a\u200b\u4e14\u200b\u6709\u200bn\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u8fb9\u6570\u200b\u4e3a\u200bn-1\uff0c\u200b\u53ef\u77e5\u200b\u4e00\u5b9a\u200b\u80fd\u200b\u6784\u6210\u200b\u4e00\u68f5\u6811\u200b\u3002</p> <p>\u200b\u9009\u53d6\u200b\u4efb\u610f\u200b\u7ed3\u70b9\u200b\u8fdb\u884c\u200bDFS\u200b\u5f97\u5230\u200b\u6700\u5927\u200b\u9ad8\u5ea6\u200b\u7684\u200b\u7aef\u70b9\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u4e3a\u200b\u5019\u9009\u200b\u7684\u200bDeepest Root\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u79f0\u4f5c\u200b\u96c6\u5408\u200bA\u3002\u200b\u518d\u6b21\u200b\u4ece\u200b\u8fd9\u4e9b\u200b\u96c6\u5408\u200bA\u200b\u7684\u200b\u67d0\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\u51fa\u53d1\u200b\uff0c\u200b\u5f97\u5230\u200b\u6700\u5927\u200b\u9ad8\u5ea6\u200b\u7684\u200b\u7aef\u70b9\u200b\u96c6\u5408\u200b\u79f0\u4f5c\u200b\u96c6\u5408\u200bB\u3002</p> <p>\u200b\u53ef\u8bc1\u200b\uff08\u200b\u8be6\u89c1\u200b\u7b97\u6cd5\u200b\u7b14\u8bb0\u200b\uff09A\u200b\u4e0e\u200bB\u200b\u7684\u200b\u5e76\u200b\u96c6\u200b\uff08\u200b\u6ce8\u610f\u200b\u53bb\u200b\u91cd\u200b\uff09\u200b\u5373\u200b\u4e3a\u200b\u6240\u6c42\u200b\u7684\u200bDeepest Root\u200b\u7ed3\u70b9\u200b\u96c6\u5408\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int maxn =10005;\n\nvector&lt;int&gt; G[maxn];\nint father[maxn];\nint isRoot[maxn];\nint n, maxHeight = 0;\nvector&lt;int&gt; ans, res;\n\nvoid init() {\n    for(int i = 1; i &lt;= n; i++)\n        father[i] = i;\n}\n\nint findFather(int x) {\n    int temp = x;\n    while(x != father[x]) \n        x = father[x];\n    int a;\n    while(temp != father[temp]) {\n        a = temp;\n        temp = father[temp];\n        father[a] = x;\n    }\n    return x;\n}\n\nvoid Union(int a, int b) {\n    int fa = findFather(a);\n    int fb = findFather(b);\n    if(fa != fb) father[fa] = fb;\n}\n\nint blockNum() {\n    int block = 0;\n    for(int i = 1; i &lt;= n; i++) \n        if(findFather(i) == i)\n            block++;\n    return block;\n}\n\nvoid DFS(int idx, int height, int pre) {\n    if(height &gt; maxHeight) {\n        maxHeight = height;\n        res.clear();\n        res.push_back(idx);\n    } else if(height == maxHeight)\n        res.push_back(idx);\n    for(int i = 0; i &lt; G[idx].size(); i++) {\n        if(G[idx][i] == pre) continue;\n        DFS(G[idx][i], height + 1, idx);\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    init();\n    int v1, v2;\n    for(int i = 0; i &lt; n - 1; i++) {\n        scanf(\"%d %d\", &amp;v1, &amp;v2);\n        G[v1].push_back(v2);\n        G[v2].push_back(v1);\n        Union(v1, v2);\n    }\n    int block = blockNum();\n    if(block == 1) {\n        DFS(1, 1, -1);\n        ans = res;\n        DFS(ans[0], 1, -1);\n        for(int i = 0; i &lt; res.size(); i++)\n            ans.push_back(res[i]);\n        sort(ans.begin(), ans.end());\n        printf(\"%d\\n\", ans[0]);\n        for(int i = 1; i &lt; ans.size(); i++)\n            if(ans[i] != ans[i - 1])\n                printf(\"%d\\n\", ans[i]);\n    } else {\n        printf(\"Error: %d components\\n\", block);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1034_Head%20of%20a%20Gang/","title":"PAT A1034 Head of a Gang","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u901a\u8fc7\u200b\u90bb\u63a5\u77e9\u9635\u200b\u6784\u5efa\u200b\u5e2e\u6d3e\u200b\u56fe\u200b\uff0c\u200b\u901a\u8fc7\u200bDFS\u200b\u786e\u5b9a\u200b\u4e0d\u540c\u200b\u7684\u200b\u8fde\u901a\u200b\u5206\u91cf\u200b\u6765\u200b\u786e\u5b9a\u200b\u5e2e\u6d3e\u200b\u4e2a\u6570\u200b\u4ee5\u53ca\u200b\u4eba\u6570\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\u7ed9\u51fa\u200b\u7684\u200b\u56fe\u200b\u7ed3\u6784\u200b\u4e3a\u200b\u65e0\u200b\u5411\u200b\u56fe\u200b\uff0c\u200b\u4e3a\u200b\u7ed3\u70b9\u200b\u6dfb\u52a0\u200b\u5b8c\u200b\u6743\u91cd\u200b\u4e4b\u540e\u200b\uff0c\u200b\u7531\u200b\u6700\u5927\u200b\u6743\u91cd\u200b\u786e\u5b9a\u200b\u5e2e\u6d3e\u200b\u7262\u5927\u200b\u3002</p> <p>\u200b\u6574\u4e2a\u200b\u5e2e\u6d3e\u200b\u7684\u200b\u9608\u503c\u200b\u7531\u8fb9\u6743\u200b\u786e\u5b9a\u200b\uff0c\u200b\u5373\u200b\u6bcf\u200b\u6761\u8fb9\u200b\u53ea\u200b\u4f7f\u7528\u200b\u4e00\u6b21\u200b\uff0c\u200b\u4f7f\u7528\u200b\u540e\u200b\u5c06\u200b\u8fb9\u200b\u6743\u7f6e\u200b0\uff0c\u200b\u9632\u6b62\u200b\u91cd\u590d\u4f7f\u7528\u200b\u8fb9\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\u9898\u76ee\u200b\u7ed9\u51fa\u200b\u6700\u5927\u200b\u7684\u200bn\u200b\u4e3a\u200b1000\uff0c\u200b\u4f46\u200b\u8003\u8651\u200b\u5230\u200b\u901a\u8bdd\u200b\u662f\u200b\u53cc\u65b9\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200bmaxn\u200b\u5e94\u8be5\u200b\u5927\u4e8e\u200b2000\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;string&gt;\n#include&lt;map&gt;\nusing namespace std;\n\nconst int maxn = 2010;\n\nmap&lt;string, int&gt; Str2Int;\nmap&lt;int, string&gt; Int2Str;\nmap&lt;string, int&gt; Gang;\nbool visit[maxn];\nint G[maxn][maxn], weight[maxn];\nint N, K, num;\n\nint transform(string s) {\n    if(Str2Int.find(s) != Str2Int.end())\n        return Str2Int[s];\n    Str2Int[s] = ++num;\n    Int2Str[num] = s;\n    return num;\n} \n\nvoid DFS(int nowVisit, int&amp; head, int&amp; numMember, int&amp; totalWeight) {\n    numMember++;\n    visit[nowVisit] = true;\n    if(weight[nowVisit] &gt; weight[head])\n        head = nowVisit;\n    for(int i = 1; i &lt;= num; i++)\n        if(G[nowVisit][i] &gt; 0) {\n            totalWeight += G[nowVisit][i];\n            G[nowVisit][i] = G[i][nowVisit] = 0;\n            if(!visit[i]) DFS(i, head, numMember, totalWeight);\n        }\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    string s1, s2;\n    int w;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; w;\n        int id1 = transform(s1);\n        int id2 = transform(s2);\n        G[id1][id2] += w;\n        G[id2][id1] += w;\n        weight[id1] += w;\n        weight[id2] += w;\n    }\n    int head, numMember, totalWeight;\n    for(int i = 1; i &lt;= num; i++) \n        if(!visit[i]) {\n            head = i, numMember = 0, totalWeight = 0; \n            DFS(i, head, numMember, totalWeight);\n            if(numMember &gt; 2 &amp;&amp; totalWeight &gt; K)\n                Gang[Int2Str[head]] = numMember;\n        }\n    cout &lt;&lt; Gang.size() &lt;&lt; endl;\n    for(auto &amp;res : Gang) \n        cout &lt;&lt; res.first &lt;&lt; \" \" &lt;&lt; res.second &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1076_Forwards%20on%20Weibo/","title":"PAT A1076 Forwards on Weibo","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e3a\u200b\u56fe\u200b\u7ed3\u6784\u200b\u7684\u200b\u904d\u5386\u200b\u9898\u200b\uff0c\u200b\u9898\u610f\u200b\u4e2d\u200b\u7ed9\u51fa\u200b\u8f6c\u53d1\u200b\u6b21\u6570\u200b\u4e0a\u9650\u200b\uff0c\u200b\u5373\u200b\u6309\u5c42\u200b\u6765\u200b\u904d\u5386\u200b\u90bb\u63a5\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5355\u200b\u6b65\u6b65\u200b\u957f\u200b\u4f7f\u7528\u200bBFS\u200b\u5373\u53ef\u200b\u89e3\u51b3\u200b\u3002\u200b\u6bcf\u6b21\u200b\u76f8\u90bb\u200b\u7684\u200b\u7ed3\u70b9\u200b\u5165\u961f\u200b\u65f6\u200b\uff0c\u200b\u5c42\u6570\u200b\u52a0\u4e00\u200b\uff0c\u200b\u5373\u200b\u8f6c\u53d1\u200b\u5c42\u6570\u200b\u7684\u200b\u9650\u5236\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;cstring&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\ntypedef struct {\n    int id, layer;\n} Node;\n\nconst int maxn = 1005;\nvector&lt;Node&gt; G[maxn];\nbool visit[maxn];\nint N, K, L;\n\nint BFS(int idQuery, int Layer) {\n    queue&lt;Node&gt; q;\n    Node s;\n    s.id = idQuery;\n    s.layer = 0;\n    q.push(s);\n    visit[s.id] = true;\n    int res = 0;\n    while(!q.empty()) {\n        Node t = q.front();\n        q.pop();\n        int id = t.id;\n        for(int i = 0; i &lt; G[id].size(); i++) {\n            Node next = G[id][i];\n            next.layer = t.layer + 1;\n            if(!visit[next.id] &amp;&amp; next.layer &lt;= L) {\n                q.push(next);\n                visit[next.id] = true;\n                res++;\n            }\n        }\n    }\n    return res;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; L;\n    Node user;\n    int numFollow, idFollow;\n    for(int i = 1; i &lt;= N; i++) {\n        user.id = i;\n        cin &gt;&gt; numFollow;\n        for(int j = 0; j &lt; numFollow; j++) {\n            cin &gt;&gt; idFollow;\n            G[idFollow].push_back(user);\n        }\n    }\n    cin &gt;&gt; K;\n    int idQuery;\n    for(int k = 0; k &lt; K; k++) {\n        cin &gt;&gt; idQuery;\n        memset(visit, false, sizeof(bool) * (N + 1));\n        int numForward = BFS(idQuery, L);\n        cout &lt;&lt; numForward &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1003_Emergency/","title":"PAT A1003 Emergency","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200bDijkstra\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u4ece\u200b\u6e90\u70b9\u200b\u51fa\u53d1\u200b\u6c42\u51fa\u200b\u5230\u200b\u5176\u4ed6\u200b\u6240\u6709\u200b\u70b9\u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\u6570\u91cf\u200b\u4ee5\u53ca\u200b\u70b9\u6743\u200b\u548c\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int maxn = 505;\nconst int INF = 1e9;\n\nint rescue[maxn], G[maxn][maxn];\nint weight[maxn], d[maxn], num[maxn];\nbool visit[maxn];\nint N, M, start, ed;\n\nvoid Dijkstra(int s) {\n    fill(d, d + maxn, INF);\n    d[s] = 0;\n    weight[s] = rescue[s];\n    num[s] = 1;\n    // \u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b\u53ea\u200b\u9700\u8981\u200b\u5faa\u73af\u200b N - 1 \u200b\u6b21\u200b\n    // \u200b\u6bd4\u5982\u200b N = 2 \u200b\u65f6\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b 2 - 1 = 1 \u200b\u6b21\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5f97\u5230\u200b\u6700\u77ed\u200b\u8def\u5f84\u200b\n    for(int i = 0; i &lt; N - 1; i++) {\n        int u = -1, MIN = INF;\n        for(int j = 0; j &lt; N; j++) \n            if(!visit[j] &amp;&amp; d[j] &lt; MIN) {\n                u = j;\n                MIN = d[j];\n            }\n        if(u == -1) return;\n        visit[u] = true;\n        for(int v = 0; v &lt; N; v++) \n            if(!visit[v] &amp;&amp; G[u][v] != INF) {\n                if(d[u] + G[u][v] &lt; d[v]) {\n                    d[v] = d[u] + G[u][v];\n                    weight[v] = weight[u] + rescue[v];\n                    num[v] = num[u];\n                } else if(d[u] + G[u][v] == d[v]) {\n                    if(weight[u] + rescue[v] &gt; weight[v]) \n                        weight[v] = weight[u] + rescue[v];\n                    num[v] += num[u];\n                }\n            }\n    }\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; start &gt;&gt; ed;\n    for(int i = 0; i &lt; N; i++)\n        cin &gt;&gt; rescue[i];\n    int u, v, w;\n    fill(G[0], G[0] + maxn * maxn, INF);\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[v][u] = G[u][v] = w;\n    }\n    Dijkstra(start);\n    cout &lt;&lt; num[ed] &lt;&lt; \" \" &lt;&lt; weight[ed] &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1018_Public%20Bike%20Management/","title":"PAT A1018 Public Bike Management","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u200b\u4f7f\u7528\u200bDijkstra\u200b\u7b97\u6cd5\u200b\u6c42\u51fa\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\uff0c\u200b\u4f7f\u7528\u200bpre\u200b\u8bb0\u5f55\u200b\u6700\u77ed\u200b\u8def\u5f84\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u524d\u9a71\u200b\u3002</p> <p>\u200b\u518d\u200b\u4f7f\u7528\u200bDFS\u200b\u4ece\u200b\u76ee\u6807\u200b\u7ed3\u70b9\u200b\u5f00\u59cb\u200b\u5012\u5e8f\u200b\u904d\u5386\u200b\u5230\u200bPBMC\uff0c\u200b\u6c42\u200b\u51fa\u200b\u5177\u6709\u200b\u6700\u5c0f\u200bNeed\u200b\u540c\u65f6\u200b\u5177\u6709\u200b\u6700\u5c0f\u200bremain\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5012\u5e8f\u200b\u904d\u5386\u200b\u5230\u200bPBMC\u200b\u4e4b\u540e\u200b\u624d\u200b\u5f00\u59cb\u200b\u8ba1\u7b97\u200bneed\u200b\u548c\u200bremain\uff0c\u200b\u800c\u4e14\u200b\u5f53\u200b\u51fa\u73b0\u200bremain\u200b\u4e0d\u8db3\u200b\u5f53\u524d\u200b\u7ad9\u70b9\u200b\u6240\u200b\u9700\u200b\u81ea\u884c\u8f66\u200b\u6570\u91cf\u200b\u65f6\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u9700\u8981\u200b\u4ece\u200bPBMC\u200b\u5e26\u6765\u200b\u81ea\u884c\u8f66\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bneed\u200b\u5355\u8c03\u200b\u589e\u52a0\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u4ece\u200b\u540e\u9762\u200b\u7684\u200b\u7ed3\u70b9\u200b\u4e2d\u200b\u5f97\u5230\u200b\u7684\u200bremain\u200b\u518d\u200b\u8865\u8d34\u200b\u524d\u9762\u200b\u7684\u200b\u7ed3\u70b9\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\nconst int maxn = 505;\nconst int INF = 1e9;\n\nint Cmax, N, Sp, M;\nint minRemain = INF, minNeed = INF;\nint G[maxn][maxn], weight[maxn], d[maxn];\nbool visit[maxn];\nvector&lt;int&gt; pre[maxn], temp, ans;\n\nvoid Dijkstra(int s) {\n    fill(d, d + maxn, INF);\n    d[s] = 0;\n    for(int i = 0; i &lt; N; i++) {\n        int u = -1, MIN = INF;\n        for(int j = 0; j &lt;= N; j++) \n            if(!visit[j] &amp;&amp; d[j] &lt; MIN) {\n                u = j;\n                MIN = d[j];\n            }\n        if(u == -1) return;\n        visit[u] = true;\n        for(int v = 0; v &lt;= N; v++) \n            if(!visit[v] &amp;&amp; G[u][v] != INF) {\n                if(d[u] + G[u][v] &lt; d[v]) {\n                    d[v] = d[u] + G[u][v];\n                    pre[v].clear();\n                    pre[v].push_back(u);\n                } else if(d[u] + G[u][v] == d[v]) {\n                    pre[v].push_back(u);\n                }\n            }\n    }\n}\n\nvoid DFS(int s) {\n    if(s == 0) {\n        temp.push_back(s);\n        int need = 0, remain = 0;\n        for(int i = temp.size() - 1; i &gt;= 0; i--) {\n            int u = temp[i];\n            if(weight[u] &gt; 0) remain += weight[u];\n            else {\n                if(remain &gt; abs(weight[u]))\n                    remain -= abs(weight[u]);\n                else {\n                    need += abs(weight[u]) - remain;\n                    remain = 0;\n                }\n            }\n        }\n        if(need &lt; minNeed) {\n            minNeed = need;\n            minRemain = remain;\n            ans = temp;\n        } else if(need == minNeed &amp;&amp; remain &lt; minRemain) {\n            minRemain = remain;\n            ans = temp;\n        } \n        temp.pop_back();\n        return;\n    }\n    temp.push_back(s);\n    for(int i = 0; i &lt; pre[s].size(); i++)\n        DFS(pre[s][i]);\n    temp.pop_back();\n}\n\nint main() {\n    cin &gt;&gt; Cmax &gt;&gt; N &gt;&gt; Sp &gt;&gt; M;\n    for(int i = 1; i &lt;= N; i++) {\n        cin &gt;&gt; weight[i];\n        weight[i] -= Cmax / 2;\n    }\n    int u, v, w;\n    fill(G[0], G[0] + maxn * maxn, INF);\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u][v] = G[v][u] = w;\n    }\n    Dijkstra(0);\n    DFS(Sp);\n    printf(\"%d \", minNeed);\n    for(int i = ans.size() - 1; i &gt;= 0; i--) {\n        printf(\"%d\", ans[i]);\n        if(i &gt; 0) printf(\"-&gt;\");\n    }\n    printf(\" %d\\n\", minRemain);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1030_Travel%20Plan/","title":"PAT A1030 Travel Plan","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u636e\u200bDijkstra\u200b\u7b97\u6cd5\u200b\u6c42\u51fa\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\uff0c\u200b\u7528\u200bpre\u200b\u4fdd\u5b58\u200b\u8def\u5f84\u200b\u4e0a\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u524d\u9a71\u200b\u3002\u200b\u518d\u200b\u4f7f\u7528\u200bDFS\u200b\u4ece\u200b\u7ec8\u70b9\u200b\u8fdb\u884c\u200b\u5012\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u4e0b\u200b\u6700\u5c0f\u200b\u7684\u200bcost\u200b\u5373\u200b\u4e3a\u200b\u7b54\u6848\u200b\u8def\u5f84\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int MAXN = 505;\nconst int INF =1e9;\n\nint N, M, S, ed, minCost = INF;\nint G[MAXN][MAXN], cost[MAXN][MAXN], d[MAXN];\nbool visit[MAXN];\nvector&lt;int&gt; pre[MAXN], temp, ans;\n\nvoid Dijkstra(int s) {\n    fill(d, d + MAXN, INF);\n    d[s] = 0;\n    for(int i = 0; i &lt; N - 1; i++) {\n        int u = -1, MIN = INF;\n        for(int j = 0; j &lt; N; j++)\n            if(!visit[j] &amp;&amp; d[j] &lt; MIN) {\n                u = j;\n                MIN = d[j];\n            }\n        if(u == -1) return;\n        visit[u] = true;\n        for(int v = 0; v &lt; N; v++) \n            if(!visit[v] &amp;&amp; G[u][v] &lt; INF) {\n                if(d[u] + G[u][v] &lt; d[v]) {\n                    d[v] = d[u] + G[u][v];\n                    pre[v].clear();\n                    pre[v].push_back(u);\n                } else if(d[u] + G[u][v] == d[v]) {\n                    pre[v].push_back(u);\n                }\n            }\n    }\n}\n\nvoid DFS(int v) {\n    if(v == S) {\n        temp.push_back(v);\n        int nowCost = 0;\n        for(int i = temp.size() - 1; i &gt; 0; i--) {\n            int id = temp[i], id_next = temp[i - 1];\n            nowCost += cost[id][id_next];\n        }\n        if(nowCost &lt; minCost) {\n            minCost = nowCost;\n            ans = temp;\n        }\n        temp.pop_back();\n        return;\n    }\n    temp.push_back(v);\n    for(int i = 0; i &lt; pre[v].size(); i++) \n        DFS(pre[v][i]);\n    temp.pop_back();\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; ed;\n    int u, v, dist, c;\n    fill(G[0], G[0] + MAXN * MAXN, INF);\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; dist &gt;&gt; c;\n        G[u][v] = G[v][u] = dist;\n        cost[u][v] = cost[v][u] = c;\n    }\n    Dijkstra(S);\n    DFS(ed);\n    for(int i = ans.size() - 1; i &gt;= 0; i--) \n        printf(\"%d \", ans[i]);\n    printf(\"%d %d\\n\", d[ed], minCost);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1072_Gas%20Station/","title":"PAT A1072 Gas Station","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6ce8\u610f\u200b\u9996\u5148\u200b\u52a0\u6cb9\u7ad9\u200b\u5fc5\u987b\u200b\u6ee1\u8db3\u200b\u5230\u8fbe\u200b\u6240\u6709\u200b\u623f\u5c4b\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e0d\u200b\u8d85\u8fc7\u200bDs\uff0c\u200b\u5728\u200b\u6b64\u57fa\u7840\u200b\u4e0a\u200b\uff0c\u200b\u8981\u200b\u4f7f\u200b\u6700\u8fd1\u200b\u7684\u200b\u8ddd\u79bb\u200b\u6700\u5927\u200b\u3002</p> <p>\u200b\u5f53\u200b\u51fa\u73b0\u200b\u591a\u4e2a\u200b\u6700\u8fd1\u200b\u8ddd\u79bb\u200b\u6700\u5927\u200b\u7684\u200b\u89e3\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9009\u62e9\u200b\u5e73\u5747\u200b\u8ddd\u79bb\u200b\u6700\u5c0f\u200b\u7684\u200b\u89e3\u200b\uff0c\u200b\u4f18\u5148\u9009\u62e9\u200b\u7d22\u5f15\u200b\u66f4\u200b\u5c0f\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002\u200b\u4f7f\u7528\u200bM\u200b\u6b21\u200bDijkstra\u200b\u7b97\u6cd5\u200b\u5c06\u200bM\u200b\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\u4f4d\u7f6e\u200b\u5168\u90e8\u200b\u904d\u5386\u200b\u4e00\u904d\u200b\u53ef\u200b\u5f97\u5230\u200b\u7b54\u6848\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nconst int MAXN = 1015;\nconst int INF = 1e9;\n\nint N, M, K, Ds;\nint G[MAXN][MAXN], d[MAXN];\nbool visit[MAXN];\nint ansGas = -1;\ndouble ansDist = -1, ansAvg = INF;\n\nint transform(string s) {\n    if(s[0] != 'G') return stoi(s);\n    return stoi(s.substr(1)) + N;\n}\n\nvoid Dijkstra(int s) {\n    fill(d, d + MAXN, INF);\n    fill(visit, visit + MAXN, false);\n    d[s] = 0;\n    for(int i = 0; i &lt; N + M; i++) {\n        int u = -1, MIN = INF;\n        for(int j = 1; j &lt;= N + M; j++)\n            if(!visit[j] &amp;&amp; d[j] &lt; MIN) {\n                u = j;\n                MIN = d[j];\n            }\n        if(u == -1) return;\n        visit[u] = true;\n        for(int v = 1; v &lt;= N + M; v++)\n            if(!visit[v] &amp;&amp; d[u] + G[u][v] &lt; d[v]) \n                d[v] = d[u] + G[u][v];\n    }\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Ds;\n    string p1, p2;\n    int id1, id2, dist;\n    fill(G[0], G[0] + MAXN * MAXN, INF);\n    for(int i = 0; i &lt; K; i++) {\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; dist;\n        id1 = transform(p1);\n        id2 = transform(p2);\n        G[id1][id2] = G[id2][id1] = dist;\n    }\n    double avg, minDist;\n    for(int i = N + 1; i &lt;= N + M; i++) {\n        Dijkstra(i);\n        minDist = INF, avg = 0;\n        for(int j = 1; j &lt;= N; j++) {\n            if(d[j] &gt; Ds) {\n                minDist = -1;\n                break;\n            }\n            if(d[j] &lt; minDist) minDist = d[j];\n            avg += d[j];\n        }    \n        avg /= N;\n        if(minDist == -1) continue;\n        if(minDist &gt; ansDist) {\n            ansDist = minDist;\n            ansGas = i;\n            ansAvg = avg;\n        } else if(minDist == ansDist &amp;&amp; avg &lt; ansAvg) {\n            ansGas = i;\n            ansAvg = avg;\n        }\n    }\n    if(ansGas == -1) cout &lt;&lt; \"No Solution\" &lt;&lt; endl;\n    else {\n        cout &lt;&lt; \"G\" &lt;&lt; ansGas - N &lt;&lt; endl;\n        printf(\"%.1f %.1f\\n\", ansDist, ansAvg);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1087_All%20Roads%20Lead%20to%20Rome/","title":"PAT A1087 All Roads Lead to Rome","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u53ef\u200b\u91c7\u7528\u200bDijkstra\u200b\u6216\u200bDijkstra + DFS\u200b\u7684\u200b\u505a\u6cd5\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200bDijkstra\u200b\u65f6\u200b\u6ce8\u610f\u200b\u4f18\u5148\u200b\u5904\u7406\u200b\u6700\u77ed\u200b\u8def\u5f84\u200b\uff0c\u200b\u5176\u6b21\u200b\u662f\u200b\u5e78\u798f\u200b\u503c\u200b\uff0c\u200b\u6700\u540e\u200b\u662f\u200b\u5e73\u5747\u200b\u5e78\u798f\u200b\u503c\u200b\u3002</p> <p>\u200b\u6253\u5370\u200b\u8def\u5f84\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e00\u7ef4\u200bpre\u200b\u6570\u7ec4\u200b\u9012\u5f52\u200b\u5f97\u5230\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstdio&gt;\n#include&lt;map&gt;\n#include&lt;string&gt;\nusing namespace std;\nconst int MAXN = 205;\nconst int INF = 1E9;\n\nint G[MAXN][MAXN], weight[MAXN], d[MAXN];\nint happy[MAXN], pt[MAXN], pre[MAXN], num[MAXN];\nbool visit[MAXN];\nmap&lt;int, string&gt; Int2Str;\nmap&lt;string, int&gt; Str2Int;\nint N, K;\n\nvoid Dijkstra(int s) {\n    fill(d, d + MAXN, INF);\n    d[s] = 0;\n    happy[s] = weight[s];\n    num[s] = 1;\n    for(int i = 0; i &lt; N; i++) {\n        int u = -1, MIN = INF;\n        for(int j = 0; j &lt; N; j++) \n            if(!visit[j] &amp;&amp; d[j] &lt; MIN) {\n                u = j;\n                MIN = d[j];\n            }\n        if(u == -1) return;\n        visit[u] = true;\n        for(int v = 0; v &lt; N; v++) \n            if(!visit[v] &amp;&amp; d[u] + G[u][v] &lt; d[v]) {\n                d[v] = d[u] + G[u][v];\n                happy[v] = happy[u] + weight[v];\n                num[v] = num[u];\n                pt[v] = pt[u] + 1;\n                pre[v] = u;\n            } else if(!visit[v] &amp;&amp; d[u] + G[u][v] == d[v]) {\n                num[v] += num[u];\n                if(happy[u] + weight[v] &gt; happy[v]) {\n                    happy[v] = happy[u] + weight[v];\n                    pt[v] = pt[u] + 1;\n                    pre[v] = u;\n                } else if(happy[u] + weight[v] == happy[v]) {\n                    double uAvg = 1.0 * (happy[u] + weight[v]) / (pt[u] + 1);\n                    double vAvg = 1.0 * happy[v] / pt[v];\n                    if(uAvg &gt; vAvg) {\n                        pt[v] = pt[u] + 1;\n                        pre[v] = u;\n                    }\n                }\n            }\n    }\n}\n\nvoid printPath(int v) {\n    if(v == 0) {\n        cout &lt;&lt; Int2Str[v];\n        return;\n    }\n    printPath(pre[v]);\n    cout &lt;&lt; \"-&gt;\" &lt;&lt; Int2Str[v];\n}\n\nint main() {\n    string city1, city2;\n    cin &gt;&gt; N &gt;&gt; K &gt;&gt; city1;\n    Str2Int[city1] = 0;\n    Int2Str[0] = city1;\n    for(int i = 1; i &lt;= N - 1; i++) {\n        cin &gt;&gt; city1 &gt;&gt; weight[i];\n        Int2Str[i] = city1;\n        Str2Int[city1] = i;\n    }\n    int w, id1, id2;\n    fill(G[0], G[0] + MAXN * MAXN, INF);\n    for(int i = 0; i &lt; K; i++) {\n        cin &gt;&gt; city1 &gt;&gt; city2 &gt;&gt; w;\n        id1 = Str2Int[city1];\n        id2 = Str2Int[city2];\n        G[id1][id2] = G[id2][id1] = w;\n    }\n    Dijkstra(0);\n    int id_rom = Str2Int[\"ROM\"];\n    printf(\"%d %d %d %d\\n\", num[id_rom], d[id_rom], happy[id_rom], happy[id_rom] / pt[id_rom]);\n    printPath(id_rom);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E5%A0%86/PAT%20A1098_Insertion%20or%20Heap%20Sort/","title":"PAT A1098 Insertion or Heap Sort","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u8003\u5bdf\u200b\u5806\u6392\u5e8f\u200b\u7684\u200b\u5177\u4f53\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u6ce8\u610f\u200b\u9898\u76ee\u200b\u7ed9\u51fa\u200b\u521d\u59cb\u200b\u5e8f\u5217\u200b\u4e0d\u200b\u5305\u542b\u200b\u5728\u200b\u4e2d\u95f4\u200b\u5e8f\u5217\u200b\u91cc\u200b\u3002\u200b\u5806\u6392\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u82e5\u200b\u8981\u200b\u8fdb\u884c\u200b\u9012\u589e\u200b\u6392\u5e8f\u200b\uff0c\u200b\u9996\u5148\u200b\u5e94\u8be5\u200b\u4ece\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u975e\u53f6\u200b\u7ed3\u70b9\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b\u952e\u503c\u200b\u66f4\u5927\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u8fdb\u884c\u200b\u4e92\u6362\u200b\u8c03\u6574\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u5efa\u7acb\u200b\u5927\u6839\u5806\u200b\u3002\u200b\u5efa\u5806\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u5c06\u200b\u5806\u200b\u9876\u200b\u5143\u7d20\u200b\u653e\u5230\u200b\u5806\u200b\u7684\u200b\u672b\u5c3e\u200b\uff0c\u200b\u5c06\u200b\u5806\u200b\u5927\u5c0f\u200b\u51cf\u4e00\u200b\uff0c\u200b\u91cd\u590d\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u76f4\u5230\u200b\u5806\u200b\u7684\u200b\u5927\u5c0f\u200b\u4e3a\u200b1\uff0c\u200b\u6392\u5e8f\u200b\u5b8c\u6210\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n\nconst int maxn = 105;\n\nint origin[maxn];\nint temp[maxn];\nint intermediate[maxn];\nint n;\n\nvoid printArray(int a[], int size) {\n    for(int i = 1; i &lt;= size; i++) {\n        printf(\"%d\", a[i]);\n        if(i &lt; size) printf(\" \");\n    }\n}\n\nbool isArrEqual(int a[], int b[], int size) {\n    for(int i = 1; i &lt;= size; i++)\n        if(a[i] != b[i]) return false;\n    return true;\n}\n\nbool isInsert() {\n    bool flag = false;\n    for(int i = 2; i &lt;= n; i++) {\n        if(i != 2 &amp;&amp; isArrEqual(temp, intermediate, n)) \n            flag = true;\n        sort(temp + 1, temp + i + 1);\n        if(flag) return true;\n    }\n    return false;\n}\n\nvoid downAdjust(int low, int high) {\n    int i = low, j = 2 * i;\n    while(j &lt;= high) {\n        if(j + 1 &lt;= high &amp;&amp; temp[j + 1] &gt; temp[j])\n            j = j + 1;\n        if(temp[j] &gt; temp[i]) {\n            swap(temp[i], temp[j]);\n            i = j;\n            j = 2 * i;\n        } else  {\n            break;\n        }\n    }\n}\n\nvoid HeapSort() {\n    for(int i = 1; i &lt;= n; i++)\n        temp[i] = origin[i];\n    for(int i = n / 2; i &gt;= 1; i--)\n        downAdjust(i, n);\n    bool flag = false;\n    for(int i = n; i &gt; 1; i--) {\n        if(i != n &amp;&amp; isArrEqual(temp, intermediate, n))\n            flag = true;\n        swap(temp[i], temp[1]);\n        downAdjust(1, i - 1);\n        if(flag) return;\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;origin[i]);\n        temp[i] = origin[i];\n    }\n    for(int i = 1; i &lt;= n; i++)\n        scanf(\"%d\", &amp;intermediate[i]);\n    if(isInsert()) {\n        printf(\"Insertion Sort\\n\");\n        printArray(temp, n);\n    } else {\n        printf(\"Heap Sort\\n\");\n        HeapSort();\n        printArray(temp, n);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/PAT%20A1005_Spell%20It%20Right/","title":"PAT A1005 Spell It Right","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u200b\u628a\u200b\u8f93\u5165\u200b\u5f53\u6210\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6c42\u200b\u51fa\u200b\u6bcf\u4f4d\u200b\u548c\u200b sum \u200b\u540e\u200b\u5c06\u200b sum \u200b\u8f6c\u5316\u6210\u200b\u5b57\u7b26\u4e32\u200b\u8f93\u51fa\u200b\u5355\u8bcd\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstring s;\nint sum;\n\nvoid numToWord(char ch) {\n    if(ch == '0') cout &lt;&lt; \"zero\";\n    else if(ch == '1') cout &lt;&lt; \"one\";\n    else if(ch == '2') cout &lt;&lt; \"two\";\n    else if(ch == '3') cout &lt;&lt; \"three\";\n    else if(ch == '4') cout &lt;&lt; \"four\";\n    else if(ch == '5') cout &lt;&lt; \"five\";\n    else if(ch == '6') cout &lt;&lt; \"six\";\n    else if(ch == '7') cout &lt;&lt; \"seven\";\n    else if(ch == '8') cout &lt;&lt; \"eight\";\n    else if(ch == '9') cout &lt;&lt; \"nine\";\n} \n\nint main() {\n    cin &gt;&gt; s;\n    for(auto ch : s) sum += (ch - '0');\n    s = to_string(sum);\n    for(int i = 0; i &lt; s.size(); i++) {\n        numToWord(s[i]);\n        if(i &lt; s.size() - 1) cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/PAT%20A1060_Are%20They%20Equal/","title":"PAT A1060 Are They Equal","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6ce8\u610f\u200b\u5904\u7406\u200b\u524d\u5bfc\u200b\u96f6\u200b\u4ee5\u53ca\u200b\u5c0f\u6570\u70b9\u200b\u6bd4\u5982\u200b000100.00123\u200b\u548c\u200b000.123\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u65e0\u200b\u5c0f\u6570\u70b9\u200b\u7684\u200b000123456\u200b\u7b49\u200b <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nint n;\n\nstring normalize(string s, int &amp;e) {\n    while(s.length() &gt; 0 &amp;&amp; s[0] == '0')\n        s.erase(s.begin());\n    if(s[0] == '.') {\n        s.erase(s.begin());\n        while(s.length() &gt; 0 &amp;&amp; s[0] == '0') {\n            s.erase(s.begin());\n            e--;\n        }\n    } \n    else {\n        int k = 0; \n        while(k &lt; s.length() &amp;&amp; s[k] != '.') {\n            k++;\n            e++;\n        }\n        if(k &lt; s.length()) {\n            s.erase(s.begin() + k);\n        }\n    }\n    if(s.length() == 0) {\n        e = 0;\n    }\n    int num = 0, idx = 0;\n    string res;\n    while(num &lt; n) {\n        if(idx &lt; s.length()) {\n            res += s[idx];\n            ++idx;\n        } else {\n            res += \"0\";\n        }\n        num++;\n    }\n    return res;\n}\n\nint main() {\n    string s1, s2;\n    cin &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;\n    int e1 = 0, e2 = 0;\n    s1 = normalize(s1, e1);\n    s2 = normalize(s2, e2);\n    if(s1 == s2 &amp;&amp; e1 == e2) {\n        cout &lt;&lt; \"YES 0.\" &lt;&lt; s1 &lt;&lt; \"*10^\" &lt;&lt; e1 &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"NO 0.\" &lt;&lt; s1 &lt;&lt; \"*10^\" &lt;&lt; e1 &lt;&lt; \" 0.\" &lt;&lt; s2 &lt;&lt; \"*10^\" &lt;&lt; e2 &lt;&lt; endl;        \n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E5%B9%B6%E6%9F%A5%E9%9B%86/PAT%20A1107_Social%20Clusters/","title":"PAT A1107 Social Clusters","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b\u6700\u5148\u200b\u559c\u6b22\u200b\u67d0\u4e2a\u200b\u7231\u597d\u200b\u7684\u200b\u4eba\u200b\u4f5c\u4e3a\u200b\u6839\u200b\u8282\u70b9\u200b\uff0c\u200b\u4f7f\u7528\u200b\u5e76\u200b\u67e5\u96c6\u200b\u8fdb\u884c\u200b\u89e3\u9898\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\n#include&lt;functional&gt;\nusing namespace std;\n\nconst int maxn = 1005;\n\nint hobby[maxn];\nint father[maxn];\nint res[maxn];\n\nint n;\n\nint findFather(int x) {\n    int temp = x;\n    while(father[x] != x) {\n        x = father[x];\n    }\n    int a;\n    while(father[temp] != temp) {\n        a = temp;\n        temp = father[temp];\n        father[a] = x;\n    }\n    return x;\n}\n\nvoid Union(int a, int b) {\n    int fa = findFather(a);\n    int fb = findFather(b);\n    if(fa != fb) {\n        father[fa] = fb;\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt;= n; i++)\n        father[i] = i;\n    int num, temp;\n    for(int i = 1; i &lt;= n; i++) {\n        scanf(\"%d:\", &amp;num);\n        for(int j = 0; j &lt; num; j++) {\n            scanf(\"%d\", &amp;temp);\n            if(hobby[temp] == 0) {\n                hobby[temp] = i;\n            }\n            Union(i, findFather(hobby[temp]));\n        }\n    }\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i++) \n        res[findFather(i)]++;\n    for(int i = 1; i &lt;= n; i++) \n        if(res[i] != 0) ans++;\n    printf(\"%d\\n\", ans);\n    sort(res + 1, res + 1 + n, greater&lt;int&gt;());\n    for(int i = 1; i &lt;= ans; i++) {\n        printf(\"%d\", res[i]);\n        if(i &lt; ans) printf(\" \");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1012_The%20Best%20Rank/","title":"PAT A1012 The Best Rank","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u636e\u200b\u56db\u79cd\u200b\u6210\u7ee9\u200b\u8fdb\u884c\u200b\u56db\u6b21\u200b\u6392\u5e8f\u200b\uff0c\u200b\u4f7f\u7528\u200b Rank \u200b\u6570\u7ec4\u200b\u4fdd\u5b58\u200b\u8fd9\u200b\u56db\u79cd\u200b\u6392\u5e8f\u200b\u4e2d\u200b\u6700\u5c0f\u200b\u7684\u200b\u6570\u5b57\u200b\u4f5c\u4e3a\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u3002\u200b\u6ce8\u610f\u200b\u8be5\u200b\u76f8\u540c\u200b\u5206\u6570\u200b\u65f6\u200b\u6392\u540d\u200b\u76f8\u540c\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 2005;\n\ntypedef struct {\n    int id;\n    int grade[4];\n} Student;\n\nStudent stu[MAXN];\nint Rank[1000000][4], now;\nchar mp[4] = {'A', 'C', 'M', 'E'};\n\nint N, M;\n\nbool cmp(Student a, Student b) {\n    return a.grade[now] &gt; b.grade[now];\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; stu[i].id &gt;&gt; stu[i].grade[1] &gt;&gt; stu[i].grade[2] &gt;&gt; stu[i].grade[3];\n        stu[i].grade[0] = stu[i].grade[1] + stu[i].grade[2] +stu[i].grade[3];\n    }\n    for(now = 0; now &lt; 4; now++) {\n        sort(stu, stu + N, cmp);\n        Rank[stu[0].id][now] = 1;\n        for(int i = 1; i &lt; N; i++) {\n            if(stu[i].grade[now] == stu[i - 1].grade[now]) {\n                Rank[stu[i].id][now] = Rank[stu[i - 1].id][now];\n            } else {\n                Rank[stu[i].id][now] = i + 1;\n            }\n        }\n    }\n    int q;\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; q;\n        if(Rank[q][0] == 0) {\n            cout &lt;&lt; \"N/A\\n\";\n        } else {\n            int k = 0;\n            for(int j = 0; j &lt; 4; j++) {\n                if(Rank[q][j] &lt; Rank[q][k]) {\n                    k = j;\n                }\n            }\n            cout &lt;&lt; Rank[q][k] &lt;&lt; \" \" &lt;&lt; mp[k] &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1016_Phone%20Bills/","title":"PAT A1016 Phone Bills","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b\u8f93\u5165\u200b\u7684\u200b\u4fe1\u606f\u200b\u5c01\u88c5\u200b\u6210\u200b\u7ed3\u6784\u200b\uff0c\u200b\u6839\u636e\u200b\u65f6\u95f4\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002\u200b\u9488\u5bf9\u200b\u6bcf\u4e2a\u200b\u7528\u6237\u200b\u5148\u200b\u5bfb\u627e\u200b\u662f\u5426\u200b\u5b58\u5728\u200b on \u200b\u5728\u200b\u524d\u200b\uff0coff \u200b\u5728\u200b\u540e\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5b58\u5728\u200b\u5219\u200b\u4e00\u5b9a\u200b\u9700\u8981\u200b\u8f93\u51fa\u200b\u3002 \u200b\u627e\u5230\u200b\u4e4b\u540e\u200b\u5bfb\u627e\u200b\u6240\u6709\u200b\u6709\u6548\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u5206\u949f\u200b\u4e3a\u200b\u5355\u4f4d\u200b\u8fdb\u884c\u200b money \u200b\u548c\u200b time \u200b\u7684\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6ce8\u610f\u200b\u9898\u76ee\u200b\u7ed9\u51fa\u200b\u7684\u200b\u662f\u200b\u7f8e\u5206\u200b/\u200b\u6bcf\u5206\u949f\u200b\uff0c\u200b\u6700\u540e\u200b\u8ba1\u7b97\u200b\u662f\u200b\u7528\u200b\u7f8e\u5143\u200b\u505a\u200b\u5355\u4f4d\u200b\uff0c\u200b\u8fdb\u5236\u200b\u4e3a\u200b 100\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\ntypedef struct {\n    string name;\n    int dd, hh, mm, month;\n    bool isOnline;\n} Record;\n\nRecord rec[MAXN], temp;\n\nint toll[30], N;\n\nbool cmp(Record a, Record b) {\n    if(a.name != b.name) return a.name &lt; b.name;\n    else if(a.month != b.month) return a.month &lt; b.month;\n    else if(a.dd != b.dd) return a.dd &lt; b.dd;\n    else if(a.hh != b.hh) return a.hh &lt; b.hh;\n    else return a.mm &lt; b.mm;\n}\n\nvoid proc_valid(int on, int off, int&amp; time, int&amp; money) {\n    temp = rec[on];\n    while(temp.dd &lt; rec[off].dd || temp.hh &lt; rec[off].hh || temp.mm &lt; rec[off].mm) {\n        time++;\n        money += toll[temp.hh];\n        temp.mm++;\n        if(temp.mm &gt;= 60) {\n            temp.mm = 0;\n            temp.hh++;\n        }\n        if(temp.hh &gt;= 24) {\n            temp.hh = 0;\n            temp.dd++;\n        }\n    }\n}\n\nint main() {\n    for(int i = 0; i &lt; 24; i++)\n        cin &gt;&gt; toll[i];\n    cin &gt;&gt; N;\n    string status;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; rec[i].name;\n        scanf(\"%d:%d:%d:%d\", &amp;rec[i].month, &amp;rec[i].dd, &amp;rec[i].hh, &amp;rec[i].mm);\n        cin &gt;&gt; status;\n        if(status == \"on-line\") \n            rec[i].isOnline = true;\n        else \n            rec[i].isOnline = false;\n    }\n    sort(rec, rec + N, cmp);\n    // next \u200b\u662f\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u7528\u6237\u200b\n    int on = 0, off, next, needPrint;\n    while(on &lt; N) {\n        // needPrint \u200b\u4e3a\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u8f93\u51fa\u200b\n        needPrint = 0;\n        next = on;\n        while(next &lt; N &amp;&amp; rec[next].name == rec[on].name) {\n            if(needPrint == 0 &amp;&amp; rec[next].isOnline) {\n                needPrint = 1;\n            } else if(needPrint == 1 &amp;&amp; !rec[next].isOnline) {\n                needPrint = 2;\n            }\n            next++;\n        }\n        if(needPrint != 2) {\n            on = next;\n            continue;\n        }\n        cout &lt;&lt; rec[on].name &lt;&lt; \" \";\n        printf(\"%02d\\n\", rec[on].month);\n        // \u200b\u8f93\u51fa\u200b\u6240\u6709\u200b\u914d\u5bf9\u200b\n        int totalMoney = 0;\n        while(on &lt; next) {\n            while(on &lt; next - 1 &amp;&amp; !(rec[on].isOnline &amp;&amp; !rec[on + 1].isOnline)) {\n                on++;\n            }\n            off = on + 1;\n            if(off == next) {\n                on = next;\n                break;\n            }\n            printf(\"%02d:%02d:%02d \", rec[on].dd, rec[on].hh, rec[on].mm);\n            printf(\"%02d:%02d:%02d \", rec[off].dd, rec[off].hh, rec[off].mm);\n            int money = 0, time = 0;\n            // \u200b\u6ce8\u610f\u200b\u5f97\u5230\u200b\u7684\u200b money \u200b\u4e3a\u200b cent \u200b\u800c\u200b\u975e\u200b dollar\n            proc_valid(on, off, time, money);\n            totalMoney += money;\n            printf(\"%d $%.2f\\n\", time, money / 100.0);\n            on = off + 1;\n        }\n        printf(\"Total amount: $%.2f\\n\", totalMoney / 100.0);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1025_PAT%20Ranking/","title":"PAT A1025 PAT Ranking","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6392\u5e8f\u200b\u6807\u51c6\u200b\u4e3a\u200b\uff0c\u200b\u5206\u6570\u200b\u4e0d\u200b\u540c\u65f6\u200b\uff0c\u200b\u6309\u200b\u5206\u6570\u200b\u4ece\u5927\u5230\u200b\u5c0f\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002\u200b\u6ce8\u610f\u200b\u5168\u5c40\u200b\u6392\u5e8f\u200b\u548c\u200b\u5c40\u90e8\u200b\u6392\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u5206\u6570\u200b\u76f8\u540c\u200b\u6392\u540d\u200b\u4e5f\u200b\u76f8\u540c\u200b\uff0c\u200b\u4f46\u200b\u6309\u7167\u200b\u51c6\u8003\u8bc1\u200b\u4ece\u5c0f\u5230\u5927\u200b\u8fdb\u884c\u200b\u8f93\u51fa\u200b\u3002</p> <pre><code>#include&lt;cstring&gt;\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\ntypedef struct Student {\n    char id[15];\n    int score;\n    int location_num;\n    int local_rank;\n} Student;\n\nStudent stu[30010];\n\nbool cmp(Student a, Student b) {\n     if(a.score != b.score) {\n         return a.score &gt; b.score;\n     }\n    return strcmp(a.id, b.id) &lt; 0;\n}\n\nint main() {\n    int n, num = 0;\n    scanf(\"%d\", &amp;n);\n    int k;\n    for(int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;k);\n        for(int j = 0; j &lt; k; j++) {\n            scanf(\"%s %d\", stu[num].id, &amp;stu[num].score);\n            stu[num].location_num = i;\n            num++;\n        }\n        sort(stu + num - k, stu + num, cmp);\n        stu[num-k].local_rank = 1;\n        for(int i = 1; i &lt; k; i++) {\n            if(stu[num-k+i].score == stu[num-k+i-1].score) {\n                stu[num-k+i].local_rank = stu[num-k+i-1].local_rank;\n            } else {\n                stu[num-k+i].local_rank = i + 1;\n            }\n        }\n    }\n    printf(\"%d\\n\", num);\n    sort(stu, stu + num, cmp);\n    int global_rank = 1;\n    printf(\"%s %d %d %d\\n\", stu[0].id, global_rank, stu[0].location_num, stu[0].local_rank);\n    for(int i = 1; i &lt; num; i++) {\n        if(stu[i].score != stu[i-1].score) {\n            global_rank = i + 1;\n        }\n        printf(\"%s %d %d %d\\n\", stu[i].id, global_rank, stu[i].location_num, stu[i].local_rank);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1028_List%20Sorting/","title":"PAT A1028 List Sorting","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u636e\u200b\u8f93\u51fa\u200b\u7684\u200b\u4e09\u79cd\u200b C \u200b\u7684\u200b\u53d6\u503c\u200b\u7f16\u5199\u200b\u4e09\u4e2a\u200b\u6392\u5e8f\u200b bool \u200b\u51fd\u6570\u200b\u5373\u53ef\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 100005;\n\ntypedef struct {\n    int id, score;\n    string name;\n} Student;\n\nStudent stu[MAXN];\n\nint N, C;\n\nbool cmp1(Student a, Student b) {\n    return a.id &lt; b.id;\n}\n\nbool cmp2(Student a, Student b) {\n    if(a.name != b.name) return a.name &lt; b.name;\n    return a.id &lt; b.id;\n}\n\nbool cmp3(Student a, Student b) {\n    if(a.score != b.score) return a.score &lt; b.score;\n    return a.id &lt; b.id;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; C;\n    for(int i = 0; i &lt; N; i++) \n        cin &gt;&gt; stu[i].id &gt;&gt; stu[i].name &gt;&gt; stu[i].score;\n    if(C == 1) sort(stu, stu + N, cmp1);\n    else if(C == 2) sort(stu, stu + N, cmp2);\n    else if(C == 3) sort(stu, stu + N, cmp3);\n    for(int i = 0; i &lt; N; i++) {\n        printf(\"%06d \", stu[i].id);\n        cout &lt;&lt; stu[i].name &lt;&lt; \" \" &lt;&lt; stu[i].score &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1055_The%20World%27s%20Richest/","title":"PAT A1055 The World's Richest","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u9700\u8981\u200b\u9884\u5904\u7406\u200b valid \u200b\u7ed3\u6784\u200b\u4f53\u200b\u6570\u7ec4\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6bcf\u6b21\u200b\u67e5\u8be2\u200b\u7684\u200b\u4eba\u6570\u200b M &lt;= 100\uff0c\u200b\u8ba9\u200b\u6bcf\u4e2a\u200b\u5e74\u9f84\u200b\u7684\u200b\u524d\u200b 100 \u200b\u4eba\u200b\u8fdb\u5165\u200b valid \u200b\u6570\u7ec4\u200b\u5373\u53ef\u200b\uff0c\u200b\u5426\u5219\u200b\u672c\u9898\u200b\u5728\u200b\u6d4b\u8bd5\u70b9\u200b 2 \u200b\u4f1a\u200b\u8d85\u65f6\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nconst int MAXN = 100005;\n\nint N, K;\n\ntypedef struct {\n    string name;\n    int age, worth;\n} Info;\n\nInfo a[MAXN], valid[MAXN];\nint Age[MAXN];\n\nbool cmp(Info i1, Info i2) {\n    if(i1.worth != i2.worth) return i1.worth &gt; i2.worth;\n    else if(i1.age != i2.age) return i1.age &lt; i2.age;\n    return i1.name &lt; i2.name;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; a[i].name &gt;&gt; a[i].age &gt;&gt; a[i].worth;\n    }\n    sort(a, a + N, cmp);\n    int validNum = 0;\n    for(int i = 0; i &lt; N; i++) {\n        if(Age[a[i].age] &lt; 100) {\n            Age[a[i].age]++;\n            valid[validNum++] = a[i];\n        }\n    }\n    int M, AgeL, AgeR;\n    for(int q = 1; q &lt;= K; q++) {\n        cin &gt;&gt; M &gt;&gt; AgeL &gt;&gt; AgeR;\n        cout &lt;&lt; \"Case #\" &lt;&lt; q &lt;&lt; \":\\n\";\n        int printNum = 0;\n        for(int j = 0; j &lt; validNum &amp;&amp; printNum &lt; M; j++) {\n            if(valid[j].age &gt;= AgeL &amp;&amp; valid[j].age &lt;= AgeR) {\n                cout &lt;&lt; valid[j].name &lt;&lt; \" \" &lt;&lt; valid[j].age &lt;&lt; \" \" &lt;&lt; valid[j].worth &lt;&lt; endl;\n                printNum++;\n            }\n        }\n        if(printNum == 0) cout &lt;&lt; \"None\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1062_Talent%20and%20Virtue/","title":"PAT A1062 Talent and Virtue","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u8f93\u5165\u200b\u53ef\u200b\u5206\u4e3a\u200b 1. \u200b\u5fb7\u624d\u200b &gt;= H  2. \u200b\u5fb7\u200b &gt;= H\uff0c\u200b\u624d\u200b &lt; H  3. \u200b\u5fb7\u200b &gt;= \u200b\u624d\u200b  4. \u200b\u5fb7\u624d\u200b &gt;= L  5. \u200b\u5fb7\u200b\u6216\u200b\u624d\u200b &lt; L \u200b\u5171\u200b 5 \u200b\u6863\u200b</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5148\u200b\u6309\u200b\u6863\u6b21\u200b\uff0c\u200b\u5176\u6b21\u200b\u603b\u5206\u200b\uff0c\u200b\u518d\u200b\u6309\u5fb7\u5206\u200b\uff0c\u200b\u6700\u540e\u200b\u6309\u200b id\uff0c\u200b\u4ee5\u6b64\u200b\u4e3a\u200b\u4f9d\u636e\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 100005;\n\ntypedef struct {\n    string id;\n    int vg, tg, sum, flag;\n} Student;\n\nStudent stu[MAXN];\n\nint N, L, H;\n\nbool cmp(Student a, Student b) {\n    if(a.flag != b.flag) return a.flag &lt; b.flag;\n    else if(a.sum != b.sum) return a.sum &gt; b.sum;\n    else if(a.vg != b.vg) return a.vg &gt; b.vg;\n    return a.id &lt; b.id;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; L &gt;&gt; H;\n    int M = N;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; stu[i].id &gt;&gt; stu[i].vg &gt;&gt; stu[i].tg;\n        stu[i].sum = stu[i].vg + stu[i].tg;\n        if(stu[i].vg &lt; L || stu[i].tg &lt; L) {\n            stu[i].flag = 5;\n            M--;\n        } else if(stu[i].vg &gt;= H &amp;&amp; stu[i].tg &gt;= H) {\n            stu[i].flag = 1;\n        } else if(stu[i].vg &gt;= H &amp;&amp; stu[i].tg &lt; H) {\n            stu[i].flag = 2;\n        } else if(stu[i].vg &gt;= stu[i].tg) {\n            stu[i].flag = 3;\n        } else {\n            stu[i].flag = 4;\n        }\n    }\n    sort(stu, stu + N, cmp);\n    cout &lt;&lt; M &lt;&lt; endl;\n    for(int i = 0; i &lt; M; i++) {\n        cout &lt;&lt; stu[i].id &lt;&lt; \" \" &lt;&lt; stu[i].vg &lt;&lt; \" \" &lt;&lt; stu[i].tg &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1075_PAT%20Judge/","title":"PAT A1075 PAT Judge","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u6ce8\u610f\u200b\u4e00\u6761\u200b\u63d0\u4ea4\u200b\u8bb0\u5f55\u200b\u4e2d\u200b\uff0cif \u200b\u548c\u200b else if \u200b\u7684\u200b\u5224\u65ad\u200b\u5bb9\u6613\u200b\u6df7\u6dc6\u200b\uff0c\u200b\u4f7f\u7528\u200b if \u200b\u66f4\u200b\u65b9\u4fbf\u200b\u8fdb\u884c\u200b\u5404\u79cd\u200b\u6761\u4ef6\u200b\u7684\u200b\u5224\u65ad\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u4f7f\u7528\u200b flag \u200b\u53ef\u4ee5\u200b\u6807\u5fd7\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u8f93\u51fa\u200b\uff0c\u200b\u800c\u200b\u975e\u200b\u901a\u8fc7\u200b\u5355\u72ec\u200b\u5224\u65ad\u200b score \u200b\u662f\u5426\u200b\u5168\u4e3a\u200b 0 \u200b\u6216\u200b -1\u3002\u200b\u56e0\u4e3a\u200b\u672c\u9898\u200b\u4e2d\u200b\u7b2c\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u5982\u679c\u200b\u7f16\u8bd1\u200b\u672a\u200b\u901a\u8fc7\u200b\uff0c\u200b\u9700\u8981\u200b\u628a\u200b\u5206\u6570\u200b\u8d4b\u503c\u200b\u4e3a\u200b 0\u3002\u200b\u6545\u200b\u53ea\u6709\u200b\u5f53\u200b\u63d0\u4ea4\u200b\u8bb0\u5f55\u200b\u4e2d\u200b\u7684\u200b\u5f97\u5206\u200b &gt;= 0 \u200b\u65f6\u200b\uff0c\u200b\u624d\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b flag == true\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u63d0\u4ea4\u200b\u6ee1\u5206\u200b\u540e\u200b\u4ecd\u4f1a\u200b\u6709\u200b\u4f4e\u5206\u200b\u63d0\u4ea4\u200b\u51fa\u73b0\u200b\uff0c\u200b\u5728\u200b\u5904\u7406\u200b\u8f93\u5165\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b\u6700\u9ad8\u200b\u5f97\u200b\u5206\u4e3a\u200b\u672c\u9898\u200b\u6700\u7ec8\u200b\u5f97\u5206\u200b\uff0c\u200b\u6700\u540e\u200b\u5355\u72ec\u200b\u7edf\u8ba1\u200b\u603b\u5206\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nconst int MAXN = 10005;\n\ntypedef struct {\n    int id, totalScore, solve;\n    int score[6];\n    bool flag;\n} Student;\n\nStudent stu[MAXN];\n\nint N, K, M, val[6];\n\nvoid init() {\n    for(int i = 1; i &lt;= N; i++) {\n        stu[i].id = i;\n        stu[i].totalScore = 0;\n        stu[i].solve = 0;\n        stu[i].flag = false;\n        fill(stu[i].score, stu[i].score + 6, -1);\n    }\n}\n\nbool cmp(Student a, Student b) {\n    if(a.totalScore != b.totalScore) return a.totalScore &gt; b.totalScore;\n    else if(a.solve != b.solve) return a.solve &gt; b.solve;\n    return a.id &lt; b.id;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K &gt;&gt; M;\n    init();\n    for(int i = 1; i &lt;= K; i++)\n        cin &gt;&gt; val[i];\n    int id, index, score;\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; id &gt;&gt; index &gt;&gt; score;\n        if(score != -1) {\n            if(score == val[index] &amp;&amp; stu[id].score[index] &lt; val[index]) {\n                stu[id].solve++;\n            }\n            if(score &gt; stu[id].score[index]) {\n                stu[id].score[index] = score;\n            }\n            stu[id].flag = true;\n        } else if(score == -1 &amp;&amp; stu[id].score[index] == -1) {\n            stu[id].score[index] = 0;\n        }\n    }\n    for(int i = 1; i &lt;= N; i++) {\n        for(int j = 1; j &lt;= K; j++) {\n            if(stu[i].score[j] != -1) {\n                stu[i].totalScore += stu[i].score[j];\n            }\n        }\n    }\n    sort(stu + 1, stu + 1 + N, cmp);\n    int rank = 1;\n    for(int i = 1; i &lt;= N &amp;&amp; stu[i].flag; i++) {\n        if(i &gt; 1 &amp;&amp; stu[i].totalScore != stu[i - 1].totalScore) {\n            rank = i;\n        } \n        printf(\"%d %05d %d\", rank, stu[i].id, stu[i].totalScore);\n        for(int j = 1; j &lt;= K; j++) {\n            if(stu[i].score[j] != -1) {\n                cout &lt;&lt; \" \" &lt;&lt; stu[i].score[j];\n            } else {\n                cout &lt;&lt; \" -\";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1080_Graduate%20Admission/","title":"PAT A1080 Graduate Admission","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u9700\u8981\u200b\u5c06\u200b\u5b66\u751f\u200b\u548c\u200b\u5b66\u6821\u200b\u4fe1\u606f\u200b\u5c01\u88c5\u200b\u6210\u200b\u7ed3\u6784\u200b\uff0c\u200b\u5bf9\u200b\u6210\u7ee9\u200b\u6392\u5e8f\u200b\u6210\u200b\u6392\u540d\u200b\u540e\u200b\u904d\u5386\u200b\u6bcf\u4e2a\u200b\u5b66\u751f\u200b\u8fdb\u884c\u200b\u904d\u5386\u200b\uff0c\u200b\u68c0\u67e5\u200b\u5176\u200b\u5fd7\u613f\u200b\u5b66\u6821\u200b\u662f\u5426\u200b\u8fd8\u6709\u200b\u7a7a\u4f59\u200b\u540d\u989d\u200b\u6216\u8005\u200b\u6700\u540e\u200b\u4e00\u540d\u200b\u5f55\u53d6\u200b\u6392\u540d\u200b\u4e0e\u200b\u5f53\u524d\u200b\u5b66\u751f\u200b\u76f8\u540c\u200b\uff0c\u200b\u5219\u200b\u5f55\u53d6\u200b\uff0c\u200b\u5426\u5219\u200b\u843d\u699c\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 40005;\nconst int MAXM = 105;\nconst int MAXK = 10;\n\nint N, M, K;\n\ntypedef struct {\n    int ge, gi, sum, rank, sid;\n    int offer[MAXK];\n} Student;\n\ntypedef struct {\n    int quota, stuNum, lastAdmit;\n    int aid[MAXN];\n} School;\n\nStudent stu[MAXN];\nSchool sch[MAXM];\n\nbool cmpStu(Student a, Student b) {\n    if(a.sum != b.sum) return a.sum &gt; b.sum;\n    else return a.ge &gt; b.ge;\n}\n\nbool cmpID(int a, int b) {\n    return stu[a].sid &lt; stu[b].sid;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; sch[i].quota;\n        sch[i].stuNum = 0;\n        sch[i].lastAdmit = -1;\n    }\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; stu[i].ge &gt;&gt; stu[i].gi;\n        stu[i].sum = stu[i].ge + stu[i].gi;\n        for(int j = 0; j &lt; K; j++) {\n            cin &gt;&gt; stu[i].offer[j];\n        }\n        stu[i].sid = i;\n    }\n    sort(stu, stu + N, cmpStu);\n    for(int i = 0; i &lt; N; i++) {\n        if(i &gt; 0 &amp;&amp; stu[i].sum == stu[i - 1].sum &amp;&amp; stu[i].ge == stu[i - 1].ge) {\n            stu[i].rank = stu[i - 1].rank;\n        } else {\n            stu[i].rank = i;\n        }\n    }\n    for(int i = 0; i &lt; N; i++) {\n        for(int j = 0; j &lt; K; j++) {\n            int offer = stu[i].offer[j];\n            int nowNum = sch[offer].stuNum;\n            int last = sch[offer].lastAdmit;\n            if(nowNum &lt; sch[offer].quota || (last != -1 &amp;&amp; stu[i].rank == stu[last].rank)) {\n                sch[offer].aid[nowNum] = i;\n                sch[offer].lastAdmit = i;\n                sch[offer].stuNum++;\n                break;\n            }\n        }\n    }\n    for(int i = 0; i &lt; M; i++) {\n        if(sch[i].stuNum &gt; 0) {\n            sort(sch[i].aid, sch[i].aid + sch[i].stuNum, cmpID);\n            for(int j = 0; j &lt; sch[i].stuNum; j++) {\n                cout &lt;&lt; stu[sch[i].aid[j]].sid;\n                if(j &lt; sch[i].stuNum - 1) cout &lt;&lt; \" \";\n            }\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1083_List%20Grades/","title":"PAT A1083 List Grades","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u6392\u5e8f\u200b\u9898\u200b\uff0c\u200b\u6ce8\u610f\u200b\u7531\u4e8e\u200b\u5206\u6570\u200b\u4e0a\u9650\u200b\u4e3a\u200b 100\uff0c\u200b\u4e14\u200b\u5206\u6570\u200b\u5747\u200b\u4e0d\u200b\u76f8\u540c\u200b\uff0cMAXN \u200b\u53d6\u200b 110\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 110;\n\nint N, l, r;\n\ntypedef struct {\n    string name, id;\n    int grade;\n} Student;\n\nStudent stu[MAXN];\n\nbool cmp(Student a, Student b) {\n    return a.grade &gt; b.grade;\n}\n\nint main() {\n    cin &gt;&gt; N; \n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; stu[i].name &gt;&gt; stu[i].id &gt;&gt; stu[i].grade;\n    }\n    cin &gt;&gt; l &gt;&gt; r;\n    sort(stu, stu + N, cmp);\n    bool isPrint = false;\n    for(int i = 0; i &lt; N; i++) {\n        if(stu[i].grade &gt;= l &amp;&amp; stu[i].grade &lt;= r) {\n            cout &lt;&lt; stu[i].name &lt;&lt; \" \" &lt;&lt; stu[i].id &lt;&lt; endl;\n            isPrint = true;\n        }\n    }\n    if(!isPrint) cout &lt;&lt; \"NONE\\n\";\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1095_Cars%20on%20Campus/","title":"PAT A1095 Cars on Campus","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u901a\u8fc7\u200b\u628a\u200b\u65f6\u95f4\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u79d2\u200b\u7684\u200b\u5f62\u5f0f\u200b\uff0c\u200b\u5148\u200b\u8bb0\u5f55\u200b\u6240\u6709\u200b\u8f93\u5165\u200b\u7684\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u518d\u200b\u6839\u636e\u200b id \u200b\u4ee5\u53ca\u200b time \u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u540c\u4e00\u4e2a\u200b id \u200b\u7684\u200b\u8bb0\u5f55\u200b\u8fdb\u884c\u200b\u76f8\u90bb\u200b\u7684\u200b in \u200b\u548c\u200b out \u200b\u7684\u200b\u67e5\u627e\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u67e5\u627e\u200b\u7ed3\u679c\u200b\u5b58\u5165\u200b valid \u200b\u6570\u7ec4\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u589e\u52a0\u200b\u8fd9\u200b\u4e00\u5bf9\u200b\u8bb0\u5f55\u200b\u7684\u200b\u505c\u7559\u65f6\u95f4\u200b\u5230\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\uff0c\u200b\u66f4\u65b0\u200b\u6700\u5927\u200b\u505c\u7559\u65f6\u95f4\u200b\u3002\u200b\u5269\u4e0b\u200b\u7684\u200b K \u200b\u6b21\u200b\u67e5\u8be2\u200b\uff0c\u200b\u7528\u200b now \u200b\u5904\u7406\u200b\u81f3\u200b\u5f53\u524d\u200b\u67e5\u8be2\u200b\u65f6\u95f4\u200b\uff0cnumCar \u200b\u4f5c\u4e3a\u200b\u8f66\u8f86\u200b\u8bb0\u5f55\u200b\u6570\u200b\u3002\u200b\u7531\u4e8e\u200b\u6bcf\u6b21\u200b\u67e5\u8be2\u200b\u90fd\u200b\u662f\u200b\u6839\u636e\u200b\u65f6\u95f4\u200b\u8fdb\u884c\u200b\u7684\u200b\uff0c\u200b\u5373\u200b now \u200b\u548c\u200b numCar \u200b\u662f\u200b\u8fde\u7eed\u200b\u53d8\u5316\u200b\u7684\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\n#include&lt;map&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nconst int MAXN = 10005;\nconst int MAXK = 80005;\n\nint N, K;\n\ntypedef struct {\n    string id, status;\n    int time;\n} Record;\n\nRecord all[MAXN], valid[MAXN];\nmap&lt;string, int&gt; parkTime;\n\nint TimeToInt(int hh, int mm, int ss) {\n    return hh * 3600 + mm * 60 + ss;\n}\n\nbool cmpIdTime(Record a, Record b) {\n    if(a.id != b.id) return a.id &lt; b.id;\n    return a.time &lt; b.time;\n}\n\nbool cmpTime(Record a, Record b) {\n    return a.time &lt; b.time;\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K;\n    int hh, mm, ss;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; all[i].id;\n        scanf(\"%d:%d:%d\", &amp;hh, &amp;mm, &amp;ss);\n        cin &gt;&gt; all[i].status;\n        all[i].time = TimeToInt(hh, mm, ss);\n    }\n    sort(all, all + N, cmpIdTime);\n    int maxTime = -1, validNum = 0;\n    for(int i = 0; i &lt; N - 1; i++) {\n        if(all[i].id == all[i + 1].id &amp;&amp;\n           all[i].status == \"in\" &amp;&amp;\n           all[i + 1].status == \"out\") {\n            valid[validNum++] = all[i];\n            valid[validNum++] = all[i + 1];\n            int inTime = all[i + 1].time - all[i].time;\n            if(parkTime.count(all[i].id) == 0) {\n                parkTime[all[i].id] = 0;\n            }\n            parkTime[all[i].id] += inTime;\n            maxTime = max(maxTime, parkTime[all[i].id]);\n       }\n    }\n    sort(valid, valid + validNum, cmpTime);\n    int now = 0, numCar = 0;\n    for(int i = 0; i &lt; K; i++) {\n        scanf(\"%d:%d:%d\", &amp;hh, &amp;mm, &amp;ss);\n        int time = TimeToInt(hh, mm, ss);\n        while(now &lt; validNum &amp;&amp; valid[now].time &lt;= time) {\n            if(valid[now].status == \"in\") numCar++;\n            else numCar--;\n            now++;\n        }\n        cout &lt;&lt; numCar &lt;&lt; endl;\n    }\n    for(auto &amp;pt : parkTime) {\n        if(pt.second == maxTime) \n            cout &lt;&lt; pt.first &lt;&lt; \" \";\n    }\n    printf(\"%02d:%02d:%02d\", maxTime / 3600, maxTime % 3600 / 60, maxTime % 60);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1041_Be%20Unique/","title":"PAT A1041 Be Unique","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u7528\u200b\u6570\u5b57\u200b\u7edf\u8ba1\u200b\u6240\u6709\u200b\u51fa\u73b0\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u6b21\u6570\u200b\uff0c\u200b\u6309\u200b\u8f93\u5165\u200b\u6b21\u5e8f\u200b\u904d\u5386\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5373\u53ef\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int MAXN = 100005;\nconst int MAXNUM = 10005;\n\nint hashTable[MAXNUM], a[MAXN], N;\n\nint main() {\n    cin &gt;&gt; N;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; a[i];\n        hashTable[a[i]]++;\n    }\n    int ans = -1;\n    for(int i = 0; i &lt; N; i++) {\n        if(hashTable[a[i]] == 1) {\n            ans = a[i];\n            break;\n        }\n    }\n    if(ans == -1) {\n        cout &lt;&lt; \"None\";\n    } else {\n        cout &lt;&lt; ans;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1048_Find%20Coins/","title":"PAT A1048 Find Coins","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7531\u4e8e\u200b\u672c\u9898\u200b\u4e2d\u200b M &lt;= 1000\uff0c\u200b\u56e0\u6b64\u200b \u200b\u54c8\u5e0c\u200b\u8868\u200b\u7684\u200b\u5927\u5c0f\u200b\u53ea\u200b\u9700\u8981\u200b\u5927\u4e8e\u200b 1000\uff0c\u200b\u800c\u200b\u975e\u9898\u200b\u4e2d\u200b\u7ed9\u51fa\u200b\u7684\u200b N \u200b\u7684\u200b\u6700\u5927\u503c\u200b 100000\uff0c\u200b\u4e4b\u540e\u200b\u4fbf\u200b\u4e3a\u200b\u7ecf\u5178\u200b\u9898\u200b\u4e24\u6570\u200b\u4e4b\u200b\u548c\u200b\u7684\u200b\u6563\u5217\u200b\u89e3\u6cd5\u200b\u3002\u200b\u6ce8\u610f\u200b\u5230\u200b\u82e5\u200b\u5b58\u5728\u200b\u591a\u200b\u5bf9\u200b\u7b54\u6848\u200b\u5e94\u8be5\u200b\u6309\u200b\u5b57\u5178\u200b\u5e8f\u200b\u7684\u200b\u4f18\u5148\u7ea7\u200b\u8fdb\u884c\u200b\u8f93\u51fa\u200b\uff0c\u200b\u56e0\u6b64\u200b\u9009\u62e9\u200b\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\u800c\u200b\u975e\u200b\u8f93\u5165\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6570\u5b57\u200b\u5f00\u59cb\u200b\u8fdb\u884c\u200b\u904d\u5386\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\nint n, m, hashTable[MAXN];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int num;\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; num;\n        hashTable[num]++;\n    }\n    for(int i = 0; i &lt; MAXN; i++) {\n        if(hashTable[i] &amp;&amp; hashTable[m - i]) {\n            if(i == m - i &amp;&amp; hashTable[i] &lt;= 1)\n                continue;\n            cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; m - i;\n            return 0;\n        }\n    }\n    cout &lt;&lt; \"No Solution\";\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1050_String%20Subtraction/","title":"PAT A1050 String Subtraction","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b s2 \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\u7edf\u8ba1\u200b\u5230\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\uff0c\u200b\u518d\u200b\u9010\u4e2a\u200b\u904d\u5386\u200b s1 \u200b\u4e2d\u200b\u7684\u200b\u5b57\u7b26\u200b\u3002\u200b\u82e5\u200b s1 \u200b\u4e2d\u200b\u5b57\u7b26\u200b\u5728\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u672a\u200b\u51fa\u73b0\u200b\u8fc7\u5219\u200b\u8f93\u51fa\u200b\u3002\u200b\u6ce8\u610f\u200b\u53ef\u89c1\u200b ASCII \u200b\u7801\u200b\u8303\u56f4\u200b\u4e3a\u200b 32 - 126\uff0c\u200b\u6545\u200b\u53ea\u200b\u9700\u200b\u5f00\u8f9f\u200b\u5927\u5c0f\u200b\u4e3a\u200b 128 \u200b\u7684\u200b bool \u200b\u6570\u7ec4\u200b\u4f5c\u4e3a\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5373\u53ef\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstring s1, s2;\nbool hashTable[128];\n\nint main() {\n    getline(cin, s1);\n    getline(cin, s2);\n    for(int i = 0; i &lt; s2.size(); i++) {\n        hashTable[s2[i]] = true;\n    }\n    for(int i = 0; i &lt; s1.size(); i++) {\n        if(!hashTable[s1[i]])\n            cout &lt;&lt; s1[i];\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1084_Broken%20Keyboard/","title":"PAT A1084 Broken Keyboard","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7528\u200b\u904d\u5386\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5224\u65ad\u200b s1 \u200b\u4e2d\u200b\u7684\u200b\u5b57\u7b26\u200b\u662f\u5426\u200b\u51fa\u73b0\u200b\u5728\u200b s2 \u200b\u4e2d\u200b\uff0c\u200b\u82e5\u200b\u672a\u200b\u51fa\u73b0\u200b\uff0c\u200b\u6839\u636e\u200b hashTable \u200b\u662f\u5426\u200b\u8bb0\u5f55\u200b\u5176\u200b\u66fe\u7ecf\u200b\u8f93\u51fa\u200b\u8fc7\u200b\u3002\u200b\u82e5\u200b\u4e3a\u200b true \u200b\u5219\u200b\u66fe\u7ecf\u200b\u8f93\u51fa\u200b\u8fc7\u200b\uff0c\u200b\u82e5\u200b\u4e3a\u200b false \u200b\u5219\u200b\u672a\u200b\u8f93\u51fa\u200b\u8fc7\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstring s1, s2;\n\nbool hashTable[128];\n\nint main() {\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    for(int i = 0; i &lt; s1.size(); i++) {\n        int j;\n        char c1, c2;\n        for(j = 0; j &lt; s2.size(); j++) {\n            c1 = s1[i], c2 = s2[j];\n            if(c1 &gt;= 'a' &amp;&amp; c1 &lt;= 'z') c1 -= 32;\n            if(c2 &gt;= 'a' &amp;&amp; c2 &lt;= 'z') c2 -= 32;\n            if(c1 == c2) break;\n        }\n        if(j == s2.size() &amp;&amp; hashTable[c1] == false) {\n            cout &lt;&lt; c1;\n            hashTable[c1] = true;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1092_To%20Buy%20or%20Not%20to%20Buy/","title":"PAT A1092 To Buy or Not to Buy","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u901a\u8fc7\u200b\u4e0b\u6807\u200b\u5904\u7406\u200b\u5c06\u200b\u5bf9\u5e94\u200b\u73e0\u5b50\u200b\u989c\u8272\u200b\u5904\u7406\u200b\u6210\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u5bf9\u5e94\u200b\u6570\u5b57\u200b\uff0c\u200b\u904d\u5386\u200b s1 \u200b\u586b\u5145\u200b\u54c8\u5e0c\u200b\u8868\u200b\u3002\u200b\u518d\u200b\u904d\u5386\u200b s2 \u200b\u51cf\u53bb\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u5bf9\u5e94\u200b\u503c\u200b\uff0c\u200b\u82e5\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u51fa\u73b0\u200b\u8d1f\u6570\u200b\uff0c\u200b\u5219\u200b\u66f4\u65b0\u200b miss\u3002miss \u200b\u5927\u4e8e\u200b 0\uff0c\u200b\u5219\u200b\u4e0d\u200b\u6ee1\u8db3\u200b\uff0c\u200b\u5426\u5219\u200b\u76f4\u63a5\u200b\u8f93\u51fa\u200b s1.size() - s2.size() \u200b\u4f5c\u4e3a\u200b\u591a\u4f59\u200b\u7684\u200b\u73e0\u5b50\u200b\u6570\u91cf\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\nint hashTable[80], miss = 0;\n\nstring s1, s2;\n\nint change(char ch) {\n    if(ch &gt;= '0' &amp;&amp; ch &lt;= '9') return ch - '0';\n    else if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') return ch - 'a' + 10;\n    else if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') return ch - 'A' + 36;\n    return -1;\n}\n\nint main() {\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    for(int i = 0; i &lt; s1.size(); i++) {\n        int index = change(s1[i]);\n        hashTable[index]++;\n    }\n    for(int i = 0; i &lt; s2.size(); i++) {\n        int index = change(s2[i]);\n        hashTable[index]--;\n        if(hashTable[index] &lt; 0) miss++;\n    }\n    if(miss &gt; 0) cout &lt;&lt; \"No \" &lt;&lt; miss;\n    else cout &lt;&lt; \"Yes \" &lt;&lt; s1.size() - s2.size();\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%88/PAT%20A1051_Pop%20Sequence/","title":"PAT A1051 Pop Sequence","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7528\u6808\u200b\u6765\u200b\u6a21\u62df\u200b\u7ed9\u5b9a\u200b\u51fa\u6808\u200b\u987a\u5e8f\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u5373\u53ef\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;stack&gt;\nusing namespace std;\n\nconst int maxn = 1005;\nint m, n, k;\nint seq[maxn];\n\nint main() {\n    scanf(\"%d %d %d\", &amp;m, &amp;n, &amp;k);\n    stack&lt;int&gt; st;\n    while(k--) {\n        while(!st.empty()) st.pop();\n        for(int i = 0; i &lt; n; i++) {\n            scanf(\"%d\", &amp;seq[i]);\n        }\n        int idx = 0;\n        bool flag = true;\n        for(int i = 1; i &lt;= n; i++) {\n            st.push(i);\n            if(st.size() &gt; m) {\n                flag = false;\n                break;\n            }\n            while(!st.empty() &amp;&amp; st.top() == seq[idx]) {\n                st.pop();\n                idx++;\n            }\n        }\n        if(st.empty() &amp;&amp; flag == true) \n            printf(\"YES\\n\");\n        else printf(\"NO\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/PAT%20A1043_Is%20it%20a%20Binary%20Search%20Tree/","title":"PAT A1043 Is it a Binary Search Tree","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u5efa\u6811\u200b\u7136\u540e\u200b\u4e0e\u200b\u8f93\u5165\u200b\u5e8f\u5217\u200b\u8fdb\u884c\u200b\u5bf9\u6bd4\u200b\uff0c\u200b\u6ce8\u610f\u200b\u955c\u50cf\u200b\u5e8f\u5217\u200b\u5373\u200b\u5bf9\u6362\u200b\u5de6\u53f3\u200b\u904d\u5386\u200b\u987a\u5e8f\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\ntypedef struct Node Node;\n\nstruct Node {\n    int data;\n    Node* left, *right;\n};\n\nvoid insert(Node* &amp;root, int data) {\n    if(root == NULL) {\n        root = new Node;\n        root-&gt;data = data;\n        root-&gt;left = NULL;\n        root-&gt;right = NULL;\n        return;\n    }\n    if(data &lt; root-&gt;data) insert(root-&gt;left, data);\n    else insert(root-&gt;right, data);\n}\n\nvoid preOrder(Node* root, vector&lt;int&gt;&amp; pre) {\n    if(root == NULL) return;\n    pre.push_back(root-&gt;data);\n    preOrder(root-&gt;left, pre);\n    preOrder(root-&gt;right, pre);\n}\n\nvoid mPreOrder(Node* root, vector&lt;int&gt;&amp; mPre) {\n    if(root == NULL) return;\n    mPre.push_back(root-&gt;data);\n    mPreOrder(root-&gt;right, mPre);\n    mPreOrder(root-&gt;left, mPre);\n}\n\nvoid postOrder(Node* root, vector&lt;int&gt;&amp; post) {\n    if(root == NULL) return;\n    postOrder(root-&gt;left, post);\n    postOrder(root-&gt;right, post);\n    post.push_back(root-&gt;data);\n}\n\nvoid mPostOrder(Node* root, vector&lt;int&gt;&amp; mPost) {\n    if(root == NULL) return;\n    mPostOrder(root-&gt;right, mPost);\n    mPostOrder(root-&gt;left, mPost);\n    mPost.push_back(root-&gt;data);\n}\n\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    int data;\n    Node* root = NULL;\n    vector&lt;int&gt; origin;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;data);\n        insert(root, data);\n        origin.push_back(data);\n    }\n    vector&lt;int&gt; pre, mPre, post, mPost;\n    preOrder(root, pre);\n    mPreOrder(root, mPre);\n    if(origin == pre) {\n        printf(\"YES\\n\");\n        postOrder(root, post);\n        for(int i = 0; i &lt; post.size(); i++) {\n            printf(\"%d\", post[i]);\n            if(i &lt; post.size() - 1)\n                printf(\" \");\n            else printf(\"\\n\");\n        }\n    } else if(origin == mPre) {\n        printf(\"YES\\n\");\n        mPostOrder(root, mPost);\n        for(int i = 0; i &lt; mPost.size(); i++) {\n            printf(\"%d\", mPost[i]);\n            if(i &lt; mPost.size() - 1)\n                printf(\" \");\n            else printf(\"\\n\");\n        }\n    } else {\n        printf(\"NO\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/PAT%20A1064_Complete%20Binary%20Search%20Tree/","title":"PAT A1064 Complete Binary Search Tree","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200b\u6570\u7ec4\u200b\u5efa\u7acb\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u6570\u7ec4\u200b\u6309\u200b\u987a\u5e8f\u200b\u904d\u5386\u200b\u5373\u200b\u4e3a\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int maxn = 1005;\n\nint CBT[maxn], val[maxn];\nint n, index;\n\nvoid inOrder(int root) {\n    if(root &gt; n) return;\n    inOrder(2 * root);\n    CBT[root] = val[index++];\n    inOrder(2 * root + 1);\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;val[i]);\n    }\n    sort(val, val + n);\n    inOrder(1);\n    for(int i = 1; i &lt;= n; i++) {\n        printf(\"%d\", CBT[i]);\n        if(i &lt; n) printf(\" \");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/PAT%20A1099_Build%20a%20Binary%20Search%20Tree/","title":"PAT A1099 Build a Binary Search Tree","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u200b\u7ed3\u70b9\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b0\uff0c\u200b\u7528\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u5efa\u6811\u200b\uff0c\u200b\u8f93\u5165\u200b\u7684\u200b\u952e\u503c\u200b\u8fdb\u884c\u200b\u9012\u589e\u200b\u6392\u5e8f\u200b\u3002\u200b\u6309\u7167\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u987a\u5e8f\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u586b\u5165\u200b\u952e\u503c\u200b\uff0c\u200b\u6700\u540e\u200bBFS\u200b\u6c42\u5f97\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\u7b54\u6848\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\nconst int maxn = 105;\n\ntypedef struct {\n    int val, left, right;\n} Node;\n\nNode node[maxn];\nint n, key[maxn], index;\n\nvoid inOrder(int root) {\n    if(root == -1) return;\n    inOrder(node[root].left);\n    node[root].val = key[index++];\n    inOrder(node[root].right);\n}\n\nvoid BFS(int root) {\n    queue&lt;int&gt; q;\n    q.push(root);\n    while(!q.empty()) {\n        int temp = q.front();\n        q.pop();\n        printf(\"%d\", node[temp].val);\n        index++;\n        if(index &lt; n) printf(\" \");\n        if(node[temp].left != -1) q.push(node[temp].left);\n        if(node[temp].right != -1) q.push(node[temp].right);\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; n; i++) \n        scanf(\"%d %d\", &amp;node[i].left, &amp;node[i].right);\n    for(int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;key[i]);\n    sort(key, key + n);\n    inOrder(0);\n    index = 0;\n    BFS(0);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1020_Tree%20Traversals/","title":"PAT A1020 Tree Traversals","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200b\u540e\u5e8f\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u8fdb\u884c\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u91cd\u5efa\u200b\uff0c\u200b\u4e4b\u540e\u200b\u7528\u200bBFS\u200b\u8fdb\u884c\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\u6253\u5370\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\nconst int maxn = 35;\n\ntypedef struct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\nint inOrder[maxn], postOrder[maxn];\n\nNode* reCreate(int postL, int postR, int inL, int inR) {\n    if(postL &gt; postR) return NULL;\n    Node* root = new Node;\n    root-&gt;data = postOrder[postR];\n    int i;\n    for(i = inL; i &lt;= inR; i++) \n        if(inOrder[i] == postOrder[postR]) break;\n    int numL = i - inL;\n    root-&gt;left = reCreate(postL, postL + numL - 1, inL, i - 1);\n    root-&gt;right = reCreate(postL + numL, postR - 1, i + 1, inR);\n    return root;\n}\n\nint n;\nint num = 0;\nvoid BFS(Node* root) {\n    queue&lt;Node*&gt; q;\n    q.push(root);\n    while(!q.empty()) {\n        Node* temp = q.front();\n        q.pop();\n        printf(\"%d\", temp-&gt;data);\n        num++;\n        if(num &lt; n) printf(\" \");\n        if(temp-&gt;left != NULL) q.push(temp-&gt;left);\n        if(temp-&gt;right != NULL) q.push(temp-&gt;right);\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; n; i++) \n        scanf(\"%d\", &amp;postOrder[i]);\n    for(int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;inOrder[i]);\n    Node* root = reCreate(0, n - 1, 0, n - 1);\n    BFS(root);\n    printf(\"\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1086_Tree%20Traversals%20Again/","title":"PAT A1086 Tree Traversals Again","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u6a21\u62df\u200b\u6808\u200b\u7684\u200b\u51fa\u6808\u200b\u548c\u200b\u5165\u6808\u200b\uff0c\u200b\u9898\u76ee\u200b\u4e2d\u6709\u200b\u6309\u65f6\u200bPush\u200b\u64cd\u4f5c\u200b\u76f8\u5f53\u4e8e\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u800c\u200bPop\u200b\u64cd\u4f5c\u200b\u76f8\u5f53\u4e8e\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u3002\u200b\u7531\u200b\u5148\u5e8f\u200b+\u200b\u4e2d\u5e8f\u200b\u6216\u200b\u540e\u5e8f\u200b+\u200b\u4e2d\u5e8f\u200b\u53ef\u200b\u91cd\u6784\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5373\u200b\u91cd\u5efa\u200b\u6811\u200b\u5e76\u200b\u8fdb\u884c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;stack&gt;\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nstack&lt;int&gt; st;\nint n, num;\nstring action;\nvector&lt;int&gt; pre, in, post;\n\ntypedef struct Node {\n    int val;\n    Node *left, *right;\n} Node;\n\nvoid postOrder(Node *root) {\n    if(root == NULL) return;\n    postOrder(root-&gt;left);\n    postOrder(root-&gt;right);\n    post.push_back(root-&gt;val);\n}\n\nNode* reCreate(int preL, int preR, int inL, int inR) {\n    if(preL &gt; preR) return NULL;\n    Node* root = new Node;\n    root-&gt;val = pre[preL];\n    int k;\n    for(k = inL; k &lt;= inR; k++)\n        if(in[k] == pre[preL])\n            break;\n    int numLeft = k - inL;\n    root-&gt;left = reCreate(preL + 1, preL + numLeft, inL, k - 1);\n    root-&gt;right = reCreate(preL + numLeft + 1, preR, k + 1, inR);\n    return root;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; 2 * n; i++) {\n        cin &gt;&gt; action;\n        if(action == \"Push\") {\n            cin &gt;&gt; num;\n            st.push(num);\n            pre.push_back(num);\n        } else if(action == \"Pop\") {\n            num = st.top();\n            st.pop();\n            in.push_back(num);\n        }\n    }\n    Node *root = reCreate(0, n - 1, 0, n - 1);\n    postOrder(root);\n    for(int i = 0; i &lt; n; i++) {\n        printf(\"%d\", post[i]);\n        if(i &lt; n - 1) printf(\" \");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1102_Invert%20a%20Binary%20Tree/","title":"PAT A1102 Invert a Binary Tree","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u8bbe\u7f6e\u200b\u6807\u5fd7\u200b\u6570\u7ec4\u200bnotRoot\uff0c\u200b\u5c06\u200b\u4f5c\u4e3a\u200b\u5de6\u53f3\u200b\u5b50\u200b\u7ed3\u70b9\u200b\u90fd\u200b\u6392\u9664\u200b\u4e3a\u6839\u200b\u8282\u70b9\u200b\uff0c\u200b\u53ef\u200b\u627e\u5230\u200b\u6839\u200b\u8282\u70b9\u200b\u3002\u200b\u63a5\u7740\u200b\u6839\u636e\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u987a\u5e8f\u200b\u6765\u200bInvert\u200b\u6574\u9897\u200b\u6811\u200b\uff0c\u200b\u5229\u7528\u200bBFS\u200b\u8fdb\u884c\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;queue&gt;\n#include&lt;algorithm&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\nconst int maxn = 15;\n\ntypedef struct {\n    int left, right;\n} Node;\n\nNode node[maxn];\nbool notRoot[maxn];\nint n, num;\n\nint ToNumber(char ch) {\n    if(ch == '-') return -1;\n    notRoot[ch - '0'] = true;\n    return ch - '0';\n}\n\nint findRoot() {\n    for(int i = 0; i &lt; n; i++)\n        if(!notRoot[i]) return i;\n    return -1;\n}\n\nvoid invertTree(int root) {\n    if(root == -1) return;\n    invertTree(node[root].left);\n    invertTree(node[root].right);\n    swap(node[root].left, node[root].right);\n}\n\nvoid levelOrder(int root) {\n    queue&lt;int&gt; q;\n    q.push(root);\n    while(!q.empty()) {\n        int temp = q.front();\n        q.pop();\n        printf(\"%d\", temp);\n        num++;\n        if(num &lt; n) printf(\" \");\n        if(node[temp].left != -1) q.push(node[temp].left);\n        if(node[temp].right != -1) q.push(node[temp].right);\n    }\n    num = 0;\n    printf(\"\\n\");\n}\n\nvoid inOrder(int root) {\n    if(root == -1) return;\n    inOrder(node[root].left);\n    printf(\"%d\", root);\n    num++;\n    if(num &lt; n) printf(\" \");\n    inOrder(node[root].right);\n}\n\nint main() {\n    cin &gt;&gt; n;\n    char left, right;\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; left &gt;&gt; right;\n        node[i].left = ToNumber(left);\n        node[i].right = ToNumber(right);\n    }\n    int root = findRoot();\n    invertTree(root);\n    levelOrder(root);\n    inOrder(root);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/PAT%20A1066_Root%20of%20AVL%20Tree/","title":"PAT A1066 Root of AVL Tree","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6a21\u677f\u200b\u9898\u76ee\u200b\uff0c\u200b\u6ce8\u610f\u200bAVL\u200b\u6811\u200b\u6bcf\u6b21\u200b\u63d2\u5165\u200b\u540e\u200b\u90fd\u200b\u8981\u200b\u8c03\u6574\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u7136\u540e\u200b\u8fdb\u884c\u200b\u76f8\u5e94\u200b\u7684\u200b\u5de6\u65cb\u200b\u548c\u200b\u53f3\u65cb\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\ntypedef struct Node {\n    int data, height;\n    struct Node* left, * right;\n} Node;\n\nint n;\n\nNode* createNode(int val) {\n    Node* node = new Node;\n    node-&gt;data = val;\n    node-&gt;height = 1;\n    node-&gt;left = node-&gt;right = NULL;\n    return node;\n}\n\nint getHeight(Node* root) {\n    if(root == NULL) return 0;\n    return root-&gt;height;\n}\n\nvoid updateHeight(Node* root) {\n    root-&gt;height = max(getHeight(root-&gt;left), getHeight(root-&gt;right)) + 1;\n}\n\n// \u200b\u8fd9\u91cc\u200b\u5b9a\u4e49\u200b\u5e73\u8861\u200b\u56e0\u5b50\u200b\u6570\u503c\u200b\u4e3a\u200b\u5de6\u5b50\u200b\u6811\u200b\u4e0e\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u5dee\u200b\nint getBalanceFactor(Node* root) {\n    return getHeight(root-&gt;left) - getHeight(root-&gt;right);\n}\n\nvoid leftRotation(Node* &amp;root) {\n    Node* temp = root-&gt;right;\n    root-&gt;right = temp-&gt;left;\n    temp-&gt;left = root;\n    updateHeight(root);\n    updateHeight(temp);\n    root = temp;\n}\n\nvoid rightRotation(Node* &amp;root) {\n    Node* temp = root-&gt;left;\n    root-&gt;left = temp-&gt;right;\n    temp-&gt;right = root;\n    updateHeight(root);\n    updateHeight(temp);\n    root = temp;\n}\n\nvoid insert(Node* &amp;root, int val) {\n    if(root == NULL) {\n        root = createNode(val);\n        return;\n    }\n    if(root-&gt;data &lt; val) {\n        insert(root-&gt;right, val);\n        updateHeight(root);\n        if(getBalanceFactor(root) == -2) {\n            // RR\n            if(getBalanceFactor(root-&gt;right) == -1) {\n                leftRotation(root);\n            // RL\n            } else if(getBalanceFactor(root-&gt;right) == 1) {\n                rightRotation(root-&gt;right);\n                leftRotation(root);\n            }\n        } \n    } else {\n        insert(root-&gt;left, val);\n        updateHeight(root);\n        if(getBalanceFactor(root) == 2) {\n            // LL\n            if(getBalanceFactor(root-&gt;left) == 1) {\n                rightRotation(root);\n            // LR\n            } else if(getBalanceFactor(root-&gt;left) == -1) {\n                leftRotation(root-&gt;left);\n                rightRotation(root);\n            }\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    int val;\n    Node* root = NULL;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;val);\n        insert(root, val);\n    }\n    printf(\"%d\", root-&gt;data);\n    return 0;\n} \n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1004_Counting%20Leaves/","title":"PAT A1004 Counting Leaves","text":"<p>\u200b\u601d\u8def\u200b\uff1avector\u200b\u5efa\u6811\u200b\uff0cDFS\u200b\u904d\u5386\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u901a\u8fc7\u200b\u66f4\u65b0\u200b\u6700\u5927\u200b\u9ad8\u5ea6\u200b\u6765\u200b\u786e\u5b9a\u200b\u6709\u200b\u591a\u5c11\u200b\u5c42\u200b\u3002\u200b\u5e76\u4e14\u200b\u7528\u200b\u6570\u7ec4\u200b\u6765\u200b\u8bb0\u5f55\u200b\u6bcf\u200b\u4e00\u5c42\u200b\u7684\u200b\u53f6\u5b50\u200b\u7ed3\u70b9\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int maxn = 105;\n\nvector&lt;int&gt; children[maxn];\nint N, M, maxDepth;\nint res[maxn];\n\nvoid DFS(int idx, int depth) {\n    int child_num = children[idx].size();\n    if(child_num == 0) {\n        res[depth]++;\n        if(depth &gt; maxDepth) {\n            maxDepth = depth;\n        }\n        return;\n    }\n    for(int i = 0; i &lt; child_num; i++) \n        DFS(children[idx][i], depth + 1);\n}\n\nint main() {\n    scanf(\"%d %d\", &amp;N, &amp;M);\n    int father, num, child;\n    for(int i = 0; i &lt; M; i++) {\n        scanf(\"%d %d\", &amp;father, &amp;num);\n        for(int j = 0; j &lt; num; j++) {\n            scanf(\"%d\", &amp;child);\n            children[father].push_back(child);\n        }\n    }\n    DFS(1, 0);\n    for(int i = 0; i &lt;= maxDepth; i++) {\n        printf(\"%d\", res[i]);\n        if(i &lt; maxDepth) printf(\" \");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1053_Path%20of%20Equal%20Weight/","title":"PAT A1053 Path of Equal Weight","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200b\u6df1\u5ea6\u200b\u4f18\u5148\u200b\u641c\u7d22\u200b\u5bf9\u200b\u8def\u5f84\u200b\u8fdb\u884c\u200b\u641c\u7d22\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u5230\u8fbe\u200b\u53f6\u200b\u7ed3\u70b9\u200b\u4ee5\u53ca\u200b\u526a\u679d\u200b\u3002\u200b\u6ce8\u610f\u200b\uff0c\u200b\u9898\u76ee\u200b\u4e2d\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u6d4b\u8bd5\u70b9\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u5b50\u200b\u7ed3\u70b9\u200b\u503c\u200b\u4e71\u5e8f\u200b\u3002\u200b\u5373\u200b\u7b97\u6cd5\u200b\u7b14\u8bb0\u200b\u4e2d\u200b\u7684\u200b\u53c2\u8003\u7b54\u6848\u200b\u8fdb\u884c\u200b\u7684\u200b\u6392\u5e8f\u200b\u6392\u5e8f\u200b\u53ea\u80fd\u200b\u4fdd\u8bc1\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u7684\u200b\u76f4\u63a5\u200b\u5b50\u200b\u7ed3\u70b9\u200b\u4fdd\u6301\u200b\u6709\u5e8f\u200b\uff0c\u200b\u4f46\u662f\u200b\u65e0\u6cd5\u200b\u4fdd\u8bc1\u200b\u952e\u503c\u200b\u76f8\u540c\u200b\u7684\u200b\u5b50\u200b\u7ed3\u70b9\u200b\u7684\u200b\u5b50\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5373\u5b59\u200b\u7ed3\u70b9\u200b\u6709\u5e8f\u200b\u3002 \u200b\u6bd4\u5982\u200b\u8f93\u51fa\u200b\u5e8f\u5217\u200b 10 9 8 7 \u200b\u548c\u200b 10 9 7 8\uff0c\u200b\u6545\u200b\u9700\u8981\u200b\u628a\u200b\u6240\u6709\u200b\u7684\u200b\u7b54\u6848\u200b\u5e8f\u5217\u200b\u8fdb\u884c\u200b\u518d\u6b21\u200b\u6392\u5e8f\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5934\u6587\u4ef6\u200b\u5305\u542b\u200b\u4e86\u200bgreater\u200b\u51fd\u6570\u200b\u6a21\u677f\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n#include&lt;functional&gt;\nusing namespace std;\n\nconst int maxn = 105;\n\ntypedef struct Node Node;\nstruct Node {\n    int data;\n    vector&lt;int&gt; children;\n};\n\nNode node[maxn];\n\nbool cmp(int a, int b) {\n    return node[a].data &gt; node[b].data;\n}\n\nint n, m, target;\n\nint path[maxn];\nvector&lt;vector&lt;int&gt;&gt; ans;\n\nvoid DFS(int idx, int num, int sum) {\n    if(sum &gt; target) return;\n    if(sum == target) {\n        if(node[idx].children.size() != 0) return;\n        vector&lt;int&gt; res;\n        for(int i = 0; i &lt; num; i++) {\n            res.push_back(node[path[i]].data);\n        }\n        ans.push_back(res);\n        return;\n    }\n    for(int i = 0; i &lt; node[idx].children.size(); i++) {\n        int child = node[idx].children[i];\n        path[num] = child;\n        DFS(child, num + 1, sum + node[child].data);\n    }\n}\n\nint main() {\n    scanf(\"%d %d %d\", &amp;n, &amp;m, &amp;target);\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;node[i].data);\n    }\n    int idx, size, child;\n    for(int i = 0; i &lt; m; i++) {\n        scanf(\"%d %d\", &amp;idx, &amp;size);\n        for(int j = 0; j &lt; size; j++) {\n            scanf(\"%d\", &amp;child);\n            node[idx].children.push_back(child);\n        }\n        sort(node[idx].children.begin(), node[idx].children.end(), cmp);\n    }\n    path[0] = 0;\n    DFS(0, 1, node[0].data);\n    sort(ans.begin(), ans.end(), greater&lt;vector&lt;int&gt;&gt;());\n    for(auto &amp;res : ans) {\n        for(int i = 0; i &lt; res.size(); i++) {\n            printf(\"%d\", res[i]);\n            if(i &lt; res.size() - 1)\n                printf(\" \");\n            else printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1079_Total%20Sales%20of%20Supply%20Chain/","title":"PAT A1079 Total Sales of Supply Chain","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u672c\u9898\u200b\u4e0e\u200bA1090\u200b\u76f8\u4f3c\u200b\uff0cvector\u200b\u5efa\u6811\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bDFS\uff0c\u200b\u4e0d\u540c\u4e4b\u5904\u200b\u5728\u4e8e\u200b\u53f6\u200b\u7ed3\u70b9\u200b\u591a\u200b\u4e86\u200b\u70b9\u6743\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cmath&gt;\nusing namespace std;\n\nconst int maxn = 100005;\n\ntypedef struct {\n    double val;\n    vector&lt;int&gt; children;\n} Node;\n\nNode node[maxn];\n\nint n;\ndouble p, r, res;\n\nvoid DFS(int idx, int depth) {\n    int child_num = node[idx].children.size();\n    if(child_num == 0) {\n        res += node[idx].val * pow(1 + r, depth);\n        return;\n    }\n    for(int i = 0; i &lt; child_num; i++) \n        DFS(node[idx].children[i], depth + 1);\n}\n\nint main() {\n    scanf(\"%d %lf %lf\", &amp;n, &amp;p, &amp;r);\n    r /= 100;\n    int num, child;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;num);\n        if(num) {\n            for(int j = 0; j &lt; num; j++) {\n                scanf(\"%d\", &amp;child);\n                node[i].children.push_back(child);\n            }\n        } else {\n            scanf(\"%lf\", &amp;node[i].val);\n        }\n    }\n    // \u200b\u6ce8\u610f\u200b\u6839\u200b\u7ed3\u70b9\u200b\u5df2\u7ecf\u200b\u8bf4\u660e\u200b\u662f\u200b0\n    DFS(0, 0);\n    printf(\"%.1f\", p * res);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1090_Highest%20Price%20in%20Supply%20Chain/","title":"PAT A1090 Highest Price in Supply Chain","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u636e\u200b\u8f93\u5165\u200b\u5efa\u7acb\u200bvector\u200b\u4e3a\u200b\u7ed3\u6784\u200b\u7684\u200b\u6811\u200b\uff0c\u200b\u518d\u200b\u901a\u8fc7\u200bDFS\u200b\u6c42\u5f97\u200b\u6700\u5927\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5373\u53ef\u200b\u89e3\u51b3\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;cmath&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int maxn = 100005;\n\nint n, maxDepth, num, father, root;\ndouble p, r;\nvector&lt;int&gt; children[maxn];\n\nvoid DFS(int idx, int depth) {\n    int children_num = children[idx].size();\n    if(children_num == 0) {\n        if(depth &gt; maxDepth) {\n            maxDepth = depth;\n            num = 1;\n        } else if(depth == maxDepth) {\n            num++;\n        }\n        return;\n    }\n    for(int i = 0; i &lt; children_num; i++)\n        DFS(children[idx][i], depth + 1);\n}\n\nint main() {\n    scanf(\"%d %lf %lf\", &amp;n, &amp;p, &amp;r);\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;father);\n        if(father != -1) {\n            children[father].push_back(i);\n        } else {\n            root = i;\n        }\n    }\n    DFS(root, 0);\n    r /= 100;\n    printf(\"%.2f %d\", p * pow(1 + r, maxDepth), num);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1094_The%20Largest%20Generation/","title":"PAT A1094 The Largest Generation","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5229\u7528\u200bvector\u200b\u5efa\u6811\u200b\uff0c\u200b\u7528\u200b\u6570\u7ec4\u200b\u7edf\u8ba1\u200b\u6bcf\u200b\u4e00\u5c42\u200b\u7684\u200b\u7ed3\u70b9\u200b\u6570\u91cf\u200b\uff0c\u200b\u901a\u8fc7\u200bDFS\u200b\u6765\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\u5373\u53ef\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nconst int maxn = 100;\nvector&lt;int&gt; children[maxn];\nint levelTable[maxn];\nint N, M;\n\nvoid DFS(int idx, int level) {\n    levelTable[level]++;\n    int child_num = children[idx].size();\n    if(child_num == 0) return;\n    for(int i = 0; i &lt; child_num; i++) \n        DFS(children[idx][i], level + 1);\n}\n\nint main() {\n    scanf(\"%d %d\", &amp;N, &amp;M);\n    int num, child, father;\n    for(int i = 0; i &lt; M; i++) {\n        scanf(\"%d %d\", &amp;father, &amp;num);\n        for(int j = 0; j &lt; num; j++) {\n            scanf(\"%d\", &amp;child);\n            children[father].push_back(child);\n        }\n    }\n    //\u200b\u6839\u200b\u7ed3\u70b9\u200b\u4e3a\u200b1\uff0clevel\u200b\u8d77\u59cb\u200b\u4e3a\u200b1\n    DFS(1, 1);\n    int maxLevel = 0;\n    for(int i = 1; i &lt;= N; i++) \n        if(levelTable[i] &gt; levelTable[maxLevel])\n            maxLevel = i;\n    printf(\"%d %d\", levelTable[maxLevel], maxLevel);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1106_Lowest%20Price%20in%20Supply%20Chain/","title":"PAT A1106 Lowest Price in Supply Chain","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6839\u636e\u200b\u8f93\u5165\u200b\u5efa\u7acb\u200bvector\u200b\u4e3a\u200b\u7ed3\u6784\u200b\u7684\u200b\u6811\u200b\uff0c\u200b\u518d\u200b\u901a\u8fc7\u200bDFS\u200b\u6c42\u5f97\u200b\u6700\u5c0f\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u540c\u65f6\u200b\u8bb0\u5f55\u200b\u6700\u5c0f\u200b\u9ad8\u5ea6\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6570\u91cf\u200b\uff0c\u200b\u5373\u53ef\u200b\u89e3\u51b3\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;cmath&gt;\nusing namespace std;\n\nconst int maxn = 100005;\n\nvector&lt;int&gt; children[maxn];\ndouble p, r;\nint n, minDepth = maxn, cnt;\n\nvoid DFS(int idx, int depth) {\n    int child_num = children[idx].size();\n    if(child_num == 0) {\n        if(depth &lt; minDepth) {\n            minDepth = depth;\n            cnt = 1;\n        }\n        else if(depth == minDepth) cnt++;\n        return;\n    }\n    for(int i = 0; i &lt; child_num; i++)\n        DFS(children[idx][i], depth + 1);\n}\n\nint main() {\n    scanf(\"%d %lf %lf\", &amp;n, &amp;p, &amp;r);\n    r /= 100;\n    int num, child;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;num);\n        for(int j = 0; j &lt; num; j++) {\n            scanf(\"%d\", &amp;child);\n            children[i].push_back(child);\n        }\n    }\n    DFS(0, 0);\n    printf(\"%.4f %d\", p * pow(1 + r, minDepth), cnt);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1001_A%2BB%20Format/","title":"PAT A1001 A+B Format","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u200b\u8fdb\u884c\u200b\u7b26\u53f7\u200b\u5904\u7406\u200b\uff0c\u200b\u518d\u200b\u8ba1\u7b97\u200b\u9664\u200b 3 \u200b\u7ed3\u679c\u200b cnt \u200b\u548c\u6a21\u200b 3 \u200b\u7684\u200b\u4f59\u6570\u200b remain\uff0c\u200b\u6839\u636e\u200b cnt \u200b\u548c\u200b remain \u200b\u7684\u200b\u4e0d\u540c\u200b\u6765\u200b\u5904\u7406\u200b\uff0c\u200b\u5316\u7b80\u200b\u6210\u200b\u500d\u6570\u200b\u4e3a\u200b 3 \u200b\u7684\u200b\u5b50\u4e32\u200b\u95ee\u9898\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nint main() {\n    int a, b, sum;\n    cin &gt;&gt; a &gt;&gt; b;\n    sum = a + b;\n    if(sum &lt; 0) {\n        sum = -sum;\n        cout &lt;&lt; \"-\";\n    }\n    string s = to_string(sum);\n    int cnt = s.size() / 3, remain = s.size() % 3;\n    if(cnt == 0) {\n        cout &lt;&lt; s;\n        return 0;\n    }\n    if(remain == 1) {\n        cout &lt;&lt; s[0] &lt;&lt; \",\";\n        s = s.substr(1);\n    }\n    if(remain == 2) {\n        cout &lt;&lt; s[0] &lt;&lt; s[1] &lt;&lt; \",\";\n        s = s.substr(2);\n    }\n    cnt--;\n    for(int i = 0; i &lt; s.size(); i++) {\n        if(cnt &gt; 0 &amp;&amp; i &gt; 0 &amp;&amp; i % 3 == 0) {\n            cout &lt;&lt; \",\";\n            cnt--;\n        }\n        cout &lt;&lt; s[i];\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1002_A%2BB%20for%20Polynomials/","title":"PAT A1002 A+B for Polynomials","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6574\u4f53\u200b\u601d\u8def\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u5f52\u5e76\u200b\u6392\u5e8f\u200b\uff0c\u200b\u5c06\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u5c01\u88c5\u200b\u6210\u200b\u7ed3\u6784\u200b\u540e\u200b\u6309\u200b\u6307\u6570\u200b\u5927\u5c0f\u200b\u6392\u5e8f\u200b\uff0c\u200b\u91c7\u7528\u200b\u961f\u5217\u200b\u7684\u200b\u505a\u6cd5\u200b\u3002\u200b\u6ce8\u610f\u200b\u7cfb\u6570\u200b\u76f8\u52a0\u200b\u540e\u200b\u82e5\u200b\u4e3a\u200b 0\uff0c\u200b\u8be5\u9879\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\ntypedef struct {\n    int exp;\n    double coef;\n} Term;\n\nint main() {\n    queue&lt;Term&gt; A, B;\n    int k, e;\n    double c;\n    Term temp;\n    cin &gt;&gt; k;\n    for(int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; e &gt;&gt; c;\n        temp.exp = e;\n        temp.coef = c;\n        A.push(temp);\n    }\n    cin &gt;&gt; k;\n    for(int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; e &gt;&gt; c;\n        temp.exp = e;\n        temp.coef = c;\n        B.push(temp);\n    }\n    vector&lt;Term&gt; ans;\n    Term a, b;\n    while(!A.empty() &amp;&amp; !B.empty()) {\n        a = A.front();\n        b = B.front();\n        if(a.exp == b.exp) {\n            temp.exp = a.exp;\n            temp.coef = a.coef + b.coef;\n            if(temp.coef != 0) ans.push_back(temp);\n            A.pop();\n            B.pop();\n        } else if(a.exp &gt; b.exp) {\n            ans.push_back(a);\n            A.pop();\n        } else {\n            ans.push_back(b);\n            B.pop();\n        }\n    }\n    while(!A.empty()) {\n        a = A.front();\n        ans.push_back(a);\n        A.pop();\n    }\n    while(!B.empty()) {\n        b = B.front();\n        ans.push_back(b);\n        B.pop();\n    }\n    int lens = ans.size();\n    cout &lt;&lt; lens;\n    for(int i = 0; i &lt; lens; i++) {\n        printf(\" %d %.1f\", ans[i].exp, ans[i].coef);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1006_Sign%20In%20and%20Sign%20Out/","title":"PAT A1006 Sign In and Sign Out","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b\u8f93\u5165\u200b\u7684\u200b\u6570\u636e\u200b\u5c01\u88c5\u200b\u6210\u65b0\u200b\u7ed3\u6784\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5904\u7406\u200b\u8f93\u5165\u200b\u7684\u200b\u65f6\u95f4\u200b\u5b57\u7b26\u4e32\u200b\u4e3a\u200b\u4ee5\u200b\u79d2\u200b\u4e3a\u200b\u5355\u4f4d\u200b\u7684\u200b\u6574\u578b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e24\u6b21\u200b\u6392\u5e8f\u200b\u6765\u200b\u786e\u5b9a\u200b\u6700\u65e9\u200b\u548c\u200b\u6700\u665a\u200b\u7684\u200b\u4eba\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\ntypedef struct {\n    string id;\n    int inSec, outSec;\n} Info;\n\nvector&lt;Info&gt; res;\n\nbool cmp_in(Info a, Info b) {\n    return a.inSec &lt; b.inSec;\n}\n\nbool cmp_out(Info a, Info b) {\n    return a.outSec &gt; b.outSec;\n}\n\nint strToInt(string s) {\n    int h, m, sec;\n    h = (s[0] - '0') * 10 + (s[1] - '0');\n    m = (s[3] - '0') * 10 + (s[4] - '0');\n    sec = (s[6] - '0') * 10 + (s[7] - '0');\n    sec += h * 60 * 60 + m * 60;\n    return sec;\n}\n\nint main() {\n    int M;\n    string inTime, outTime, id;\n    cin &gt;&gt; M;\n    Info temp;\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; id &gt;&gt; inTime &gt;&gt; outTime;\n        temp.id = id;\n        temp.inSec = strToInt(inTime);\n        temp.outSec = strToInt(outTime);\n        res.push_back(temp);\n    }\n    sort(res.begin(), res.end(), cmp_in);\n    cout &lt;&lt; res[0].id &lt;&lt; \" \";\n    sort(res.begin(), res.end(), cmp_out);\n    cout &lt;&lt; res[0].id &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1008_Elevator/","title":"PAT A1008 Elevator","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u6309\u200b\u987a\u5e8f\u200b\u6a21\u62df\u200b\u7535\u68af\u200b\u8fd0\u884c\u200b\uff0c\u200b\u6ce8\u610f\u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u4e5f\u200b\u9700\u8981\u200b\u505c\u9760\u200b 5 \u200b\u79d2\u200b\u3002 <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int n, now = 0, next, ans = 0;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; next;\n        if(next &gt; now) ans += (next - now) * 6;\n        else ans += (now - next) * 4;\n        now = next;\n        ans += 5;\n    }\n    cout &lt;&lt; ans;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1009_Product%20of%20Polynomials/","title":"PAT A1009 Product of Polynomials","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5148\u200b\u5c06\u200b\u591a\u9879\u5f0f\u200b A \u200b\u8f93\u5165\u200b\u5e76\u200b\u5c01\u88c5\u200b\u5230\u200b vector \u200b\u4e2d\u200b\uff0c\u200b\u518d\u200b\u5f00\u8bbe\u200b\u4e00\u4e2a\u200b\u5927\u5c0f\u200b\u4e3a\u200b 2000 \u200b\u7684\u200b\u6570\u7ec4\u200b ans \u200b\u6765\u200b\u8bb0\u5f55\u200b\u7b54\u6848\u200b\uff0cans[i] \u200b\u4ee3\u8868\u200b coef\uff0ci \u200b\u4ee3\u8868\u200b exp\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\ntypedef struct {\n    int exp;\n    double coef;\n} Poly;\n\ndouble ans[2005];\nvector&lt;Poly&gt; p;\n\nint main() {\n    int k, exp;\n    double coef;\n    cin &gt;&gt; k;\n    Poly temp;\n    for(int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; exp &gt;&gt; coef;\n        temp.exp = exp;\n        temp.coef = coef;\n        p.push_back(temp);\n    }\n    cin &gt;&gt; k;\n    for(int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; exp &gt;&gt; coef;\n        for(int j = 0; j &lt; p.size(); j++) {\n            ans[exp + p[j].exp] += coef * p[j].coef;\n        }\n    }\n    int num = 0;\n    for(int i = 0; i &lt;= 2000; i++)\n        if(ans[i] != 0.0) num++;\n    cout &lt;&lt; num;\n    for(int i = 2000; i &gt;= 0; i--)\n        if(ans[i] != 0.0)\n            printf(\" %d %.1f\", i, ans[i]);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1011_World%20Cup%20Betting/","title":"PAT A1011 World Cup Betting","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u7684\u200b\u53d6\u200b\u6700\u5927\u503c\u200b\u4e58\u79ef\u200b\u6a21\u62df\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nchar mp[3] = {'W', 'T', 'L'};\n\nint main() {\n    double ans = 1.0, temp, a;\n    int idx;\n    for(int i = 0; i &lt; 3; i++) {\n        temp = 0.0;\n        for(int j = 0; j &lt; 3; j++) {\n            cin &gt;&gt; a;\n            if(a &gt; temp) {\n                temp = a;\n                idx = j;\n            }\n        }\n        ans *= temp;\n        printf(\"%c \", mp[idx]);\n    }\n    printf(\"%.2f\", (ans * 0.65 - 1) * 2);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1019_General%20Palindromic%20Number/","title":"PAT A1019 General Palindromic Number","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u56de\u6587\u200b\u6a21\u62df\u200b\u5224\u65ad\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5f53\u200b N = 0 \u200b\u65f6\u200b\u76f4\u63a5\u5224\u65ad\u200b\u4e3a\u200b\u56de\u6587\u200b\u6570\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; res;\n\nvoid GetDigits(int N, int b) {\n    while(N != 0) {\n        res.push_back(N % b);\n        N /= b;\n    }\n}\n\nbool JudgePalin() {\n    int lens = res.size();\n    for(int i = 0; i &lt; lens / 2; i++) {\n        if(res[i] != res[lens - i - 1])\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    int N, b;\n    cin &gt;&gt; N &gt;&gt; b;\n    if(N == 0) {\n        cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n        cout &lt;&lt; \"0\";\n        return 0;\n    }\n    GetDigits(N, b);\n    if(JudgePalin() == true) cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n    else cout &lt;&lt; \"No\" &lt;&lt; endl;\n    for(int i = res.size() - 1; i &gt;= 0; i--) {\n        cout &lt;&lt; res[i];\n        if(i != 0) cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1027_Colors%20in%20Mars/","title":"PAT A1027 Colors in Mars","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u8fdb\u5236\u200b\u8f6c\u6362\u200b\u6a21\u62df\u200b\uff0c\u200b\u4f7f\u7528\u200b\u6570\u7ec4\u200b\u66f4\u52a0\u200b\u5feb\u6377\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nchar mp[13] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C'};\nint a[3];\n\nint main() {\n    cin &gt;&gt; a[0] &gt;&gt; a[1] &gt;&gt; a[2];\n    cout &lt;&lt; \"#\";\n    for(int i = 0; i &lt; 3; i++) {\n        cout &lt;&lt; mp[a[i] / 13] &lt;&lt; mp[a[i] % 13];\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1031_Hello%20World%20for%20U/","title":"PAT A1031 Hello World for U","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u4f7f\u7528\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u6a21\u62df\u200b\uff0c\u200b\u6ce8\u610f\u200b n1 + n2 + n3 = N + 2\uff0c\u200b\u5176\u4e2d\u200b 2 \u200b\u7684\u200b\u542b\u4e49\u200b\u662f\u200b n1 \u200b\u548c\u200b n3 \u200b\u4e0e\u200b n2 \u200b\u5728\u200b\u5de6\u4e0b\u89d2\u200b\u548c\u200b\u53f3\u4e0b\u89d2\u200b\u5b58\u5728\u200b\u91cd\u5408\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    char ans[40][40];\n    string s;\n    cin &gt;&gt; s;\n    int k = (s.size() + 2) / 3;\n    int n2 = s.size() + 2 - 2 * k;\n    for(int i = 0; i &lt; 40; i++)\n        for(int j = 0; j &lt; 40; j++)\n            ans[i][j] = ' ';\n    int pos = 0;\n    for(int i = 0; i &lt; k; i++)\n        ans[i][0] = s[pos++];\n    for(int i = 1; i &lt; n2; i++)\n        ans[k-1][i] = s[pos++];\n    for(int i = k - 2; i &gt;= 0; i--)\n        ans[i][n2-1] = s[pos++];\n    for(int i = 0; i &lt; k; i++) {\n        for(int j = 0; j &lt; n2; j++)\n            cout &lt;&lt; ans[i][j];\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1035_Password/","title":"PAT A1035 Password","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u6a21\u62df\u200b\u66ff\u6362\u200b\u5373\u53ef\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\ntypedef struct {\n    string id, passwd;\n} Info;\n\nvector&lt;Info&gt; ans;\n\nvoid proc_passwd(Info a) {\n    bool isChanged = false;\n    for(int i = 0; i &lt; a.passwd.size(); i++) {\n        if(a.passwd[i] == '1') { \n            a.passwd[i] = '@';\n            isChanged = true;\n        }\n        else if(a.passwd[i] == '0') { \n            a.passwd[i] = '%';\n            isChanged = true;\n        }\n        else if(a.passwd[i] == 'l') {\n            a.passwd[i] = 'L';\n            isChanged = true;\n        }\n        else if(a.passwd[i] == 'O') {\n            a.passwd[i] = 'o';\n            isChanged = true;\n        }\n    }\n    if(isChanged) ans.push_back(a);\n}\n\nint main() {\n    int N;\n    cin &gt;&gt; N;\n    Info temp;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; temp.id &gt;&gt; temp.passwd;\n        proc_passwd(temp);\n    }\n    if(ans.size() == 0) {\n        if(N == 1) cout &lt;&lt; \"There is 1 account and no account is modified\";\n        else cout &lt;&lt; \"There are \" &lt;&lt; N &lt;&lt; \" accounts and no account is modified\";\n    } else {\n        cout &lt;&lt; ans.size() &lt;&lt; endl;\n        for(auto &amp;a : ans) {\n            cout &lt;&lt; a.id &lt;&lt; \" \" &lt;&lt; a.passwd &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1036_Boys%20vs%20Girls/","title":"PAT A1036 Boys vs Girls","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u8f93\u5165\u200b\u5c01\u88c5\u200b\u7ed3\u6784\u200b\u6a21\u62df\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\ntypedef struct {\n    string name, id;\n    int score;\n} Student;\n\nStudent m, f, temp;\nint n;\n\nvoid init() {\n    m.score = 101;\n    f.score = -1;\n}\n\nint main() {\n    init();\n    cin &gt;&gt; n;\n    char gender;\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; temp.name &gt;&gt; gender &gt;&gt; temp.id &gt;&gt; temp.score;\n        if(gender == 'M' &amp;&amp; temp.score &lt; m.score) \n            m = temp;\n        else if(gender == 'F' &amp;&amp; temp.score &gt; f.score)\n            f = temp;\n    }\n    if(f.score == -1) cout &lt;&lt; \"Absent\" &lt;&lt; endl;\n    else cout &lt;&lt; f.name &lt;&lt; \" \" &lt;&lt; f.id &lt;&lt; endl;\n    if(m.score == 101) cout &lt;&lt; \"Absent\" &lt;&lt; endl;\n    else cout &lt;&lt; m.name &lt;&lt; \" \" &lt;&lt; m.id &lt;&lt; endl;\n    if(f.score == -1 || m.score == 101) cout &lt;&lt; \"NA\";\n    else cout &lt;&lt; f.score - m.score;\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1042_Shuffing%20Machine/","title":"PAT A1042 Shuffing Machine","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6309\u7167\u200b\u9898\u76ee\u200b\u610f\u601d\u200b\u8fdb\u884c\u200b\u6a21\u62df\u200b\u5373\u53ef\u200b\uff0c\u200b\u6ce8\u610f\u200b iostream \u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u5df2\u7ecf\u200b\u6709\u200b next \u200b\u7684\u200b\u547d\u540d\u200b\uff0c\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u62a5\u9519\u200b\u3002</p> <pre><code>#include&lt;cstdio&gt;\nusing namespace std;\n\nconst int N = 54;\n\nchar numToLet[5] = {'S', 'H', 'C', 'D', 'J'};\nint start[60], end[60], next[60];\nint k;\n\nint main() {\n    scanf(\"%d\", &amp;k);\n    for(int i = 1; i &lt;= N; i++) {\n        start[i] = i;\n        scanf(\"%d\", &amp;next[i]);\n    }\n    for(int i = 0; i &lt; k; i++) {\n        for(int j = 1; j &lt;= N; j++) {\n            end[next[j]] = start[j];\n        }\n        for(int j = 1; j &lt;= N; j++) {\n            start[j] = end[j];\n        }\n    }\n    for(int i = 1; i &lt;= N; i++) {\n        printf(\"%c%d\", numToLet[(start[i] - 1) / 13], (start[i] - 1) % 13 + 1);\n        if(i != N) printf(\" \");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1046_Shortest%20Distance/","title":"PAT A1046 Shortest Distance","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u9884\u5904\u7406\u200b\u4ece\u200b 1 \u200b\u53f7\u200b\u7ed3\u70b9\u200b\u5230\u200b N \u200b\u53f7\u200b\u8282\u70b9\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e4b\u200b\u548c\u200b\uff0c\u200b\u53e6\u5916\u200b\u4f7f\u7528\u200b dist \u200b\u6570\u7ec4\u200b\uff0cdist[i - 1] \u200b\u4ee3\u8868\u200b 1 \u200b\u53f7\u200b\u7ed3\u70b9\u200b\u5230\u200b i \u200b\u53f7\u200b\u7ed3\u70b9\u200b\u7684\u200b\u8ddd\u79bb\u200b\u3002 \u200b\u6545\u200b dist(left, right) (left &lt; right) \u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u6210\u200b dist[right - 1] - dist[left - 1]\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 100005;\nint N, M;\nint D[MAXN], dist[MAXN];\n\nint main() {\n    cin &gt;&gt; N;\n    int sum = 0;\n    for(int i = 1; i &lt;= N; i++) {\n        cin &gt;&gt; D[i];\n        sum += D[i];\n        dist[i] = sum;\n    }\n    cin &gt;&gt; M;\n    int left, right, temp;\n    for(int i = 0; i &lt; M; i++) {\n        cin &gt;&gt; left &gt;&gt; right;\n        if(left &gt; right) swap(left, right);\n        temp = dist[right - 1] - dist[left - 1];\n        cout &lt;&lt; min(temp, sum - temp) &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1058_A%2BB%20in%20Hogwarts/","title":"PAT A1058 A+B in Hogwarts","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u5b57\u7b26\u4e32\u200b\u6a21\u62df\u200b\uff0c\u200b\u66b4\u529b\u200b\u6c42\u89e3\u200b\u7b54\u6848\u200b\u3002 <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nint main() {\n    string A, B, C;\n    cin &gt;&gt; A &gt;&gt; B;\n    int G_A = 0, S_A = 0, K_A = 0;\n    int G_B = 0, S_B = 0, K_B = 0;\n    int G_C, S_C, K_C;\n    int cnt = 0;\n    for(int i = 0; i &lt; A.size(); i++) {\n        if(A[i] == '.') cnt++;\n        else if(cnt == 0) G_A = 10 * G_A + A[i] - '0';\n        else if(cnt == 1) S_A = 10 * S_A + A[i] - '0';\n        else if(cnt == 2) K_A = 10 * K_A + A[i] - '0';\n    }\n    cnt = 0;\n    for(int i = 0; i &lt; B.size(); i++) {\n        if(B[i] == '.') cnt++;\n        else if(cnt == 0) G_B = 10 * G_B + B[i] - '0';\n        else if(cnt == 1) S_B = 10 * S_B + B[i] - '0';\n        else if(cnt == 2) K_B = 10 * K_B + B[i] - '0';\n    }\n    G_C = G_A + G_B, S_C = S_A + S_B, K_C = K_A + K_B;\n    S_C += K_C / 29, K_C %= 29;\n    G_C += S_C / 17, S_C %= 17;\n    C = to_string(G_C) + \".\" + to_string(S_C) + \".\" + to_string(K_C);\n    cout &lt;&lt; C;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1061_Dating/","title":"PAT A1061 Dating","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u9898\u76ee\u200b\u9700\u8981\u200b\u7684\u200b\u6a21\u62df\u200b\uff0c\u200b\u4f46\u662f\u200b\u6ce8\u610f\u200b\u5224\u65ad\u200b\u5b57\u6bcd\u200b\u7684\u200b\u8303\u56f4\u200b\uff0c\u200b\u7b2c\u4e00\u6b21\u200b\u4e3a\u200b A ~ G\uff0c\u200b\u7b2c\u4e8c\u6b21\u200b\u4e3a\u200b A ~ N\uff0c\u200b\u7b2c\u4e09\u6b21\u200b\u5219\u200b\u9700\u200b\u8003\u8651\u200b\u5168\u90e8\u200b\u5c0f\u5199\u5b57\u6bcd\u200b\u548c\u200b\u5927\u5199\u5b57\u6bcd\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nstring s1, s2, s3, s4;\n\nstring weekday[7] = {\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"};\n\nbool isNeedCapital(char ch, int op) {\n    if(op == 0) return ch &gt;= 'A' &amp;&amp; ch &lt;= 'G';\n    else if(op == 1) return ch &gt;= 'A' &amp;&amp; ch &lt;= 'N';\n    else if(op == 2) return (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') || (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z');\n    return ch &gt;= '0' &amp;&amp; ch &lt;= '9';\n}\n\nint main() {\n    cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3 &gt;&gt; s4;\n    int len1 = s1.size(), len2 = s2.size();\n    int len3 = s3.size(), len4 = s4.size();\n    int i;\n    for(i = 0; i &lt; len1 &amp;&amp; i &lt; len2; i++) {\n        if(isNeedCapital(s1[i], 0) &amp;&amp; s1[i] == s2[i]) {\n            cout &lt;&lt; weekday[s1[i] - 'A'] &lt;&lt; \" \";\n            break;\n        }\n    }\n    for(i = i + 1; i &lt; len1 &amp;&amp; i &lt; len2; i++) {\n        if(s1[i] == s2[i]) {\n            if(isNeedCapital(s1[i], 1)) {\n                printf(\"%02d:\", s1[i] - 'A' + 10);\n                break;\n            } else if(isNeedCapital(s1[i], 3)) {\n                printf(\"%02d:\", s1[i] - '0');\n                break;\n            }\n        } \n    }\n    for(i = 0; i &lt; len3 &amp;&amp; i &lt; len4; i++) {\n        if(isNeedCapital(s3[i], 2) &amp;&amp; s3[i] == s4[i]) {\n            printf(\"%02d\", i);\n            break;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1065_A%2BB%20and%20C%20%2864bit%29/","title":"PAT A1065 A+B and C (64bit)","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u6ea2\u51fa\u200b\u5224\u65ad\u9898\u200b\uff0c\u200b\u7531\u4e8e\u200b A B C \u200b\u5747\u200b\u5904\u4e8e\u200b long long \u200b\u7684\u200b\u6570\u636e\u200b\u8303\u56f4\u200b\u5185\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b A + B \u200b\u7684\u200b\u771f\u503c\u200b\u5927\u4e8e\u200b long long \u200b\u4e0a\u9650\u200b\uff0c\u200b\u5219\u200b A + B \u200b\u7684\u200b\u771f\u503c\u200b\u4e00\u5b9a\u200b\u5927\u4e8e\u200b C\uff0c\u200b\u6b64\u65f6\u200b A &gt; 0, B &gt; 0, A + B &lt; 0</p> <p>\u200b\u5982\u679c\u200b A + B \u200b\u7684\u200b\u771f\u503c\u200b\u5c0f\u4e8e\u200b long long \u200b\u4e0b\u9650\u200b\uff0c\u200b\u5219\u200b A + B \u200b\u7684\u200b\u771f\u503c\u200b\u4e00\u5b9a\u200b\u5c0f\u4e8e\u200b C\uff0c\u200b\u6b64\u65f6\u200b A &lt; 0, B &lt; 0, A + B &gt; 0 <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int T;\n    long long A, B, C, res;\n    bool flag;\n    cin &gt;&gt; T;\n    for(int i = 1; i &lt;= T; i++) {\n        cin &gt;&gt; A &gt;&gt; B &gt;&gt; C;\n        res = A + B;\n        if(A &gt; 0 &amp;&amp; B &gt; 0 &amp;&amp; res &lt; 0) flag = true;\n        else if(A &lt; 0 &amp;&amp; B &lt; 0 &amp;&amp; res &gt; 0) flag = false;\n        else if(res &gt; C) flag = true;\n        else flag = false;\n        cout &lt;&lt; \"Case #\" &lt;&lt; i &lt;&lt; \": \";\n        if(flag) cout &lt;&lt; \"true\";\n        else cout &lt;&lt; \"false\";\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1073_Scientific%20Notation/","title":"PAT A1073 Scientific Notation","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u76f4\u63a5\u200b\u8fdb\u884c\u200b\u66b4\u529b\u200b\u6a21\u62df\u200b\uff0c\u200b\u6ce8\u610f\u200b\u5168\u7a0b\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u4f7f\u7528\u200b\u6d6e\u70b9\u6570\u200b\u6216\u8005\u200b\u957f\u200b\u6574\u578b\u200b\u4f1a\u200b\u6ea2\u51fa\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    string s;\n    cin &gt;&gt; s;\n    if(s[0] == '-') cout &lt;&lt; \"-\";\n    char first = s[1];\n    int posE = 3;\n    while(s[posE] != 'E') posE++;\n\n    int exp = 0;\n    for(int i = posE + 2; i &lt; s.size(); i++)\n        exp = exp * 10 + s[i] - '0';\n    bool isNeg = (s[posE + 1] == '-');\n    s = s.substr(3, posE - 3);\n\n    if(exp == 0) {\n        cout &lt;&lt; first &lt;&lt; \".\" &lt;&lt; s;\n    } else if(!isNeg) {\n        if(exp &gt;= s.size()) {\n            cout &lt;&lt; first &lt;&lt; s;\n            for(int i = 0; i &lt; exp - s.size(); i++)\n                cout &lt;&lt; \"0\";\n        } else {\n            cout &lt;&lt; first &lt;&lt; s.substr(0, exp) &lt;&lt; \".\" &lt;&lt; s.substr(exp);\n        }\n    } else {\n        cout &lt;&lt; \"0.\";\n        exp--;\n        for(int i = 0; i &lt; exp; i++)\n            cout &lt;&lt; \"0\";\n        cout &lt;&lt; first &lt;&lt; s;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1077_Kuchiguse/","title":"PAT A1077 Kuchiguse","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b\u8f93\u5165\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u8fdb\u884c\u200b\u53cd\u8f6c\u200b\uff0c\u200b\u5c06\u200b\u95ee\u9898\u200b\u8f6c\u5316\u200b\u4e3a\u6c42\u200b\u6700\u957f\u200b\u516c\u5171\u200b\u524d\u7f00\u200b\u5b50\u4e32\u200b\u3002\u200b\u6ce8\u610f\u200b\u4f7f\u7528\u200b getline \u200b\u51fd\u6570\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4f7f\u7528\u200b getchar \u200b\u51fd\u6570\u200b\u6765\u200b\u63a5\u6536\u200b\u6362\u884c\u7b26\u200b\uff0c\u200b\u5426\u5219\u200b\u8f93\u5165\u200b\u4f1a\u5c11\u200b\u4e00\u884c\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nvector&lt;string&gt; res;\n\nint main() {\n    int N, minLen = 300, ans = 0;\n    cin &gt;&gt; N;\n    getchar();\n    string temp;\n    for(int i = 0; i &lt; N; i++) {\n        getline(cin, temp);\n        reverse(temp.begin(), temp.end());\n        res.push_back(temp);\n        if(temp.size() &lt; minLen) minLen = temp.size();\n    }\n    for(int i = 0; i &lt; minLen; i++) {\n        char ch = res[0][i];\n        bool isSame = true;\n        for(int j = 1; j &lt; N; j++) {\n            if(ch != res[j][i]) {\n                isSame = false;\n                break;\n            }\n        }\n        if(isSame) ans++;\n        else break;\n    }\n    if(ans)\n        for(int i = ans - 1; i &gt;= 0; i--)\n            cout &lt;&lt; res[0][i];\n    else cout &lt;&lt; \"nai\";\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1082_Read%20Number%20in%20Chinese/","title":"PAT A1082 Read Number in Chinese","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6ce8\u610f\u200b\u4ee5\u200b\u56db\u4e2a\u200b\u4e3a\u200b\u4e00\u8282\u200b\uff0c\u200b\u5171\u6709\u200b\u4e2a\u8282\u200b\uff0c\u200b\u4e07\u8282\u200b\uff0c\u200b\u4ebf\u8282\u200b\u3002\u200b\u6ce8\u610f\u200b\u9664\u4e86\u200b\u6700\u540e\u200b\u4e2a\u200b\u4f4d\u200b\uff0c\u200b\u6bcf\u200b\u4e00\u8282\u200b\u7684\u200b\u672b\u5c3e\u200b\u8f93\u51fa\u200b\u4e07\u200b\u6216\u8005\u200b\u4ebf\u200b\uff0c\u200b\u6b64\u5916\u200b\u8981\u200b\u6ce8\u610f\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u4e2d\u95f4\u200b\u7684\u200b\u96f6\u200b\u3002\u200b\u5c5e\u4e8e\u200b\u6bd4\u8f83\u200b\u7ed5\u200b\u7684\u200b\u6a21\u62df\u9898\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nvector&lt;string&gt; num = {\"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"};\nvector&lt;string&gt; wei = {\"Shi\", \"Bai\", \"Qian\", \"Wan\", \"Yi\"};\n\nint main() {\n    string s;\n    cin &gt;&gt; s;\n    int left = 0, right = s.size() - 1;\n    if(s[0] == '-') {\n        cout &lt;&lt; \"Fu\";\n        left++;\n    }\n    while(left + 4 &lt;= right) right -= 4;\n    while(left &lt; s.size()) {\n        bool flag = false;\n        bool isPrint = false;\n        while(left &lt;= right) {\n            if(left &gt; 0 &amp;&amp; s[left] == '0') {\n                flag = true;\n            } else {\n                if(flag) {\n                    cout &lt;&lt; \" ling\";\n                    flag = false;\n                }\n                if(left &gt; 0) cout &lt;&lt; \" \";\n                cout &lt;&lt; num[s[left] - '0'];\n                // \u200b\u8be5\u8282\u200b\u4e2d\u200b\u81f3\u5c11\u200b\u8f93\u51fa\u200b\u4e00\u4f4d\u200b\u624d\u200b\u53ef\u80fd\u200b\u8f93\u51fa\u200b\u4e07\u200b\u6216\u200b\u4ebf\u200b\n                isPrint = true; \n                // \u200b\u67d0\u8282\u200b\u4e2d\u200b\u9664\u4e86\u200b\u4e2a\u200b\u4f4d\u200b\uff0c\u200b\u90fd\u200b\u8981\u200b\u8f93\u51fa\u200b\u5341\u767e\u200b\u5343\u200b\n                if(left != right) cout &lt;&lt; \" \" &lt;&lt; wei[right - left - 1];\n            }\n            left++;\n        }\n        // \u200b\u53ea\u8981\u200b\u4e0d\u662f\u200b\u4e2a\u200b\u4f4d\u200b\uff0c\u200b\u5c31\u200b\u8f93\u51fa\u200b\u4e07\u200b\u6216\u8005\u200b\u4ebf\u200b\n        if(isPrint &amp;&amp; right != s.size() - 1) \n            cout &lt;&lt; \" \" &lt;&lt; wei[(s.size() - 1 - right) / 4 + 2];\n        right += 4;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%A8%E6%95%B0/PAT%20A1059_Prime%20Factors/","title":"PAT A1059 Prime Factors","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5bf9\u200bint\u200b\u8303\u56f4\u200b\u5185\u200b\u7684\u200b\u6574\u6570\u200b\u8fdb\u884c\u200b\u8d28\u200b\u56e0\u6570\u5206\u89e3\u200b\uff0c\u200b\u91c7\u7528\u200b\u6253\u200b\u8d28\u6570\u200b\u8868\u6cd5\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\u7531\u4e8e\u200b\u524d\u200b10\u200b\u4e2a\u200b\u8d28\u6570\u200b\u4e58\u79ef\u200b\u5df2\u7ecf\u200b\u8d85\u8fc7\u200bint\u200b\u6700\u5927\u503c\u200b\u8303\u56f4\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5f00\u8f9f\u200bFactors\u200b\u5927\u5c0f\u200b\u4e3a\u200b10\u200b\u6765\u200b\u8bb0\u5f55\u200b\u6bcf\u4e2a\u200b\u8d28\u6570\u200b\u53ca\u5176\u200b\u91cd\u590d\u200b\u6b21\u6570\u200b\u3002</p> <p>\u200b\u800c\u200b\u7531\u4e8e\u200b\u8d28\u200b\u56e0\u5b50\u200b\u5173\u4e8e\u200bsqrt(n)\u200b\u7684\u200b\u5bf9\u79f0\u200b\u6027\u8d28\u200b\uff0c\u200b\u82e5\u200b\u5f53\u524d\u200b\u8d28\u200b\u56e0\u5b50\u200b&gt;sqrt(n)\u200b\u65f6\u200b\uff0c\u200b\u53ef\u200b\u5224\u65ad\u200bn\u200b\u672c\u8eab\u200b\u5373\u200b\u4e3a\u200b\u8d28\u6570\u200b\u3002</p> <pre><code>#include&lt;cstdio&gt;\n\nconst int maxn = 100010;\n\nint prime[maxn];\nint pnum = 0;\n\nbool is_prime(int x) {\n    if(x &lt;= 1) return false;\n    for(int i = 2; i*i &lt;= x; i++) {\n        if(x % i == 0) return false;\n    }\n    return true;\n}\n\nvoid FindPrime() {\n    for(int i = 2; i &lt; maxn; i++) {\n        if(is_prime(i) == true) {\n            prime[pnum++] = i;\n        }\n    }\n}\n\ntypedef struct {\n    int x;\n    int cnt;\n} Factors;\n\nFactors fac[10];\n\nint main() {\n    FindPrime();\n    int n, num = 0;\n    scanf(\"%d\", &amp;n);\n    if(n == 1) {\n        printf(\"1=1\");\n        return 0;\n    }\n    printf(\"%d=\", n);\n    for(int i = 0; i &lt; pnum &amp;&amp; prime[i] * prime[i] &lt;= n; i++) {\n        if(n % prime[i] == 0) {\n            fac[num].x = prime[i];\n            fac[num].cnt = 0;\n            while(n % prime[i] == 0) {\n                fac[num].cnt++;\n                n /= prime[i];\n            }\n            num++;\n        }\n    }\n    if(n &gt; 1) {\n        fac[num].x = n;\n        fac[num++].cnt = 1;\n    }\n    for(int i = 0; i &lt; num; i++) {\n        printf(\"%d\", fac[i].x);\n        if(fac[i].cnt &gt; 1)\n            printf(\"^%d\", fac[i].cnt);\n        if(i &lt; num - 1) printf(\"*\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%A8%E6%95%B0/PAT%20B1013_%E6%95%B0%E7%B4%A0%E6%95%B0/","title":"PAT B1013 \u200b\u6570\u200b\u7d20\u6570","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6c42\u200b\u7b2c\u200bM\u200b\u5230\u200b\u7b2c\u200bN\u200b\u4e2a\u200b\u7d20\u6570\u200b\uff0c\u200b\u91c7\u7528\u200b\u7d20\u6570\u200b\u7b5b\u6cd5\u200b\uff0c\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u4ece\u200b2\u200b\u5f00\u59cb\u200b\u505a\u200b\u589e\u91cf\u200b\u6392\u9664\u200b4\uff0c6\uff0c8\uff0c10\u200b\u7b49\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n\nconst int maxn = 1000001;\nint prime[maxn];\nbool not_prime[maxn];\nint num;\n\nvoid FindPrime(int n) {\n    for(int i = 2; i &lt; maxn; i++) {\n        if(not_prime[i] == false) {\n            prime[num++] = i;\n            if(num &gt;= n) break;\n            for(int j = i + i; j &lt; maxn; j += i) {\n                not_prime[j] = true;\n            }\n        }\n    }\n}\n\nint main() {\n    int M, N;\n    scanf(\"%d %d\", &amp;M, &amp;N);\n    FindPrime(N);\n    int cnt = 0;\n    for(int i = M; i &lt;= N; i++) {\n        printf(\"%d\", prime[i-1]);\n        cnt++;\n        if(cnt % 10 != 0 &amp;&amp; i &lt; N) printf(\" \");\n        else printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%203216.%E4%BA%A4%E6%8D%A2%E5%90%8E%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"LeetCode 3216.\u200b\u4ea4\u6362\u200b\u540e\u200b\u5b57\u5178\u200b\u5e8f\u200b\u6700\u5c0f\u200b\u7684\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u53ea\u200b\u4ea4\u6362\u200b\u4e00\u6b21\u200b\u8ba9\u200b\u5b57\u5178\u200b\u5e8f\u200b\u6700\u5c0f\u200b\uff0c\u200b\u9700\u8981\u200b\u6ee1\u8db3\u200b\u4e0b\u5217\u200b\u6761\u4ef6\u200b</p> <ol> <li>\u200b\u5947\u5076\u6027\u200b\u76f8\u540c\u200b\uff0c\u200b\u5373\u200b\u7edd\u5bf9\u503c\u200b\u4e4b\u5dee\u200b\u7b49\u4e8e\u200b 2</li> <li>\u200b\u4ea4\u6362\u200b\u524d\u200b\u7684\u200b\u6570\u5b57\u200b\u5fc5\u987b\u200b\u5de6\u8fb9\u200b\u5927\u4e8e\u200b\u53f3\u8fb9\u200b\uff0c\u200b\u4ea4\u6362\u200b\u540e\u200b\u624d\u80fd\u200b\u5b57\u5178\u200b\u5e8f\u200b\u53d8\u5c0f\u200b</li> <li>\u200b\u4ea4\u6362\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u8d8a\u200b\u9760\u8fd1\u200b\u9ad8\u4f4d\u200b\u8d8a\u200b\u597d\u200b\uff0c\u200b\u5373\u8d8a\u200b\u9760\u8fd1\u200b\u5de6\u8fb9\u200b\u8d8a\u200b\u597d\u200b</li> </ol> <pre><code>class Solution:\n    def getSmallestString(self, s: str) -&gt; str:\n        t = list(s)\n        for i in range(0, len(t) - 1):\n            x, y = t[i], t[i + 1]\n            if x &gt; y and (ord(x) - ord(y)) % 2 == 0:\n                t[i], t[i + 1] = y, x\n                break\n        return ''.join(t)\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%20670.%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/","title":"LeetCode 670.\u200b\u6700\u5927\u200b\u4ea4\u6362","text":"<p>\u200b\u53ea\u200b\u4ea4\u6362\u200b\u4e00\u6b21\u200b\u8ba9\u200b\u6240\u5f97\u200b\u6570\u5b57\u200b\u6700\u5927\u200b\uff0c\u200b\u5373\u5c06\u200b\u9760\u5de6\u200b\u7684\u200b\u5c0f\u200b\u6570\u5b57\u200b\u4e0e\u200b\u9760\u53f3\u200b\u7684\u200b\u5927\u200b\u6570\u5b57\u200b\u4ea4\u6362\u200b</p> <ol> <li>\u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u5bfb\u627e\u200b\u7b2c\u4e00\u4e2a\u200b\u6700\u5927\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u4e0b\u6807\u200b maxIdx\uff0c\u200b\u5373\u5927\u200b\u6570\u5b57\u200b\u4f18\u5148\u200b\u9760\u53f3\u200b</li> <li>\u200b\u904d\u5386\u200b\u7684\u200b\u540c\u65f6\u200b\u67e5\u770b\u200b num[i] \u200b\u662f\u5426\u200b\u5c0f\u4e8e\u200b num[maxIdx]\uff0c\u200b\u5373\u200b\u5c0f\u200b\u6570\u5b57\u200b\u4f18\u5148\u200b\u9760\u5de6\u200b</li> <li>\u200b\u82e5\u200b num[i] &lt; num[maxIdx]\uff0c\u200b\u8bb0\u5f55\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u4e0b\u6807\u200b\u4fdd\u5b58\u200b\u5728\u200b p\uff0cq \u200b\u4e2d\u200b</li> <li>i \u200b\u9700\u8981\u200b\u8d8a\u200b\u9760\u5de6\u200b\u8d8a\u200b\u597d\u200b\uff0cmaxIdx \u200b\u9700\u8981\u200b\u8d8a\u200b\u9760\u53f3\u200b\u8d8a\u200b\u597d\u200b</li> <li>\u200b\u82e5\u200b\u6570\u5b57\u200b\u4e3a\u200b\u964d\u5e8f\u200b\u6392\u5e8f\u200b\uff0c\u200b\u5219\u200b\u672a\u200b\u53d1\u751f\u200b\u4ea4\u6362\u200b\uff0c\u200b\u53ef\u200b\u5c06\u200b p\uff0cq \u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b n - 1 \u200b\u6765\u200b\u514d\u53bb\u200b\u7279\u6b8a\u200b\u5224\u65ad\u200b</li> </ol> <pre><code>class Solution:\n    def maximumSwap(self, num: int) -&gt; int:\n        num_str = str(num)\n        p = q = max_idx = len(num_str) - 1\n        for i in range(len(num_str) - 2, -1, -1):\n            if num_str[i] &gt; num_str[max_idx]:\n                max_idx = i\n            elif num_str[i] &lt; num_str[max_idx]:\n                p, q = i, max_idx\n        num_list = list(num_str)\n        num_list[p], num_list[q] = num_list[q], num_list[p]\n        return int(''.join(num_list))\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1033_To%20Fill%20or%20Not%20to%20Fill/","title":"PAT A1033 To Fill or Not to Fill","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6ce8\u610f\u200b\u6839\u636e\u200b\u8d2a\u5fc3\u200b\u7b56\u7565\u200b\uff0c\u200b\u5c06\u200b\u52a0\u6cb9\u7ad9\u200b\u6839\u636e\u200b\u8ddd\u79bb\u200b\u7684\u200b\u8fdc\u8fd1\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002\u200b\u7531\u4e8e\u200b\u521d\u59cb\u200b\u6cb9\u7bb1\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u82e5\u200b\u6700\u521d\u200b\u7684\u200b\u52a0\u6cb9\u7ad9\u200b\u8ddd\u79bb\u200b\u4e0d\u200b\u4e3a\u200b 0\uff0c\u200b\u5219\u200b\u65e0\u6cd5\u200b\u5230\u8fbe\u200b\u76ee\u7684\u5730\u200b\u3002</p> <p>\u200b\u4ece\u200b 0 \u200b\u53f7\u200b\u52a0\u6cb9\u7ad9\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\uff0c\u200b\u904d\u5386\u200b\u80fd\u200b\u5230\u8fbe\u200b\u4e14\u200b\u6cb9\u4ef7\u200b\u6700\u4f4e\u200b\uff08\u200b\u9664\u4e86\u200b\u5f53\u524d\u200b\u6cb9\u4ef7\u200b\uff09\u200b\u7684\u200b\u52a0\u6cb9\u7ad9\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u76ee\u7684\u200b\u52a0\u6cb9\u7ad9\u200b\u3002</p> <p>\u200b\u82e5\u200b\u904d\u5386\u200b\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u5c0f\u4e8e\u200b\u5f53\u524d\u200b\u6cb9\u4ef7\u200b\u7684\u200b\u52a0\u6cb9\u7ad9\u200b A\uff0c\u200b\u7acb\u523b\u200b\u7ed3\u675f\u200b\u904d\u5386\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5f53\u524d\u200b\u52a0\u6cb9\u7ad9\u200b\u52a0\u200b\u5230\u200b\u521a\u597d\u200b\u5230\u200b A \u200b\u7684\u200b\u6cb9\u91cf\u200b\uff0c\u200b\u5230\u8fbe\u200b A \u200b\u4e4b\u540e\u200b\u4f7f\u7528\u200b\u7684\u200b\u6cb9\u4ef7\u683c\u200b\u66f4\u200b\u4f4e\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstdio&gt;\nusing namespace std;\n\nconst int MAXN = 505;\nconst int INF = 1e9;\n\ntypedef struct {\n    double price, dist;\n} Station;\n\nStation st[MAXN];\ndouble C_max, D, D_avg;\nint N;\n\nbool cmp(Station a, Station b) {\n    return a.dist &lt; b.dist;\n}\n\nint main() {\n    cin &gt;&gt; C_max &gt;&gt; D &gt;&gt; D_avg &gt;&gt; N;\n    for(int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; st[i].price &gt;&gt; st[i].dist;\n    }\n    st[N].price = 0;\n    st[N].dist = D;\n    sort(st, st + N, cmp);\n    if(st[0].dist != 0) {\n        printf(\"The maximum travel distance = 0.00\\n\");\n        return 0;\n    }\n    double ans = 0, nowTank = 0, maxDist = C_max * D_avg;\n    int nowStation = 0;\n    while(nowStation &lt; N) {\n        int idx = -1;\n        double minPrice = INF;\n        for(int i = nowStation + 1; i &lt;= N &amp;&amp;\n            st[i].dist - st[nowStation].dist &lt;= maxDist; i++) {\n            if(st[i].price &lt; minPrice) {\n                minPrice = st[i].price;\n                idx = i;\n                // \u200b\u73b0\u5728\u200b\u4e0d\u200b\u52a0\u6ee1\u200b\uff0c\u200b\u52a0\u200b\u5230\u200b\u521a\u597d\u200b\u591f\u200b\u66f4\u200b\u4f4e\u4ef7\u200b\u7684\u200b\u4e0b\u200b\u4e00\u7ad9\u200b\n                if(minPrice &lt; st[nowStation].price) {\n                    break;\n                }\n            }\n        }\n        if(idx == -1) break;\n        double needTank = (st[idx].dist - st[nowStation].dist) / D_avg;\n        if(minPrice &lt; st[nowStation].price) {\n            if(nowTank &lt; needTank) {\n                ans += (needTank - nowTank) * st[nowStation].price;\n                nowTank = 0;\n            } else {\n                nowTank -= needTank;\n            }\n        } else {\n            ans += (C_max - nowTank) * st[nowStation].price;\n            nowTank = C_max - needTank;\n        }\n        nowStation = idx;\n    }\n    if(nowStation == N) {\n        printf(\"%.2f\\n\", ans);\n    } else {\n        printf(\"The maximum travel distance = %.2f\\n\", st[nowStation].dist + maxDist);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1070_Mooncake/","title":"PAT A1070 Mooncake","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7b80\u5355\u200b\u7684\u200b\u8d2a\u5fc3\u200b\u7b56\u7565\u200b\uff0c\u200b\u4f18\u5148\u200b\u5356\u51fa\u200b\u5355\u4ef7\u200b\u6700\u9ad8\u200b\u7684\u200b\u6708\u997c\u200b\u3002</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\n\ntypedef struct {\n    double store, totalPrice, price;\n} Mooncake;\n\nMooncake mc[MAXN];\n\nint n, totalNeed;\n\nbool cmp(Mooncake a, Mooncake b) {\n    return a.price &gt; b.price;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; totalNeed;\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; mc[i].store;\n    }\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; mc[i].totalPrice;\n        mc[i].price = mc[i].totalPrice / mc[i].store;\n    }\n    sort(mc, mc + n, cmp);\n    double ans = 0;\n    for(int i = 0; i &lt; n; i++) {\n        if(mc[i].store &lt;= totalNeed) {\n            totalNeed -= mc[i].store;\n            ans += mc[i].totalPrice;\n        } else {\n            ans += mc[i].price * totalNeed;\n            break;\n        }\n    }\n    printf(\"%.2f\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E9%80%92%E6%8E%A8/PAT%20A1001_Quick%20Sort/","title":"PAT A1001 Quick Sort","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u4e0e\u200bA1093\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u9488\u5bf9\u200b\u6bcf\u4e2a\u200b\u6570\u200b\u7edf\u8ba1\u200b\u5176\u200b\u5de6\u8fb9\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u4ee5\u53ca\u200b\u53f3\u8fb9\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\u3002\u200b\u5982\u679c\u200b\u6ee1\u8db3\u200b\u5f53\u524d\u200b\u6570\u200b\u5927\u4e8e\u200b\u5de6\u8fb9\u200b\u6700\u5927\u503c\u200b\u4e14\u200b\u5c0f\u4e8e\u200b\u53f3\u8fb9\u200b\u6700\u5c0f\u503c\u200b\uff0c\u200b\u5219\u200b\u6ee1\u8db3\u6761\u4ef6\u200b\u3002</p> <p>\u200b\u6700\u5927\u503c\u200b\u7528\u200b\u6570\u7ec4\u200b\u7edf\u8ba1\u200b\uff0c\u200b\u6700\u5c0f\u503c\u200b\u53ea\u8bbe\u200b\u53d8\u91cf\u200brightMin\uff0c\u200b\u5728\u200b\u7edf\u8ba1\u200brightMin\u200b\u7684\u200b\u5faa\u73af\u200b\u4e2d\u200b\u7edf\u8ba1\u200b\u6ee1\u8db3\u8981\u6c42\u200b\u7684\u200b\u4e0b\u6807\u200b\u8fdb\u800c\u200b\u5f97\u51fa\u200b\u7b54\u6848\u200b\u3002</p> <p>\u200b\u76f8\u4f3c\u200b\u9898\u76ee\u200b\uff1aPAT A1093 CountPATs <pre><code>#include&lt;cstdio&gt;\n#define MAXN 100005\n\nint nums[MAXN];\nint leftMAX[MAXN];\nint ans[MAXN];\n\nint main() {\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d\", &amp;nums[i]);\n    }\n    leftMAX[0] = nums[0];\n    for(int i = 1; i &lt; n; i++) {\n        leftMAX[i] = leftMAX[i-1];\n        if(nums[i] &gt; leftMAX[i]) {\n            leftMAX[i] = nums[i];\n        }\n    }\n    int count = 0;\n    int rightMin = nums[n-1];\n    for(int i = n-1; i &gt;= 0; i--) {\n        if(nums[i] &lt;= rightMin) {\n            rightMin = nums[i];\n            if(nums[i] &gt;= leftMAX[i]) {\n                ans[count++] = i;\n            }\n        }\n    }\n    printf(\"%d\\n\", count);\n    for(int i = count-1; i &gt;= 0; i--) {\n        printf(\"%d\", nums[ans[i]]);\n        if(i &gt; 0) printf(\" \");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%80%92%E6%8E%A8/PAT%20A1093_CountPATs/","title":"PAT A1093 CountPATs","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u9488\u5bf9\u200b\u6bcf\u4e2a\u200b\u7279\u5b9a\u200b\u7684\u200bA\uff0c\u200b\u7edf\u8ba1\u200b\u5176\u200b\u5de6\u4fa7\u200bP\u200b\u7684\u200b\u6570\u91cf\u200b\u548c\u200b\u53f3\u4fa7\u200bT\u200b\u7684\u200b\u6570\u91cf\u200b\uff0c\u200b\u5bf9\u200b\u7b54\u6848\u200b\u7684\u200b\u8d21\u732e\u200b\u4e3a\u200bP*T\u200b\u7684\u200b\u503c\u200b\u3002P\u200b\u7684\u200b\u6570\u91cf\u200b\u91c7\u7528\u200b\u6570\u7ec4\u200b\uff0cans\u200b\u5728\u200b\u7edf\u8ba1\u200bT\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8ba1\u7b97\u200b\u51fa\u200b\u3002</p> <p>\u200b\u76f8\u4f3c\u200b\u9898\u76ee\u200b\uff1aPAT A1001 Quick Sort <pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#define MAXN 100005\n#define MOD 1000000007\n\nint leftNum[MAXN];\nchar str[MAXN];\n\nint main() {\n    fgets(str, MAXN, stdin);\n    int len = strlen(str);\n    if(str[0] == 'P') leftNum[0] = 1;\n    for(int i = 1; i &lt; len; i++) {\n        leftNum[i] = leftNum[i-1];\n        if(str[i] == 'P') leftNum[i]++;\n    }\n    int rightNum = 0;\n    int ans = 0;\n    for(int i = len-1; i &gt;= 0; i--) {\n        if(str[i] == 'T') {\n            rightNum++;\n        } else if(str[i] == 'A') {\n            ans = (ans + (leftNum[i] * rightNum) % MOD) % MOD;\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/PAT%20A1032_Sharing/","title":"PAT A1032 Sharing","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u5c06\u200b\u8f93\u5165\u200b\u7684\u200b\u94fe\u8868\u200b\u7528\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u5b58\u50a8\u200b\uff0c\u200b\u5bf9\u200b\u7b2c\u4e00\u6761\u200b\u94fe\u8868\u200b\u7684\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\u91c7\u7528\u200bflag\u200b\u6807\u8bb0\u200b\uff0c\u200b\u5728\u200b\u904d\u5386\u200b\u7b2c\u4e8c\u6761\u200b\u94fe\u8868\u200b\u65f6\u200b\u68c0\u67e5\u200b\u8be5\u200b\u6807\u8bb0\u200b\uff0c\u200b\u51fa\u73b0\u200b\u6807\u8bb0\u200b\u5373\u200b\u4e3a\u200b\u7b2c\u4e00\u4e2a\u200b\u91cd\u5408\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u5426\u5219\u200b\u4e24\u4e2a\u200b\u94fe\u8868\u200b\u4e0d\u200b\u5b58\u5728\u200b\u91cd\u5408\u200b\u7684\u200b\u7ed3\u70b9\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n\nconst int maxn = 100005;\n\ntypedef struct {\n    bool flag;\n    char data;\n    int next;\n} Node;\n\nNode node[maxn];\n\nint main() {\n    int s1, s2, n;\n    scanf(\"%d %d %d\", &amp;s1, &amp;s2, &amp;n);\n    int addr, next;\n    char data;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d %c %d\", &amp;addr, &amp;data, &amp;next);\n        node[addr].data = data;\n        node[addr].next = next;\n    }\n    while(s1 != -1) {\n        node[s1].flag = true;\n        s1 = node[s1].next;\n    }\n    while(s2 != -1) {\n        if(node[s2].flag == true) {\n            break;\n        }\n        s2 = node[s2].next;\n    }\n    if(s2 != -1) {\n        printf(\"%05d\", s2);\n    } else {\n        printf(\"-1\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/PAT%20A1052_Linked%20List%20Sorting/","title":"PAT A1052 Linked List Sorting","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7531\u4e8e\u200b\u9898\u76ee\u200b\u6240\u200b\u7ed9\u200b\u7ed3\u70b9\u200b\u4e2d\u200b\u952e\u503c\u200b\u552f\u4e00\u200b\uff0c\u200b\u53ef\u200b\u76f4\u63a5\u200b\u6839\u636e\u200b\u952e\u503c\u200b\u6392\u5e8f\u200b\uff0c\u200b\u6ce8\u610f\u200b\u8f93\u5165\u200b\u4e2d\u200b\u7684\u200b\u7ed3\u70b9\u200b\u53ef\u80fd\u200b\u5e76\u200b\u4e0d\u200b\u5c5e\u4e8e\u200b\u94fe\u8868\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200bNode\u200b\u4e2d\u200b\u6dfb\u52a0\u200bflag\u200b\u6807\u5fd7\u200b\u67e5\u770b\u200b\u662f\u5426\u200b\u5904\u4e8e\u200b\u9898\u76ee\u200b\u7684\u200b\u94fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u6b64\u200b\u7f16\u5199\u200bcmp\u200b\u51fd\u6570\u200b\u5c06\u200b\u5176\u200b\u6392\u5e8f\u200b\u5230\u200b\u672b\u5c3e\u200b\u3002</p> <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int maxn = 100005;\n\ntypedef struct {\n    int addr;\n    int data;\n    int next;\n    bool flag;\n} Node;\n\nNode node[maxn];\n\nbool cmp(Node a, Node b) {\n    if(a.flag == false || b.flag == false) {\n        return a.flag &gt; b.flag;\n    }\n    return a.data &lt; b.data;\n}\n\nint main() {\n    int n, s1;\n    scanf(\"%d %d\", &amp;n, &amp;s1);\n    int addr, data, next;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d %d %d\", &amp;addr, &amp;data, &amp;next);\n        node[addr].addr = addr;\n        node[addr].data = data;\n        node[addr].next = next;\n        node[addr].flag = false;\n    }\n    int p = s1, cnt = 0;\n    while(p != -1) {\n        node[p].flag = true;\n        p = node[p].next;\n        cnt++;\n    }\n    if(cnt == 0) printf(\"0 -1\\n\");\n    else {\n        sort(node, node + maxn, cmp);\n        printf(\"%d %05d\\n\", cnt, node[0].addr);\n        for(int i = 0; i &lt; cnt; i++) {\n            if(i &lt; cnt-1) {\n                printf(\"%05d %d %05d\\n\", node[i].addr, node[i].data, node[i+1].addr);\n            } else {\n                printf(\"%05d %d -1\\n\", node[i].addr, node[i].data);\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/PAT%20A1097_Deduplication%20on%20a%20Linked%20List/","title":"PAT A1097 Deduplication on a Linked List","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u904d\u5386\u200b\u7ed9\u51fa\u200b\u7684\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200b\u6807\u8bb0\u200b\u6570\u7ec4\u200b\u8bb0\u5f55\u200b\u6bcf\u4e2a\u200b\u952e\u503c\u200b\u662f\u5426\u200b\u5df2\u7ecf\u200b\u51fa\u73b0\u200b\u8fc7\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b\u7ed3\u70b9\u200b\u8d4b\u4e88\u200b\u4e00\u4e2a\u200border\u200b\u6392\u5e8f\u200b\u503c\u200b\uff0c\u200b\u521d\u59cb\u200b\u65f6\u200b\u6240\u6709\u200b\u7ed3\u70b9\u200b\u7684\u200border\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b2*maxn\uff0c\u200b\u672a\u200b\u51fa\u73b0\u200b\u8fc7\u200b\u7684\u200b\u952e\u503c\u200b\u7ed3\u70b9\u200b\u8d4b\u503c\u200bvalid\u200b\u4ece\u200b0\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6700\u7ec8\u200b\u503c\u4e3a\u200b\u6709\u6548\u200b\u7ed3\u70b9\u200b\u7684\u200b\u6570\u91cf\u200b\u3002</p> <p>\u200b\u51fa\u73b0\u200b\u8fc7\u8981\u200b\u88ab\u200b\u5220\u9664\u200b\u7684\u200b\u7ed3\u70b9\u200b\u952e\u503c\u200b\u6309\u7167\u200bremoved + maxn\u200b\u8fdb\u884c\u200b\u8d4b\u503c\u200b\uff0cremoved\u200b\u4ece\u200b0\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6700\u7ec8\u200b\u503c\u4e3a\u200b\u88ab\u200b\u5220\u9664\u200b\u7684\u200b\u7ed3\u70b9\u200b\u6570\u91cf\u200b\u3002\u200b\u8c03\u7528\u200bsort\u200b\u6309\u7167\u200border\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int maxn = 100005;\nconst int table_size = 10005;\ntypedef struct {\n    int addr, key, next, order;\n} Node;\n\nNode node[maxn];\nbool keyExist[table_size];\n\nint abs(int x) {\n    if(x &gt; 0) return x;\n    return -x;\n}\n\nbool cmp(Node a, Node b) {\n    return a.order &lt; b.order;\n}\n\nint main() {\n    int s1, n;\n    scanf(\"%d %d\", &amp;s1, &amp;n);\n    int addr, key, next;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d %d %d\", &amp;addr, &amp;key, &amp;next);\n        node[addr].addr = addr;\n        node[addr].key = key;\n        node[addr].next = next;\n    }\n    for(int i = 0; i &lt; maxn; i++)\n        node[i].order = 2 * maxn;\n    int valid = 0, removed = 0, p = s1, data;\n    while(p != -1) {\n        data = abs(node[p].key);\n        if(!keyExist[data]) {\n            keyExist[data] = true;\n            node[p].order = valid++;\n        } else {\n            node[p].order = maxn + removed++;\n        }\n        p = node[p].next;\n    }\n    sort(node, node + maxn, cmp);\n    int total = valid + removed;\n    for(int i = 0; i &lt; total; i++) {\n        if(i != valid - 1 &amp;&amp; i != total - 1) \n            printf(\"%05d %d %05d\\n\", node[i].addr, node[i].key, node[i + 1].addr);   \n        else \n            printf(\"%05d %d -1\\n\", node[i].addr, node[i].key);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/LeetCode%2025.K%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","title":"LeetCode 25.K\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868","text":"<p>\u200b\u601d\u8def\u200b\uff1ap0\u200b\u8bbe\u4e3a\u200b\u4e0a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u8bbe\u7f6e\u200bdummy\u200b\u8282\u70b9\u200b\u4f5c\u4e3a\u200b\u54e8\u5175\u200b\uff0c\u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u5c40\u90e8\u200b\u53cd\u8f6c\u200b\u5b8c\u7ec4\u5185\u200b\u94fe\u8868\u200b\u540e\u200b\uff0c\u200b\u518d\u200b\u5b8c\u5584\u200b\u7ec4\u200b\u4e4b\u95f4\u200b\u7684\u200b\u53cd\u8f6c\u200b\u5173\u7cfb\u200b\u3002 <pre><code>class Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode* dummy = new ListNode(0);\n        dummy-&gt;next = head;\n        ListNode* cur = head, *pre = NULL, *next, *p0 = dummy;\n        int n = 0;\n        while(cur) {\n            n++;\n            cur = cur-&gt;next;\n        }\n        cur = head;\n        while(n &gt;= k) {\n            n -= k;\n            for(int i = 0; i &lt; k; i++) {\n                next = cur-&gt;next;\n                cur-&gt;next = pre;\n                pre = cur;\n                cur = next;\n            }\n            next = p0-&gt;next;\n            p0-&gt;next-&gt;next = cur;\n            p0-&gt;next = pre;\n            p0 = next;\n        }\n        return dummy-&gt;next;\n    }\n};\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/PAT%20A1074_Reversing%20Linked%20List/","title":"PAT A1074 Reversing Linked List","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u7531\u4e8e\u200bPAT\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u7684\u200b\u7279\u6b8a\u6027\u200b\uff0c\u200b\u672c\u9898\u200b\u8003\u8651\u200b\u7528\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u6765\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u6709\u200b\u65e0\u6548\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u56e0\u6b64\u200b\u9700\u8981\u200b\u53bf\u200b\u904d\u5386\u200b\u4e00\u6b21\u200b\u5e76\u4e14\u200b\u786e\u5b9a\u200b\u6709\u6548\u200b\u7ed3\u70b9\u200b\u6570\u200border\uff0c\u200b\u5e76\u4e14\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u6709\u6548\u200b\u7ed3\u70b9\u200b\u9644\u4e0a\u200b\u987a\u5e8f\u200b\u6807\u8bb0\u200b\u3002</p> <p>\u200b\u6839\u636e\u200b\u987a\u5e8f\u200b\u6807\u8bb0\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u540e\u200b\u76f4\u63a5\u200b\u5bf9\u200b\u9759\u6001\u200b\u94fe\u8868\u200b\u6570\u7ec4\u200b\u4e2d\u524d\u200border\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u8fdb\u884c\u200b\u8f93\u51fa\u200b\uff0c\u200b\u6bcf\u200bk\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u5012\u5e8f\u200b\u8f93\u51fa\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u7ec4\u200b\u82e5\u200b\u4e0d\u200b\u6ee1\u8db3\u200bk\u200b\u4e2a\u200b\u7ed3\u70b9\u200b\u5219\u200b\u6309\u200b\u6b63\u5e38\u200b\u987a\u5e8f\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u76f8\u4f3c\u200b\u9898\u76ee\u200b\uff1aLeetCode 25.K\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b <pre><code>#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int maxn = 100005;\ntypedef struct {\n    int addr, data, next;\n    int order;\n} Node;\nNode node[maxn];\nbool cmp(Node a, Node b) {\n    return a.order &lt; b.order;\n}\nint main() {\n    int s1, n, k;\n    scanf(\"%d %d %d\", &amp;s1, &amp;n, &amp;k);\n    int addr, data, next;\n    for(int i = 0; i &lt; maxn; i++) \n        node[i].order = maxn;\n    for(int i = 0; i &lt; n; i++) {\n        scanf(\"%d %d %d\", &amp;addr, &amp;data, &amp;next);\n        node[addr].addr = addr;\n        node[addr].data = data;\n        node[addr].next = next;\n    }\n    int p = s1, order = 0;\n    while(p != -1) {\n        node[p].order = order++;\n        p = node[p].next;\n    }\n    sort(node, node + maxn, cmp);\n    for(int i = 0; i &lt; order / k; i++) {\n        for(int j = (i + 1) * k - 1; j &gt; i * k; j--) \n            printf(\"%05d %d %05d\\n\", node[j].addr, node[j].data, node[j-1].addr);\n        printf(\"%05d %d \", node[i * k].addr, node[i * k].data);\n        if(i &lt; order / k - 1)\n            printf(\"%05d\\n\", node[(i + 2) * k - 1].addr);\n        else {\n            if(order % k == 0) \n                printf(\"-1\\n\");\n            else {\n                printf(\"%05d\\n\", node[(i + 1) * k].addr);\n                for(int m = order / k * k; m &lt; order; m++) {\n                    printf(\"%05d %d \", node[m].addr, node[m].data);\n                    if(m &lt; order - 1)\n                        printf(\"%05d\\n\", node[m+1].addr);\n                    else printf(\"-1\\n\");\n                }\n            }\n        }\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%88%B7%E9%A2%98/%E9%98%9F%E5%88%97/PAT%20A1056_Mice%20and%20Rice/","title":"PAT A1056 Mice and Rice","text":"<p>\u200b\u601d\u8def\u200b\uff1a\u200b\u6bcf\u8f6e\u200b\u53ef\u200b\u5206\u6210\u200ba\u200b\u7ec4\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6700\u540e\u200b\u4e00\u7ec4\u200b\u53ef\u80fd\u200b\u4e0d\u4f1a\u200b\u4eba\u6ee1\u200b\u3002\u200b\u5c06\u200b\u6240\u6709\u4eba\u200b\u7684\u200b\u521d\u59cb\u200b\u5e8f\u5217\u200b\u8f93\u5165\u200b\u961f\u5217\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u6bd4\u8d5b\u200b\u4e00\u5171\u200b\u9009\u51fa\u200ba\u200b\u4e2a\u200b\u4e0b\u200b\u4e00\u8f6e\u200b\u9009\u624b\u200b\uff0c\u200b\u5373\u200b\u88ab\u200b\u6dd8\u6c70\u200b\u7684\u200b\u9009\u624b\u200b\u5904\u4e8e\u200ba + 1\u200b\u540d\u200b\u3002</p> <p>\u200b\u4e0b\u200b\u4e00\u8f6e\u200b\u5c31\u200b\u6709\u200ba\u200b\u4eba\u200b\u53c2\u8d5b\u200b\uff0c\u200b\u6839\u636e\u200b\u6bcf\u7ec4\u200b\u7684\u200b\u6700\u5927\u200b\u4eba\u6570\u200b\u53ef\u200b\u5c06\u200b\u4e0b\u200b\u4e00\u8f6e\u200b\u7684\u200ba\u200b\u4eba\u200b\u7ee7\u7eed\u200b\u5206\u7ec4\u200b\u5982\u6b64\u200b\u5faa\u73af\u200b\u76f4\u5230\u200b\u961f\u5217\u200b\u4e2d\u200b\u53ea\u200b\u5269\u4e0b\u200b1\u200b\u4eba\u5373\u200b\u4e3a\u200b\u6392\u540d\u200b\u7b2c\u4e00\u200b\u7684\u200b\u9009\u624b\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5c0f\u7ec4\u200b\u7684\u200b\u6bd4\u8d5b\u200b\u4e2d\u200b\u90fd\u200b\u63d0\u524d\u200b\u7ed9\u200b\u53c2\u8d5b\u9009\u624b\u200b\u8bbe\u200b\u4e0b\u200b\u6392\u540d\u200b\u4e3a\u200ba + 1\uff0c\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u540e\u7eed\u200b\u6392\u540d\u200b\u66f4\u65b0\u200b\u3002 <pre><code>#include&lt;cstdio&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int maxn = 1005;\ntypedef struct {\n    int weight;\n    int rank;\n} Mouse;\nMouse mouse[maxn];\n\nint main() {\n    int N_P, N_G;\n    scanf(\"%d %d\", &amp;N_P, &amp;N_G);\n    for(int i = 0; i &lt; N_P; i++) {\n        scanf(\"%d\", &amp;mouse[i].weight);\n    }\n    int init_order;\n    queue&lt;int&gt; q;\n    for(int i = 0; i &lt; N_P; i++) {\n        scanf(\"%d\", &amp;init_order);\n        q.push(init_order);\n    }\n    int n = N_P, group;\n    while(q.size() != 1) {\n        group = n / N_G;\n        if(n % N_G) group++;\n        for(int i = 0; i &lt; group; i++) {\n            int idx = q.front();\n            q.pop();\n            mouse[idx].rank = group + 1;\n            for(int j = 1; j &lt; N_G; j++) {\n                if(i * N_G + j &gt;= n) break;\n                int front = q.front();\n                q.pop();\n                mouse[front].rank = group + 1;\n                if(mouse[front].weight &gt; mouse[idx].weight) {\n                    idx = front;\n                }\n            }\n            q.push(idx);\n        }\n        n = group;\n    }\n    mouse[q.front()].rank = 1;\n    for(int i = 0; i &lt; N_P; i++) {\n        printf(\"%d\", mouse[i].rank);\n        if(i &lt; N_P - 1) printf(\" \");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/","title":"GAMES101\uff1a\u200b\u73b0\u4ee3\u200b\u8ba1\u7b97\u673a\u200b\u56fe\u5f62\u5b66\u200b\u5165\u95e8","text":"<p>\u200b\u6458\u8981\u200b</p> <p>\u200b\u4e3b\u8981\u200b\u4e3a\u200b\u5b66\u4e60\u200bGAMES101\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8bb0\u5f55\u200b\u7684\u200b\u8bfe\u5802\u200b\u7b14\u8bb0\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/","title":"Lecture 02 Review of Linear Algebra","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/#dot-product","title":"Dot Product","text":"<p>\u200b\u5728\u200b\u56fe\u5f62\u5b66\u200b\u4e2d\u200b\u901a\u5e38\u200b\u5c06\u200b \\(n \\times 1\\) \u200b\u7684\u200b\u77e9\u9635\u200b\u79f0\u4e3a\u200b\u5411\u91cf\u200b</p> <p>\u200b\u5411\u91cf\u200b\u7684\u200b\u70b9\u200b\u4e58\u200b\u53ef\u4ee5\u200b\u5224\u65ad\u200b\u65b9\u5411\u6027\u200b\uff0c\uff1e0\u200b\u4e3a\u200b\u65b9\u5411\u200b\u57fa\u672c\u4e00\u81f4\u200b\uff0c\uff1c0\u200b\u4e3a\u200b\u65b9\u5411\u200b\u57fa\u672c\u200b\u76f8\u53cd\u200b\uff0c=0\u200b\u4e3a\u200b\u5782\u76f4\u200b</p> <p> </p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/#cross-product","title":"Cross Product","text":"<p>\u200b\u5206\u522b\u200b\u4f7f\u7528\u200b  \\(\\overrightarrow{x}\\)\uff0c\\(\\overrightarrow{y}\\)\uff0c\\(\\overrightarrow{z}\\)  \u200b\u6765\u200b\u4ee3\u8868\u200b\u4e09\u7ef4\u200b\u5750\u6807\u200b\u5411\u91cf\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u7684\u200b\u53c9\u200b\u4e58\u200b\u5173\u7cfb\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u4fd7\u200b\u7684\u200b\u8bb0\u5fc6\u200b\u4e3a\u200b\u8f6e\u6362\u200b\u5173\u7cfb\u200b</p> \\[ \\overrightarrow{x} \\times \\overrightarrow{y} = +\\overrightarrow{z} \\quad \\quad \\overrightarrow{y} \\times \\overrightarrow{x} = -\\overrightarrow{z} \\\\\\ \\overrightarrow{y} \\times \\overrightarrow{z} = +\\overrightarrow{x} \\quad \\quad \\overrightarrow{z} \\times \\overrightarrow{y} = -\\overrightarrow{x} \\\\\\\\ \\overrightarrow{z} \\times \\overrightarrow{x} = +\\overrightarrow{y} \\quad \\quad \\overrightarrow{x} \\times \\overrightarrow{z} = -\\overrightarrow{y}  \\] <p>\u200b\u5411\u91cf\u200b\u53c9\u200b\u4e58\u200b\u8ba1\u7b97\u200b\u53ef\u200b\u4f7f\u7528\u200b\u516c\u5f0f\u200b\uff0c\u200b\u5f97\u5230\u200b\u7684\u200b\u7ed3\u679c\u200b\u5411\u91cf\u200b\u65b9\u5411\u200b\u7b26\u5408\u200b\u53f3\u624b\u5b9a\u5219\u200b\uff0c\u200b\u5373\u200b\u9006\u65f6\u9488\u200b\u65b9\u5411\u200b</p> <p>\u200b\u6240\u5f97\u200b\u7ed3\u679c\u200b\u4e3a\u200b\u6b63\u5411\u200b\uff0c\u200b\u4ee3\u8868\u200b \\(\\overrightarrow{b}\\)  \u200b\u5728\u200b  \\(\\overrightarrow{a}\\)   \u200b\u7684\u200b\u5de6\u4fa7\u200b</p> <p>\u200b\u6240\u5f97\u200b\u7ed3\u679c\u200b\u4e3a\u200b\u8d1f\u5411\u200b\uff0c\u200b\u4ee3\u8868\u200b \\(\\overrightarrow{b}\\)  \u200b\u5728\u200b  \\(\\overrightarrow{a}\\)   \u200b\u7684\u200b\u53f3\u4fa7\u200b</p> \\[ \\overrightarrow{a} \\times \\overrightarrow{b} =  \\left(\\begin{matrix} y_a z_b - y_b z_a \\\\ z_a x_b - x_a z_b \\\\ x_a y_b - y_a x_b \\\\ \\end{matrix}\\right) \\] <p>\u200b\u901a\u8fc7\u200b\u53c9\u200b\u4e58\u200b\u53ef\u4ee5\u200b\u5224\u65ad\u200b\u70b9\u200b\u662f\u5426\u200b\u5728\u200b\u591a\u8fb9\u5f62\u200b\u7684\u200b\u5185\u90e8\u200b</p> <p>\u200b\u5373\u200b\u7531\u200bP\u200b\u70b9\u200b\u8fde\u63a5\u6210\u200b\u7684\u200b\u5411\u91cf\u200b\u5747\u200b\u5728\u200b\u8fb9\u200b\u5411\u91cf\u200b\u7684\u200b\u540c\u200b\u4e00\u4fa7\u200b\uff08\u200b\u4e0b\u56fe\u200b\u793a\u4f8b\u200b\u4e2d\u4e3a\u200b\u5de6\u4fa7\u200b\uff09</p> <p> </p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/#vector-multiplication-in-matrix-form","title":"Vector Multiplication in Matrix form","text":"<ul> <li>Dot product</li> </ul> \\[ \\overrightarrow{a} \\cdot \\overrightarrow{b} =  \\overrightarrow{a} ^ {\\mathrm{T}} \\overrightarrow{b} =  \\left(\\begin{matrix} x_a &amp; y_a &amp; z_a \\end{matrix}\\right) \\left(\\begin{matrix} x_a \\\\ y_a \\\\ z_a \\end{matrix}\\right) =  \\left(\\begin{matrix} x_a x_b + y_a y_b + z_a z_b \\end{matrix}\\right) \\] <ul> <li>Cross product</li> </ul> \\[ \\overrightarrow{a} \\times \\overrightarrow{b} = A^*b = \\left(\\begin{matrix} 0 &amp; -z_a &amp; y_a \\\\ z_a &amp; 0 &amp; -x_a \\\\  -y_a &amp; x_a &amp; 0 \\end{matrix}\\right)  \\left(\\begin{matrix} x_b \\\\ y_b \\\\ z_b \\end{matrix}\\right) \\] <p>\u200b\u6ce8\u610f\u200b\u4e0a\u8ff0\u200b\u516c\u5f0f\u200b\u4e2d\u200b A* \u200b\u4ee3\u8868\u200b duel matrix of vector a</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/","title":"Lecture 03 Transformation","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#2d-transformation","title":"2D Transformation","text":"<p>2D\u200b\u5e73\u9762\u200b\u4e0a\u200b\u7684\u200b\u57fa\u7840\u200b\u53d8\u6362\u200b\u77e9\u9635\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u539f\u70b9\u200b\u8fdb\u884c\u200b\u63a8\u5bfc\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#linear-transforms--matricesof-the-same-dimension","title":"Linear Transforms = Matrices(of the same dimension)","text":"\\[ x^{'} = ax + by \\\\ y^{'} = cx + dy \\\\ \\space \\\\ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} a &amp; b \\\\ c &amp; d \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right) \\\\ \\space \\\\ {\\mathrm{x}}^{'} = \\mathrm{M}\\mathrm{x} \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#scalenon-uniform","title":"Scale(Non-Uniform)","text":"\\[ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} s_x &amp; 0 \\\\ 0 &amp; s_y \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right)  \\] <p>\u200b\u5176\u4e2d\u200b\\(s_x\\)\u200b\u4ee3\u8868\u200bx\u200b\u8f74\u200b\u65b9\u5411\u200b\u7684\u200b\u7f29\u653e\u200b\u5927\u5c0f\u200b\uff0c\\(s_y\\)\u200b\u4ee3\u8868\u200by\u200b\u8f74\u200b\u65b9\u5411\u200b\u7684\u200b\u7f29\u653e\u200b\u5927\u5c0f\u200b</p> <p>\u200b\u4ee5\u4e0a\u200b\u56fe\u200b\u56fe\u793a\u200b\u4e3a\u4f8b\u200b \\(s_x = 0.5,s_y=1.0\\)</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#reflection-matrix\u6c34\u5e73\u7ffb\u8f6c","title":"Reflection Matrix(\u200b\u6c34\u5e73\u200b\u7ffb\u8f6c\u200b)","text":"\\[ x_{'} = -x \\\\  y_{'} = y \\\\ \\space \\\\ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} -1 &amp; 0 \\\\ 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right)  \\] <p>\u200b\u4e0a\u8ff0\u200b\u516c\u5f0f\u200b\u4ee3\u8868\u200b\u6c34\u5e73\u200b\u7ffb\u8f6c\u200b\u77e9\u9635\u200b\uff0c\u200b\u5782\u76f4\u200b\u7ffb\u8f6c\u200b\u77e9\u9635\u200b\u53ef\u200b\u7c7b\u63a8\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#shear-matrix","title":"Shear Matrix","text":"\\[ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} 1 &amp; a \\\\ 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right) \\\\ \\] <p>\u200b\u4ee5\u4e0a\u200b\u56fe\u4e3a\u4f8b\u200b\uff0c\u200b\u56fe\u5f62\u200b\u5e95\u90e8\u200b\u672a\u200b\u8fdb\u884c\u200b\u504f\u79fb\u200b\uff0c\u200b\u800c\u200by\u200b\u8f74\u200b\u4e0a\u503c\u200b\u8d8a\u5927\u200b\uff0cx\u200b\u8f74\u4e0a\u200b\u7684\u200b\u504f\u79fb\u200b\u8d8a\u5927\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#rotateabout-the-origin-0-0-ccw\u9006\u65f6\u9488-by-default","title":"Rotate(about the origin (0, 0), CCW(\u200b\u9006\u65f6\u9488\u200b) by default)","text":"\\[ \\mathrm{R_{\\theta}} = \\left(\\begin{matrix} \\cos \\theta &amp; -\\sin \\theta \\\\ \\sin \\theta &amp; \\cos \\theta \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#homogeneous-coordinates\u9f50\u6b21\u5750\u6807","title":"Homogeneous Coordinates\uff08\u200b\u9f50\u6b21\u200b\u5750\u6807\u200b\uff09","text":"\\[ x_{'} = x + t_x \\\\  y_{'} = y + t_y\\\\ \\] <ul> <li>\u200b\u5e73\u79fb\u200b\u4e0d\u80fd\u200b\u7528\u200b\u4e0a\u8ff0\u200b\u7684\u200b\u77e9\u9635\u200b\u5f62\u5f0f\u200b\u8868\u793a\u200b\uff0c\u200b\u6240\u4ee5\u200b \u200b\u5e73\u79fb\u200b\u5e76\u200b\u4e0d\u662f\u200b\u7ebf\u6027\u53d8\u6362\u200b</li> </ul> \\[ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} a &amp; b \\\\ c &amp; d \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right) + \\left(\\begin{matrix} t_x \\\\ t_y  \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#solution","title":"Solution","text":"<p>\u200b\u5f15\u5165\u200b\u7b2c\u4e09\u200b\u7ef4\u200b (w-coordinate)</p> <ul> <li> <p>\\(2D \\space point = (x, y, 1)^{T}\\)</p> </li> <li> <p>\\(2D \\space vector = (x, y, 0)^{T}\\)</p> </li> </ul> <p>\u200b\u9f50\u6b21\u200b\u5750\u6807\u200b\u4e0b\u200b\uff0c\u200b\u7b2c\u4e09\u200b\u7ef4\u4e3a\u200b1\u200b\u4ee3\u8868\u200b\u70b9\u200b\uff0c\u200b\u4e3a\u200b0\u200b\u4ee3\u8868\u200b\u5411\u91cf\u200b</p> <p>\u200b\u5e73\u79fb\u200b\u7684\u200b\u77e9\u9635\u200b\u8868\u8fbe\u5f62\u5f0f\u200b\uff08\u200b\u4f7f\u7528\u200b\u9f50\u6b21\u200b\u5750\u6807\u200b\uff09</p> \\[ \\left(\\begin{matrix} x^{'} \\\\ y^{'} \\\\ w^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix}\\right) + \\left(\\begin{matrix} x + t_x \\\\ y + t_y \\\\ 1  \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#valid-operation-if-w-coordinate-of-result-is-1-or-0","title":"Valid operation if w-coordinate of result is 1 or 0","text":"<ul> <li>vector + vector = vector</li> <li>point - point      = vector</li> <li>point + vector   = point</li> <li>point + point     = point (\u200b\u4e24\u70b9\u200b\u76f8\u52a0\u200b\uff0c\u200b\u5f97\u5230\u200b\u7ed3\u679c\u200b\u4e3a\u200b\u8fd9\u4e24\u70b9\u200b\u7684\u200b\u8fde\u7ebf\u200b\u4e2d\u200b\u70b9\u200b)</li> </ul> <p>\u200b\u5728\u200b\u9f50\u6b21\u200b\u5750\u6807\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u5982\u4e0b\u200b\u89c4\u5b9a\u200b</p> \\[ \\left(\\begin{matrix} x \\\\ y \\\\ w \\end{matrix}\\right) \\space is \\space the \\space 2D \\space point \\left(\\begin{matrix} x/w \\\\ y/w \\\\ 1 \\end{matrix}\\right), \\space w \\neq 0 \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#affine-transformations","title":"Affine Transformations","text":"<p>Affine map = linear map + translation</p> \\[ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\end{matrix}\\right) = \\left(\\begin{matrix} a &amp; b \\\\ c &amp; d \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y  \\end{matrix}\\right) + \\left(\\begin{matrix} t_x \\\\ t_y  \\end{matrix}\\right) \\] <p>\u200b\u4f7f\u7528\u200b\u9f50\u6b21\u200b\u5750\u6807\u200b</p> \\[ \\left(\\begin{matrix} x^{'} \\\\ y ^{'} \\\\ 1 \\end{matrix}\\right) = \\left(\\begin{matrix} a &amp; b &amp; t_x\\\\ c &amp; d &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#2d-transformations-in-homogeneous-coordinate","title":"2D Transformations in Homogeneous Coordinate","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#scale","title":"Scale","text":"\\[ \\mathrm{S}(s_x, s_y) = \\left(\\begin{matrix} s_x &amp; 0 &amp; 0\\\\ 0 &amp; s_y &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#rotation","title":"Rotation","text":"\\[ \\mathrm{R}(\\alpha) = \\left(\\begin{matrix} \\cos \\alpha &amp; -\\sin \\alpha &amp; 0\\\\ \\sin \\alpha &amp; \\cos \\alpha &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#translation","title":"Translation","text":"\\[ \\mathrm{T}(t_x, t_y) = \\left(\\begin{matrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\] <p>\u200b\u503c\u5f97\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\\(\\mathrm{M^{-1}}\\) \u200b\u65e2\u200b\u662f\u200b\u53d8\u6362\u200b\u77e9\u9635\u200b \\(\\mathrm{M}\\) \u200b\u7684\u200b\u9006\u200b\u77e9\u9635\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u9006\u53d8\u6362\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/#composite-transform","title":"Composite Transform","text":"<p>\u200b\u53d8\u6362\u200b\u7684\u200b\u987a\u5e8f\u200b\u662f\u200b\u81f3\u5173\u91cd\u8981\u200b\u7684\u200b\uff01</p> <ul> <li>\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u4e0d\u200b\u6ee1\u8db3\u200b\u4ea4\u6362\u5f8b\u200b</li> </ul> \\[ \\mathrm{R_{45}} \\cdot \\mathrm{T_{(1,0)}} \\neq \\mathrm{T_{(1,0)}} \\cdot \\mathrm{R_{45}} \\] <ul> <li>\u200b\u6ce8\u610f\u200b\u77e9\u9635\u200b\u7684\u200b\u7ed3\u5408\u200b\u987a\u5e8f\u200b\u662f\u200b\u4ece\u53f3\u5230\u5de6\u200b\u7684\u200b</li> </ul> \\[ \\mathrm{T_{(1,0)}} \\cdot \\mathrm{R_{45}} \\left(\\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix}\\right) =  \\left(\\begin{matrix} 1 &amp; 0 &amp; 1\\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} \\cos 45 \\degree &amp; -\\sin 45 \\degree &amp; 0 \\\\ \\sin 45 \\degree &amp; \\cos 45 \\degree &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix}\\right) \\left(\\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix}\\right) \\] <ul> <li>\u200b\u4eff\u5c04\u53d8\u6362\u200b\u77e9\u9635\u200b\u7684\u200b\u7ed3\u5408\u200b\u987a\u5e8f\u200b</li> </ul> \\[ A_n(...A_2(A_1(\\mathrm{x}))) = \\mathrm{A_n}\\cdot\\cdot\\cdot\\mathrm{A_2}\\cdot\\mathrm{A_1}\\cdot \\left(\\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix}\\right) \\] <p>\u200b\u56f4\u7ed5\u200b\u7279\u5b9a\u200b\u70b9\u200b\uff08\u200b\u975e\u200b\u539f\u70b9\u200b\uff09\u200b\u8fdb\u884c\u200b\u65cb\u8f6c\u200b</p> <ul> <li>\u200b\u5c06\u200b\u4e2d\u5fc3\u200b\u5e73\u79fb\u200b\u5230\u200b\u539f\u70b9\u200b</li> <li>\u200b\u8fdb\u884c\u200b\u65cb\u8f6c\u200b</li> <li>\u200b\u5c06\u200b\u4e2d\u5fc3\u200b\u5e73\u79fb\u200b\u56de\u200b\u7279\u5b9a\u200b\u70b9\u200b</li> </ul> <p></p> \\[ \\mathrm{T(c)} \\cdot \\mathrm{R(\\alpha)} \\cdot \\mathrm{T(-c)} \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/","title":"GAMES102\uff1a\u200b\u51e0\u4f55\u200b\u5efa\u6a21\u200b\u4e0e\u200b\u5904\u7406","text":"<p>\u200b\u6458\u8981\u200b</p> <p>\u200b\u4e3b\u8981\u200b\u4e3a\u200b\u5b66\u4e60\u200bGAMES102\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8bb0\u5f55\u200b\u7684\u200b\u8bfe\u5802\u200b\u7b14\u8bb0\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/","title":"Lec05 Bezier\u200b\u66f2\u7ebf\u200b B\u200b\u6837\u6761\u200b\u66f2\u7ebf","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u5efa\u6a21\u7684\u4e24\u79cd\u5f62\u5f0f","title":"\u5efa\u6a21\u200b\u7684\u200b\u4e24\u79cd\u200b\u5f62\u5f0f","text":"\\[ f(t) = at^2 + bt + c \\] <p>\u200b\u91cd\u5efa\u200b\uff08Reconstruction\uff09</p> <ul> <li>\u200b\u9006\u5411\u200b\u5de5\u7a0b\u200b\uff1a\u200b\u5f62\u72b6\u200b\u5df2\u6709\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u201c\u200b\u731c\u200b\u201d\u200b\u51fa\u200b</li> <li>\u200b\u91c7\u6837\u200b\u2192\u200b\u62df\u5408\u200b\uff1a\u200b\u9700\u8981\u200b\u51fd\u6570\u200b\u7a7a\u95f4\u200b\u8db3\u591f\u200b\u4e30\u5bcc\u200b\uff08\u200b\u8868\u8fbe\u80fd\u529b\u200b\u591f\u200b\uff09</li> <li>\u200b\u4ee3\u6570\u200b\u89c2\u70b9\u200b\uff1a\\(\\{a,b,c\\}\\)\u200b\u4f5c\u4e3a\u200b\u57fa\u200b\u51fd\u6570\u200b\u7684\u200b\u7ec4\u5408\u200b\u6743\u200b\u7cfb\u6570\u200b</li> </ul> <p>\u200b\u8bbe\u8ba1\u200b\uff08Design\uff09</p> <ul> <li>\u200b\u81ea\u7531\u200b\u8bbe\u8ba1\u200b\uff1a\u200b\u51ed\u7a7a\u200b\u4ea7\u751f\u200b\uff0c\u200b\u6216\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u5f62\u72b6\u200b\u7f16\u8f91\u200b\u5f97\u5230\u200b</li> <li>\u200b\u4ea4\u4e92\u5f0f\u200b\u7f16\u8f91\u200b\uff1a\u200b\u51e0\u4f55\u200b\u76f4\u89c2\u6027\u200b\u8981\u200b\u597d\u200b</li> <li>\u200b\u51e0\u4f55\u200b\u89c2\u70b9\u200b\uff1a\u200b\u57fa\u200b\u51fd\u6570\u200b\\(\\{t^2,t,1\\}\\)\u200b\u4f5c\u4e3a\u200b\u63a7\u5236\u70b9\u200b\u7684\u200b\u7ec4\u5408\u200b\u6743\u200b\u7cfb\u6570\u200b</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#bernstein\u57fa\u51fd\u6570","title":"Bernstein\u200b\u57fa\u200b\u51fd\u6570","text":"<ul> <li>n\u200b\u6b21\u200b\uff08n + 1\u200b\u9636\u200b\uff09Bernstein\u200b\u57fa\u200b\u51fd\u6570\u200b\uff1a\\(B=\\{B_{0}^{(n)},B_{1}^{(n)},...,B_{n}^{(n)}\\}\\)</li> </ul> \\[ B_{i}^{n}(t) = \\tbinom{n}{i} t^i (1-t)^{n-i} = B_{i-th \\space basis \\space function}^{(degree)} \\\\ \\space \\\\ \\tbinom{n}{i} = \\begin{cases} \\frac{n!}{(n-i)!i!} \\ for \\ 0 \\leq i \\leq n \\\\ 0 \\qquad otherwise \\end{cases} \\] <ul> <li>\u200b\u5bf9\u79f0\u6027\u200b\uff1a\\(B_{i}^n(t) = B_{n-i}^n(1-t)\\)</li> <li>\\(B_{i}^{(n)}(t)\\) \u200b\u5728\u200b \\(t = \\frac{i}{n}\\) \u200b\u8fbe\u5230\u200b\u6700\u5927\u503c\u200b</li> </ul> <p>\u200b\u7528\u200bBernstein\u200b\u57fa\u200b\u51fd\u6570\u200b\u6240\u200b\u8868\u8fbe\u200b\u7684\u200b\u66f2\u7ebf\u200b\u5177\u6709\u200b\u975e\u5e38\u200b\u597d\u200b\u7684\u200b\u51e0\u4f55\u200b\u610f\u4e49\u200b</p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d28","title":"\u6027\u8d28","text":""},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d281-\u6b63\u6743\u6027","title":"\u6027\u8d28\u200b1. \u200b\u6b63\u6743\u6027","text":"<p>\u200b\u6b63\u6027\u200b\uff08\u200b\u975e\u200b\u8d1f\u6027\u200b\uff09 +  \u200b\u6743\u6027\u200b</p> <ul> <li>\\(B_{i}^{(n)}(t) \\geq 0,\\ \\forall t \\in [0,1]\\)</li> <li>\\(\\sum\\nolimits^{n}_{i=1} B_{i}^{(n)}(t) = 1, \\ \\forall t \\in [0,1]\\)</li> </ul> <p>\u200b\u53ef\u7531\u8be5\u200b\u6027\u8d28\u200b\u5f97\u5230\u200bBezier\u200b\u66f2\u7ebf\u200b\u7684\u200b \u200b\u51f8\u200b\u5305\u6027\u200b</p> <p>\uff08\u200b\u7528\u200b\u4e0d\u200b\u4e25\u8c28\u200b\u7684\u8bdd\u200b\u6765\u8bb2\u200b\uff0c\u200b\u7ed9\u5b9a\u200b\u4e8c\u7ef4\u200b\u5e73\u9762\u200b\u4e0a\u200b\u7684\u200b\u70b9\u96c6\u200b\uff0c\u200b\u51f8\u5305\u200b\u5c31\u662f\u200b\u5c06\u200b\u6700\u200b\u5916\u5c42\u200b\u7684\u200b\u70b9\u200b\u8fde\u63a5\u8d77\u6765\u200b\u6784\u6210\u200b\u7684\u200b\u51f8\u591a\u8fb9\u5f62\u200b\uff0c\u200b\u5b83\u200b\u80fd\u200b\u5305\u542b\u200b\u70b9\u200b\u96c6\u4e2d\u200b\u6240\u6709\u200b\u7684\u200b\u70b9\u200b\uff09</p> <p></p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d282-\u57fa\u6027","title":"\u6027\u8d28\u200b2. \u200b\u57fa\u6027","text":"<ul> <li>\\(B={B_0^{(n)}, B_1^{(n)},...,B_n^{(n)}}\\)\u200b\u662f\u200b\u6b21\u6570\u200b\u4e0d\u200b\u9ad8\u4e8e\u200bn\u200b\u7684\u200b\u591a\u9879\u5f0f\u200b\u96c6\u5408\u200b\uff08\u200b\u7a7a\u95f4\u200b\uff09\u200b\u7684\u200b\u4e00\u7ec4\u200b\u57fa\u200b</li> <li>\u200b\u4e0e\u200b\u5e42\u57fa\u200b\u53ef\u4ee5\u200b\u76f8\u4e92\u200b\u7ebf\u6027\u200b\u8868\u8fbe\u200b\uff1a</li> </ul> \\[ \\left[\\begin{matrix} B_{0,n}(t) &amp; B_{1,n}(t) &amp; ... &amp; B_{n,n}(t)  \\end{matrix}\\right] =  \\left[\\begin{matrix} 1 &amp; t &amp; t^2 &amp; \\dots &amp; t^n \\end{matrix}\\right] \\left[\\begin{matrix} b_{0,0} &amp; 0 &amp; 0 &amp; \\dots &amp; 0 \\\\ b_{1,0} &amp; b_{1,1} &amp; 0 &amp; \\dots &amp; 0 \\\\ b_{2,0} &amp; b_{2,1} &amp; b_{2,2} &amp; \\dots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n,0} &amp; b_{n,1} &amp; b_{n,2} &amp; ... &amp; b_{n,n}  \\end{matrix}\\right] \\]"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d283-\u9012\u63a8\u516c\u5f0f","title":"\u6027\u8d28\u200b3. \u200b\u9012\u63a8\u200b\u516c\u5f0f","text":"<ul> <li> <p>\u200b\u57fa\u200b\u51fd\u6570\u200b\u7684\u200b\u9012\u63a8\u200b\u516c\u5f0f\u200b $$ B_i^{n}(t) = (1-t)B_i^{(n-1)}(t) + tB_{i-1}^{(n-1)}(t) \\ with  B_0^{0}(t) = 1, B_i^{n}(t) = 0  for  i \\notin {0 \\dots n} $$</p> </li> <li> <p>\u200b\u7531\u200b\\(\\tbinom{n-1}{i} + \\tbinom{n-1}{i-1} = \\tbinom{n}{i}\\)\u200b\u53ef\u200b\u63a8\u5bfc\u200b\u5f97\u5230\u200b</p> </li> <li>\u200b\u9ad8\u9636\u200b\u7684\u200b\u57fa\u200b\u51fd\u6570\u200b\u7531\u200b2\u200b\u4e2a\u200b\u4f4e\u9636\u200b\u7684\u200b\u57fa\u200b\u51fd\u6570\u200b\u201c\u200b\u5347\u9636\u200b\u201d\u200b\u5f97\u5230\u200b\uff0c\u200b\u5229\u4e8e\u200b\u4fdd\u6301\u200b\u4e00\u4e9b\u200b\u826f\u597d\u200b\u6027\u8d28\u200b</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d284-\u7aef\u70b9\u63d2\u503c\u6027","title":"\u6027\u8d28\u200b4. \u200b\u7aef\u70b9\u200b\u63d2\u503c\u200b\u6027","text":"<ul> <li>\\(B_0^{n}(0) = 1, B_1^{n}(0) = \\dots = B_n^{n}(0) = 0\\)</li> <li>\\(B_0^{n}(1) = \\dots = B_{n-1}^{n}(1) = 0, B_n^{n}(1) = 1\\)</li> </ul> <p>\u200b\u53ef\u7531\u8be5\u200b\u6027\u8d28\u200b\u5f97\u51fa\u200bBezier\u200b\u66f2\u7ebf\u200b\u7ecf\u8fc7\u200b\u9996\u672b\u200b\u4e24\u4e2a\u200b\u63a7\u5236\u9876\u70b9\u200b \\(\\boldsymbol{p_0}, \\boldsymbol{p_1}\\) </p>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d285-\u5bfc\u6570","title":"\u6027\u8d28\u200b5. \u200b\u5bfc\u6570","text":"<ul> <li>\\(\\frac{d}{dt}B_i^{(n)}(t) = n[B_{i-1}^{(n-1)}(t) - B_i^{(n-1)}(t)]\\)</li> <li>\\(\\frac{d^2}{dt^2}B_i^{(n)}(t) = n(n-1)[B_{i-2}^{(n-2)}(t) - 2B_{i-1}^{(n-2)}(t) + B_i^{(n-2)}(t)]\\)</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#\u6027\u8d286-\u5347\u9636","title":"\u6027\u8d28\u200b6. \u200b\u5347\u9636","text":"\\[ (1-t)B_i^{n}(t) = (1 - \\frac{i}{n+1})B_i^{n+1}(t) \\\\ \\space \\\\ tB_i^{n}(t) = \\frac{i+1}{n+1} B_i^{n+1}(t) \\] <ul> <li>Bezier\u200b\u66f2\u7ebf\u200b\u7684\u200b\u5347\u9636\u200b\u7531\u200b\u4e0a\u8ff0\u200b\u516c\u5f0f\u200b\u63a8\u51fa\u200b   $$   \\boldsymbol{f}(t) = \\sum_{i=0}^{n+1} B_i^{n+1}(t)[\\frac{n+1-i}{n+1}\\boldsymbol{P_i} + \\frac{i}{n+1}\\boldsymbol{P_{i-1}}]   $$</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#bezier\u66f2\u7ebf","title":"Bezier\u200b\u66f2\u7ebf","text":"<ul> <li>n\u200b\u6b21\u200bBezier\u200b\u66f2\u7ebf\u200b\uff1a\\(n+1\\) \u200b\u4e2a\u200b\u63a7\u5236\u9876\u70b9\u200b</li> </ul> \\[ x(t) = \\sum_{i=0}^n B_{i}^n (t) \\cdot b_i \\] <p>\u200b\u7531\u200b\u63a7\u5236\u9876\u70b9\u200b\\(b_i\\)\u200b\u6765\u200b\u63a7\u5236\u200b\u591a\u8fb9\u5f62\u200b</p> <p>Bezier\u200b\u66f2\u7ebf\u200b\u7684\u200b\u6027\u8d28\u200b\u6765\u6e90\u4e8e\u200bBernstein\u200b\u57fa\u200b\u51fd\u6570\u200b\u7684\u200b\u6027\u8d28\u200b\uff08\u200b\u66f2\u7ebf\u200b\u662f\u200b\u63a7\u5236\u9876\u70b9\u200b\u7684\u200b\u7ebf\u6027\u7ec4\u5408\u200b\u6784\u6210\u200b\u7684\u200b\uff0c\u200b\u57fa\u200b\u51fd\u6570\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7ec4\u5408\u200b\u7cfb\u6570\u200b\uff09</p> <ul> <li>Bezier\u200b\u66f2\u7ebf\u200b\u7aef\u70b9\u200b\u7684\u200b\u5207\u7ebf\u200b\u65b9\u5411\u200b\u4e0e\u200b\u8fb9\u200b\u76f8\u540c\u200b</li> </ul>"},{"location":"%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/#de-casteljau-algorithm","title":"De Casteljau algorithm","text":"<p>\u200b\u7b97\u6cd5\u200b\u63cf\u8ff0\u200b</p> <ul> <li>\u200b\u8f93\u5165\u200b\uff1a\u200b\u70b9\u200b \\(\\boldsymbol{b_0,b_1,\\dots,b_n} \\in \\mathbb{R}^{3}\\)</li> <li>\u200b\u8f93\u51fa\u200b\uff1a\u200b\u66f2\u7ebf\u200b \\(\\boldsymbol{x}(t), \\ t \\in [0, 1]\\)</li> </ul> \\[ \\boldsymbol{b}_i^{0}(t) = \\boldsymbol{b}_i, \\quad i = 0, \\dots, n \\\\ \\boldsymbol{b}_i^{r}(t) = (1-t)\\boldsymbol{b}_i^{r-1}(t) + t\\boldsymbol{b}^{r-1}_{i+1}(t) \\\\ r = 1, \\dots, n \\qquad i = 0, \\dots, n - r \\] <p></p> <p>\u200b\u7b97\u6cd5\u200b\u4f2a\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <ul> <li>\u200b\u8ba1\u7b97\u200bBezier\u200b\u66f2\u7ebf\u200b \\(\\boldsymbol{x}(t)\\) \u200b\u4e0a\u200b\u53c2\u6570\u200b\u4e3a\u200b \\(t\\) \u200b\u7684\u200b\u70b9\u200b</li> <li>\u200b\u826f\u597d\u200b\u7684\u200b\u51e0\u4f55\u200b\u610f\u4e49\u200b\uff1a\u200b\u8be5\u200b\u70b9\u5c06\u200b\u66f2\u7ebf\u200b\u4e00\u5206\u200b\u4e24\u6761\u200b\u5b50\u200bBezier\u200b\u66f2\u7ebf\u200b\uff0c\u200b\u5176\u200b\u63a7\u5236\u9876\u70b9\u200b\u662f\u200b\u4e2d\u95f4\u200b\u751f\u6210\u200b\u7684\u200b\u70b9\u200b</li> <li>\u200b\u53ef\u200b\u7528\u4e8e\u200bBezier\u200b\u66f2\u7ebf\u200b\u7684\u200b\u79bb\u6563\u200b\u53ca\u200b\u6c42\u6839\u200b\u7b49\u200b\u8bb8\u591a\u200b\u5e94\u7528\u200b</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/","title":"\u8bed\u8a00","text":"<p>\u200b\u6458\u8981\u200b</p> <p>\u200b\u8bb0\u5f55\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7c7b\u200b\u7684\u200b\u90e8\u5206\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u8f6c\u8f7d\u200b\u6ce8\u660e\u200b\u539f\u6587\u200b\u3002</p> <p>\u200b\u76ee\u524d\u200b\u4e3b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u8bed\u8a00\u200b\u6709\u200b\uff1aC++ Python\u3002</p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/","title":"string \u200b\u6d41\u200b\u521d\u6b65\u200b\u8ba4\u8bc6\u200b\u4e0e\u200b\u8fd0\u7528","text":""},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#1-\u5f15\u8a00","title":"1 \u200b\u5f15\u8a00","text":"<p>\u200b\u5728\u200b C++ \u200b\u7684\u200b\u4f7f\u7528\u200b\u4e2d\u200b\u6211\u4eec\u200b\u7ecf\u5e38\u200b\u7528\u5230\u200b IO \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u56de\u987e\u200b\u4e00\u4e0b\u200b IO \u200b\u5e93\u200b\u7c7b\u578b\u200b\u548c\u200b\u5934\u6587\u4ef6\u200b\u3002</p> <ul> <li> <p>iostream \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u7528\u4e8e\u200b\u8bfb\u5199\u200b\u6d41\u200b\u7684\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\u3002</p> </li> <li> <p>fstream \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8bfb\u5199\u200b\u547d\u540d\u200b\u6587\u4ef6\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002</p> </li> <li> <p>sstream \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8bfb\u5199\u200b\u5185\u5b58\u200b string \u200b\u5bf9\u8c61\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002</p> </li> </ul> <p> \u200b\u5934\u6587\u4ef6\u200b \u200b\u7c7b\u578b\u200b iostream istream\uff0cwistream \u200b\u4ece\u6d41\u200b\u8bfb\u53d6\u6570\u636e\u200b ostream\uff0cwostream \u200b\u5411\u6d41\u200b\u5199\u5165\u200b\u6570\u636e\u200b iostream\uff0cwiostream \u200b\u8bfb\u5199\u200b\u6d41\u200b fstream ifstream\uff0cwifstream \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u6570\u636e\u200b ofstream\uff0cwofstream \u200b\u5411\u200b\u6587\u4ef6\u200b\u5199\u5165\u200b\u6570\u636e\u200b fstream\uff0cwfstream \u200b\u8bfb\u5199\u200b\u6587\u4ef6\u200b sstream istringstream\uff0cwistringistream \u200b\u4ece\u200b string \u200b\u8bfb\u53d6\u6570\u636e\u200b ostringstream\uff0cwostringstream \u200b\u5411\u200bstring\u200b\u5199\u5165\u200b\u6570\u636e\u200b  stringstream\uff0cwstringstream \u200b\u8bfb\u5199\u200bstring <p></p> <p>\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u5bf9\u200b istringstream\u3001ostringstream \u200b\u548c\u200b stringstream \u200b\u8fdb\u884c\u200b\u521d\u6b65\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#2-istringstream-\u7c7b","title":"2 istringstream \u200b\u7c7b","text":"<p>istringstream \u200b\u7c7b\u200b\u4ece\u200b string \u200b\u4e2d\u200b\u63d0\u53d6\u200b\u6570\u636e\u200b\uff0c\u200b\u652f\u6301\u200b &gt;&gt; \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u5206\u5272\u200b\u7b26\u4e3a\u200b\u7a7a\u683c\u200b\u3002</p> <p>\u200b\u6784\u9020\u51fd\u6570\u200b\u539f\u578b\u200b\uff1a<code>istringstream::istringstream(string str)</code></p> <p>\u200b\u5e38\u7528\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\uff1a<code>str()\uff1a\u200b\u4f7f\u200b istringstream \u200b\u5bf9\u8c61\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b string \u200b\u5b57\u7b26\u4e32\u200b</code></p> <p>\u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    string sentence = \"Study Hard and Day Day Up\";\n    istringstream iss(sentence);\n    string temp;\n    // \u200b\u53ef\u7528\u200b while(iss &gt;&gt; t) \u200b\u4ee3\u66ff\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u7a7a\u683c\u200b\u5206\u5272\u200b\n    while(getline(iss, temp, ' ')) {//\u200b\u6b64\u5904\u200b\u624b\u52a8\u200b\u6307\u5b9a\u200b\u7528\u200b\u7a7a\u683c\u200b\u5206\u9694\u200b\n        cout &lt;&lt; iss.str() &lt;&lt; \"#\";\n        cout &lt;&lt; temp &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a <pre><code>Study Hard and Day Day Up#Study\nStudy Hard and Day Day Up#Hard \nStudy Hard and Day Day Up#and  \nStudy Hard and Day Day Up#Day  \nStudy Hard and Day Day Up#Day  \nStudy Hard and Day Day Up#Up \n</code></pre></p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#3-ostringstream-\u7c7b","title":"3 ostringstream \u200b\u7c7b","text":"<p>ostringstream \u200b\u7c7b\u200b\u5c06\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b\u5f80\u200b string \u200b\u4e2d\u200b\u5199\u5165\u200b\uff0c\u200b\u652f\u6301\u200b &lt;&lt; \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u5206\u5272\u200b\u7b26\u4e3a\u200b\u7a7a\u683c\u200b\u3002</p> <p>\u200b\u6784\u9020\u51fd\u6570\u200b\u539f\u578b\u200b\uff1a<code>ostringstream::ostringstream(string str)</code></p> <p>\u200b\u5e38\u7528\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\uff1a<code>str()\uff1a\u200b\u4f7f\u200b ostringstream \u200b\u5bf9\u8c61\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b string \u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6216\u8005\u200b\u4f7f\u7528\u200b\u5176\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b</code></p> <p>\u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    float num = 114.514;\n    ostringstream oss;\n    oss &lt;&lt; num;\n    cout &lt;&lt; oss.str() &lt;&lt; endl;\n    oss.str(\"1919810\");\n    cout &lt;&lt; oss.str() &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a <pre><code>114.514\n1919810\n</code></pre></p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#4-stringstream-\u7c7b","title":"4 stringstream \u200b\u7c7b","text":""},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#41-\u5e38\u7528\u4ecb\u7ecd","title":"4.1 \u200b\u5e38\u7528\u200b\u4ecb\u7ecd","text":"<p>stringstream \u200b\u7c7b\u200b\u662f\u200b istringstream \u200b\u548c\u200b ostringstream \u200b\u7684\u200b\u7efc\u5408\u200b\uff0c\u200b\u652f\u6301\u200b &lt;&lt;\uff0c&gt;&gt; \u200b\u64cd\u4f5c\u200b\uff0c\u200b\u901a\u5e38\u200b\u7528\u6765\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u3002</p> <p>\u200b\u6784\u9020\u51fd\u6570\u200b\u539f\u578b\u200b\uff1a<code>stringstream::stringstream(string str)</code></p> <p>\u200b\u5e38\u7528\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\uff1a <pre><code>str()\uff1a\u200b\u4f7f\u200b stringstream \u200b\u5bf9\u8c61\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b string \u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6216\u8005\u200b\u4f7f\u7528\u200b\u5176\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\u3002\n</code></pre> \u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    float num = 114.514;\n    stringstream ss;\n    string s;\n    ss &lt;&lt; num;\n    ss &gt;&gt; s;\n    cout &lt;&lt; s &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a <pre><code>114.514\n</code></pre></p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/#42-clear-\u7684\u7528\u6cd5\u4ecb\u7ecd","title":"4.2 clear() \u200b\u7684\u200b\u7528\u6cd5\u200b\u4ecb\u7ecd","text":"<p>\u200b\u5148\u200b\u6765\u770b\u200b\u4e00\u6bb5\u200b\u4ee3\u7801\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    float num = 114.514;\n    stringstream ss(\"1919810\");\n    string s;\n\n    ss &gt;&gt; s;\n    cout &lt;&lt; ss.str() &lt;&lt; \" \";\n\n    //ss.clear();\n\n    ss &lt;&lt; num;\n    cout &lt;&lt; ss.str() &lt;&lt; endl;\n    return 0;\n}\n</code></pre> \u200b\u7f16\u5199\u200b\u5982\u200b\u4e0a\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u9884\u671f\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a<code>1919810 114.514</code></p> <p>\u200b\u5b9e\u9645\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a<code>1919810 1919810</code></p> <p>\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b\uff0c\u200b\u5728\u200b\u540e\u7eed\u200b\u6b65\u9aa4\u200b\u7684\u200b<code>ss &lt;&lt; num</code>\u200b\u5e76\u672a\u200b\u6b63\u786e\u200b\u6267\u884c\u200b\u3002 </p> <p>\u200b\u539f\u56e0\u200b\uff1a\u200b\u5728\u200b\u7b2c\u4e00\u6b21\u200b\u8c03\u7528\u200b\u5b8c\u200b<code>&gt;&gt;</code>\u200b\u548c\u200b<code>&lt;&lt;</code>\u200b\u540e\u200b\uff0c\u200b\u6765\u5230\u200b\u4e86\u200b end-of-file \u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u6b64\u65f6\u200b stringstream \u200b\u4f1a\u4e3a\u200b\u5176\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b eofbit \u200b\u7684\u200b\u6807\u8bb0\u200b\u4f4d\u200b\uff0c\u200b\u6807\u8bb0\u200b\u5176\u4e3a\u200b\u5df2\u7ecf\u200b\u5230\u8fbe\u200b eof\u3002 \u200b\u5f53\u200b stringstream \u200b\u8bbe\u7f6e\u200b\u4e86\u200b eofbit\uff0c\u200b\u4efb\u4f55\u200b\u8bfb\u53d6\u200b eof \u200b\u7684\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u4f1a\u200b\u5931\u8d25\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u8bbe\u7f6e\u200b failbit \u200b\u7684\u200b\u6807\u8bb0\u200b\u4f4d\u200b\uff0c\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u5931\u8d25\u200b\u72b6\u6001\u200b\u3002\u200b\u6240\u4ee5\u200b\u540e\u9762\u200b\u7684\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u5931\u8d25\u200b\u4e86\u200b\u3002</p> <p>\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1aclear \u200b\u51fd\u6570\u200b\u7684\u200b\u4f5c\u7528\u200b\u5c31\u662f\u200b\u6e05\u9664\u200b\u6389\u200b\u6240\u6709\u200b\u7684\u200b error state \u200b\u4ee5\u53ca\u200b\u6d41\u200b\u72b6\u6001\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5728\u200b\u4ee3\u7801\u200b\u524d\u9762\u200b\u52a0\u200b\u4e00\u4e2a\u200b<code>ss.clear()</code>\u200b\u5373\u53ef\u200b\u8fbe\u5230\u200b\u9884\u671f\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>clear \u200b\u51fd\u6570\u200b\u7684\u200b\u4f5c\u7528\u200b\u5e76\u975e\u200b\u662f\u200b\u6e05\u7a7a\u200b\u7f13\u51b2\u533a\u200b\uff0c\u200b\u800c\u662f\u200b\u91cd\u7f6e\u200b\u6d41\u200b\u72b6\u6001\u200b\u3002stringstream.str(\"\") \u200b\u53ef\u200b\u6e05\u7a7a\u200b\u7f13\u51b2\u533a\u200b\uff0c\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u7ecf\u5e38\u200b\u7ec4\u5408\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u4e24\u4e2a\u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5bf9\u6bd4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u76f4\u89c2\u200b\u5730\u200b\u4f53\u73b0\u200b\u51fa\u200b clear \u200b\u51fd\u6570\u200b \u200b\u548c\u200b str(\"\") \u200b\u7684\u200b\u4f5c\u7528\u200b\u3002</p> <p>\u200b\u53ea\u200b\u8c03\u7528\u200b clear \u200b\u51fd\u6570\u200b\u800c\u200b\u4e0d\u200b\u8c03\u7528\u200b str(\"\")\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    stringstream ss;\n    string s1 = \"114\";\n    string s2 = \"514\";\n\n    ss &lt;&lt; s1;\n    cout &lt;&lt; ss.str() &lt;&lt; \" \";\n\n    ss.clear();\n    //ss.str(\"\");\n\n    ss &lt;&lt; s2;\n    cout &lt;&lt; ss.str() &lt;&lt; \" \";\n    return 0;\n}\n</code></pre> \u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a<code>114 114514</code> </p> <p>\u200b\u540c\u65f6\u200b\u8c03\u7528\u200b clear() \u200b\u548c\u200b str(\"\")\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n    stringstream ss;\n    string s1 = \"114\";\n    string s2 = \"514\";\n\n    ss &lt;&lt; s1;\n    cout &lt;&lt; ss.str() &lt;&lt; \" \";\n\n    ss.clear();\n    ss.str(\"\");\n\n    ss &lt;&lt; s2;\n    cout &lt;&lt; ss.str() &lt;&lt; \" \";\n    return 0;\n}\n</code></pre> \u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a<code>114 514</code></p> <p>\u200b\u4ee5\u4e0a\u200b\u662f\u200b\u5bf9\u200b string \u200b\u6d41\u200b\u7684\u200b\u521d\u6b65\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%8A%A5%E9%94%99%E7%9B%B8%E5%85%B3/1/","title":"C++ \u200b\u62a5\u9519\u200b\u76f8\u5173","text":""},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%8A%A5%E9%94%99%E7%9B%B8%E5%85%B3/1/#expression-must-have-class-type","title":"Expression must have class type","text":"<pre><code>    T operator[](size_t idx) const noexcept {\n        assert(idx &lt; data_.size()); // \u200b\u6b64\u5904\u200b\u62a5\u9519\u200b\n        return data_[idx];\n    }\n\n    T&amp; operator[](size_t idx) noexcept {\n        assert(idx &lt; data_.size()); // \u200b\u6b64\u5904\u200b\u62a5\u9519\u200b\n        return data_[idx];\n    }\n\nprivate:\n    T* data_{ nullptr };\n    size_t rows_{0};\n    size_t cols_{0};\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b <code>expression must have class type but it has type \"T *const\"</code></p> <p>\u200b\u53ea\u200b\u9700\u200b\u628a\u200b <code>data_.size()</code> \u200b\u6539\u6210\u200b <code>data_-&gt;size()</code> \u200b\u53ef\u200b\u89e3\u51b3\u200b</p> <p>\u200b\u53c2\u8003\u200b\u94fe\u63a5\u200b\uff08\u200b\u9700\u8981\u200b\u9b54\u6cd5\u200b\uff09\uff1ahttps://stackoverflow.com/questions/6547602/expression-must-have-class-type</p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/","title":"\u683c\u5f0f\u200b\u63a7\u5236","text":""},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/#1-\u5f15\u8a00","title":"1 \u200b\u5f15\u8a00","text":"<p>\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u8bb2\u8ff0\u200b\u8f93\u51fa\u200b\u65f6\u4f5c\u200b\u683c\u5f0f\u200b\u63a7\u5236\u200b\u7684\u200b\u76f8\u5173\u200b\u5185\u5bb9\u200b\u3002</p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/#2-stdsetwint-n","title":"2 <code>std::setw(int n)</code>","text":"<p><code>std::setw(int n)</code>\u200b\u662f\u200b C++ \u200b\u5728\u200b\u8f93\u51fa\u200b\u64cd\u4f5c\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u5bbd\u5ea6\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u8f93\u51fa\u200b\u7684\u200b\u57df\u200b\u5bbd\u200b\uff0cn\u200b\u8868\u793a\u200b\u5b57\u200b\u6bb5\u200b\u5bbd\u5ea6\u200b\u3002</p> <p>\u200b\u53ea\u200b\u5bf9\u200b\u7d27\u63a5\u7740\u200b\u7684\u200b\u8f93\u51fa\u200b\u6709\u6548\u200b\uff0c\u200b\u7d27\u63a5\u7740\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u675f\u200b\u540e\u200b\u53c8\u200b\u53d8\u56de\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u57df\u200b\u5bbd\u200b\u3002\u200b\u5f53\u200b\u540e\u9762\u200b\u7d27\u8ddf\u7740\u200b\u7684\u200b\u8f93\u51fa\u200b\u5b57\u200b\u6bb5\u957f\u5ea6\u200b\u5c0f\u4e8e\u200bn\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5728\u200b\u8be5\u200b\u5b57\u200b\u6bb5\u200b\u524d\u9762\u200b\u7528\u200b\u7a7a\u683c\u200b\u8865\u9f50\u200b\uff1b\u200b\u5f53\u200b\u8f93\u51fa\u200b\u5b57\u200b\u6bb5\u957f\u5ea6\u200b\u5927\u4e8e\u200bn\u200b\u65f6\u200b\uff0c\u200b\u5168\u90e8\u200b\u6574\u4f53\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\nint main() {\n    string s = \"Study\";\n    cout &lt;&lt; s &lt;&lt; endl;\n    cout &lt;&lt; setw(10) &lt;&lt; s &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a <pre><code>Study     \n     Study\n</code></pre></p>"},{"location":"%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/#3-stdfixed--stdsetprecisionint-n","title":"3 <code>std::fixed + std::setprecision(int n)</code>","text":"<p>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u6570\u5b57\u200b\u592a\u200b\u5927\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b<code>std::setprecision(int n)</code>\u200b\u6307\u5b9a\u200b\u7684\u200b\u6709\u6548\u200b\u6570\u200b\u4f4d\u6570\u200b\u6765\u200b\u6253\u5370\u200b\uff0c\u200b\u5219\u200b\u8bb8\u591a\u200b\u7cfb\u7edf\u200b\u4f1a\u4ee5\u200b\u79d1\u5b66\u200b\u8868\u793a\u6cd5\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6253\u5370\u200b\u3002</p> <p><code>std::setprecision(int n)</code> \u200b\u5c06\u200b\u6307\u5b9a\u200b\u6d6e\u70b9\u200b\u6570\u5b57\u200b\u7684\u200b\u5c0f\u6570\u70b9\u200b\u540e\u8981\u200b\u663e\u793a\u200b\u7684\u200b\u4f4d\u6570\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u8981\u200b\u663e\u793a\u200b\u7684\u200b\u603b\u200b\u6709\u6548\u200b\u6570\u200b\u4f4d\u6570\u200b\uff0c\u200b\u4e00\u822c\u200b\u548c\u200b<code>std::fixed</code>\u200b\u7ed3\u5408\u200b\u8d77\u6765\u200b\u7528\u200b\u3002</p> <p>\u200b\u793a\u4f8b\u200b\u7a0b\u5e8f\u200b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nusing namespace std;\nint main() {\n    double num = 1145141919810;\n    cout &lt;&lt; num &lt;&lt; endl;\n    cout &lt;&lt; fixed &lt;&lt; num &lt;&lt; endl;\n    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; num &lt;&lt; endl;\n    return 0;\n}\n</code></pre></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a <pre><code>1.14514e+12\n1145141919810.000000\n1145141919810.00\n</code></pre></p>"},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/","title":"\u5b57\u7b26\u4e32\u200b\u548c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u7684\u200b\u76f8\u540c\u200b\u548c\u200b\u4e0d\u540c\u4e4b\u5904","text":""},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/#1-\u5f15\u8a00","title":"1 \u200b\u5f15\u8a00","text":"<p>\u200b\u5728\u200b Python \u200b\u4e2d\u200b\uff0c\u200b\u5b57\u7b26\u4e32\u200b\uff08str\uff09\u200b\u662f\u200b \u200b\u4e0d\u53ef\u200b\u53d8\u200b\u5bf9\u8c61\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4e00\u65e6\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5c31\u200b\u65e0\u6cd5\u200b\u66f4\u6539\u200b\u5b83\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p> <p>\u200b\u800c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\uff08\u200b\u5373\u200b\u5305\u542b\u200b\u5b57\u7b26\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u5982\u200b ['a', 'b', 'c']\uff09\u200b\u662f\u200b \u200b\u53ef\u53d8\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u66f4\u6539\u200b\u5176\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u4e24\u8005\u200b\u5728\u200b\u4f7f\u7528\u200b\u548c\u200b\u7279\u6027\u200b\u4e0a\u200b\u6709\u200b\u4e00\u4e9b\u200b\u91cd\u8981\u200b\u7684\u200b\u533a\u522b\u200b\u3002</p>"},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/#2-\u4e3a\u4ec0\u4e48\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684","title":"2 \u200b\u4e3a\u4ec0\u4e48\u200b\u5b57\u7b26\u4e32\u200b\u662f\u200b\u4e0d\u53ef\u200b\u53d8\u200b\u7684","text":"<p>\u200b\u5b57\u7b26\u4e32\u200b\u4e0d\u53ef\u200b\u53d8\u662f\u200b Python \u200b\u8bbe\u8ba1\u200b\u4e0a\u200b\u7684\u200b\u4e00\u79cd\u200b\u9009\u62e9\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u539f\u56e0\u200b\uff1a</p> <ul> <li> <p>\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\uff1a\u200b\u7531\u4e8e\u200b\u5b57\u7b26\u4e32\u200b\u4e0d\u53ef\u200b\u53d8\u200b\uff0cPython \u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u76f8\u540c\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u5171\u4eab\u200b\uff0c\u200b\u4e0d\u7528\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002</p> </li> <li> <p>\u200b\u5b89\u5168\u6027\u200b\uff1a\u200b\u5728\u200b\u591a\u7ebf\u7a0b\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u4e0d\u53ef\u200b\u53d8\u200b\u5bf9\u8c61\u200b\u66f4\u200b\u5b89\u5168\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6ca1\u6709\u200b\u65b9\u6cd5\u200b\u80fd\u200b\u4fee\u6539\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4e0d\u7528\u200b\u62c5\u5fc3\u200b\u5e76\u53d1\u200b\u8bbf\u95ee\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p> </li> <li> <p>\u200b\u65b9\u4fbf\u200b\u7f13\u5b58\u200b\u548c\u200b\u54c8\u5e0c\u200b\u8ba1\u7b97\u200b\uff1a\u200b\u4e0d\u53ef\u200b\u53d8\u200b\u5bf9\u8c61\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u7528\u4e8e\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff08\u200b\u5982\u200b\u5b57\u5178\u200b\u7684\u200b\u952e\u200b\uff09\uff0c\u200b\u4e5f\u200b\u66f4\u200b\u9002\u5408\u200b\u7f13\u5b58\u200b\u5904\u7406\u200b\u3002</p> </li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/#3-\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u5217\u8868\u7684\u533a\u522b","title":"3 \u200b\u5b57\u7b26\u4e32\u200b\u548c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u7684\u200b\u533a\u522b","text":"\u7279\u6027\u200b \u200b\u5b57\u7b26\u4e32\u200b\uff08str\uff09 \u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\uff08\u200b\u5982\u200b list[str]\uff09 \u200b\u53ef\u53d8\u6027\u200b \u200b\u4e0d\u53ef\u200b\u53d8\u200b \u200b\u53ef\u53d8\u200b \u200b\u4fee\u6539\u200b\u65b9\u5f0f\u200b \u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u4fee\u6539\u200b \u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4fee\u6539\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b \u200b\u5b58\u50a8\u7a7a\u95f4\u200b \u200b\u66f4\u200b\u8282\u7701\u200b\u5185\u5b58\u200b\uff0c\u200b\u4e0d\u7528\u200b\u5b58\u50a8\u200b\u5b57\u7b26\u200b\u7684\u200b\u5f15\u7528\u200b \u200b\u5217\u8868\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u4e86\u200b\u5b57\u7b26\u200b\u7684\u200b\u5f15\u7528\u200b\uff0c\u200b\u53ef\u80fd\u200b\u5360\u7528\u200b\u8f83\u200b\u591a\u200b\u5185\u5b58\u200b \u200b\u6027\u80fd\u200b \u200b\u7531\u4e8e\u200b\u4e0d\u53ef\u200b\u53d8\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u5bb9\u6613\u200b\u4f18\u5316\u200b\u548c\u200b\u7f13\u5b58\u200b \u200b\u4fee\u6539\u200b\u9891\u7e41\u200b\u7684\u200b\u573a\u666f\u200b\u4e0b\u200b\uff0c\u200b\u6027\u80fd\u200b\u8868\u73b0\u200b\u66f4\u597d\u200b \u200b\u62fc\u63a5\u200b/\u200b\u63d2\u5165\u200b \u200b\u6bcf\u6b21\u200b\u62fc\u63a5\u200b\u4f1a\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u5bf9\u8c61\u200b \u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b append \u200b\u6216\u200b insert \u200b\u6765\u200b\u4fee\u6539\u200b\u5217\u8868"},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/#4-\u4f7f\u7528\u5b57\u7b26\u4e32\u548c\u5b57\u7b26\u5217\u8868\u7684\u60c5\u5883","title":"4 \u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u548c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u7684\u200b\u60c5\u5883","text":"<ul> <li> <p>\u200b\u5b57\u7b26\u4e32\u200b \u200b\u9002\u7528\u200b\u4e8e\u200b\u5185\u5bb9\u200b\u4e0d\u4f1a\u200b\u66f4\u6539\u200b\u7684\u200b\u573a\u666f\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6587\u672c\u200b\u5185\u5bb9\u200b\u3001\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u7b49\u200b\u3002</p> </li> <li> <p>\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b \u200b\u5219\u200b\u9002\u7528\u200b\u4e8e\u200b\u9700\u8981\u200b\u9891\u7e41\u200b\u4fee\u6539\u200b\u5b57\u7b26\u200b\u987a\u5e8f\u200b\u3001\u200b\u63d2\u5165\u200b\u6216\u200b\u5220\u9664\u200b\u5b57\u7b26\u200b\u7684\u200b\u573a\u666f\u200b\u3002\u200b\u5c24\u5176\u200b\u662f\u200b\u5faa\u73af\u200b\u4e2d\u200b\u9891\u7e41\u200b\u4fee\u6539\u200b\u5b57\u7b26\u200b\u65f6\u200b\uff0c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u6548\u7387\u200b\u66f4\u9ad8\u200b\u3002</p> </li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/#5-\u5982\u4f55\u5c06\u5b57\u7b26\u4e32\u4e0e\u5b57\u7b26\u5217\u8868\u4e92\u76f8\u8f6c\u6362","title":"5 \u200b\u5982\u4f55\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u4e0e\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u4e92\u76f8\u200b\u8f6c\u6362","text":"<ul> <li> <p>\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\uff1a<code>list(s)</code>\uff0c\u200b\u4f8b\u5982\u200b <code>list(\"hello\") \u200b\u4f1a\u200b\u5f97\u5230\u200b ['h', 'e', 'l', 'l', 'o']</code>\u3002</p> </li> <li> <p>\u200b\u5c06\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\uff1a<code>''.join(t)</code>\uff0c\u200b\u4f8b\u5982\u200b <code>''.join(['h', 'e', 'l', 'l', 'o'])</code> \u200b\u4f1a\u200b\u5f97\u5230\u200b <code>\"hello\"</code>\u3002</p> </li> </ul> <p>\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u4e0d\u200b\u53ef\u53d8\u6027\u200b\u4f7f\u5f97\u200b\u5b83\u200b\u66f4\u200b\u9002\u5408\u200b\u7528\u4e8e\u200b\u4e0d\u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u800c\u200b\u5b57\u7b26\u200b\u5217\u8868\u200b\u7684\u200b\u53ef\u53d8\u6027\u200b\u5219\u200b\u4f7f\u200b\u5176\u200b\u9002\u5408\u200b\u5728\u200b\u9700\u8981\u200b\u9891\u7e41\u200b\u66f4\u6539\u200b\u5185\u5bb9\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4f7f\u7528\u200b\u3002</p>"}]}