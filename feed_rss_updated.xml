<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>开的博客</title><link>https://liangbaikai1126.github.io/</link><atom:link href="https://liangbaikai1126.github.io/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/liangbaikai1126/liangbaikai1126.github.io</docs><language>zh</language> <pubDate>Thu, 27 Mar 2025 02:05:16 -0000</pubDate> <lastBuildDate>Thu, 27 Mar 2025 02:05:16 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.1</generator> <image> <url>None</url> <title>开的博客</title><link>https://liangbaikai1126.github.io/</link> </image> <item> <title>LeetCode 670.最大交换</title> <description>&lt;p&gt;只交换一次让所得数字最大，即将靠左的小数字与靠右的大数字交换&lt;/p&gt;&lt;ol&gt;&lt;li&gt;从右往左寻找第一个最大的数字，记录下标 maxIdx，即大数字优先靠右&lt;/li&gt;&lt;li&gt;遍历的同时查看 num[i] 是否小于 num[maxIdx]，即小数字优先靠左&lt;/li&gt;&lt;li&gt;若 num[i] &amp;lt; num[maxIdx]，记录这两个下标保存在 p，q 中...&lt;/li&gt;&lt;/ol&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%20670.%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</link> <pubDate>Mon, 04 Nov 2024 13:11:51 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%20670.%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</guid> </item> <item> <title>C++ 报错相关</title> <description>&lt;h1&gt;C++ 报错相关&lt;/h1&gt;&lt;h2&gt;Expression must have class type&lt;/h2&gt;&lt;p&gt;``` c++ T operator&lt;a href=&#34;size_t idx&#34;&gt;&lt;/a&gt; const noexcept { assert(idx &amp;lt; data_.size()); // 此处报错 return data_[idx];...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%8A%A5%E9%94%99%E7%9B%B8%E5%85%B3/1/</link> <pubDate>Mon, 04 Nov 2024 13:11:51 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%8A%A5%E9%94%99%E7%9B%B8%E5%85%B3/1/</guid> </item> <item> <title>刷题</title> <description>&lt;h1&gt;刷题&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 自用，刷题的记录&lt;/p&gt;&lt;pre&gt;&lt;code&gt;题解采用 C++，Python&lt;/code&gt;&lt;/pre&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/</guid> </item> <item> <title>LeetCode 3216.交换后字典序最小的字符串</title> <description>&lt;p&gt;只交换一次让字典序最小，需要满足下列条件&lt;/p&gt;&lt;ol&gt;&lt;li&gt;奇偶性相同，即绝对值之差等于 2&lt;/li&gt;&lt;li&gt;交换前的数字必须左边大于右边，交换后才能字典序变小&lt;/li&gt;&lt;li&gt;交换的位置越靠近高位越好，即越靠近左边越好&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;```pythonclass Solution: def getSmallestString(self, s:...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%203216.%E4%BA%A4%E6%8D%A2%E5%90%8E%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/LeetCode%203216.%E4%BA%A4%E6%8D%A2%E5%90%8E%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid> </item> <item> <title>语言</title> <description>&lt;h1&gt;语言&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 记录编程语言类的部分知识，转载注明原文。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;目前主要使用的语言有：C++ Python。&lt;/code&gt;&lt;/pre&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/</guid> </item> <item> <title>string 流初步认识与运用</title> <description>&lt;h1&gt;string 流初步认识与运用&lt;/h1&gt;&lt;h2&gt;1 引言&lt;/h2&gt;&lt;p&gt;在 C++ 的使用中我们经常用到 IO 操作，让我们回顾一下 IO 库类型和头文件。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;iostream 定义了用于读写流的基本类型。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;fstream 定义了读写命名文件的类型。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sstream 定义了读写内存 string 对象的类型。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/string%E6%B5%81/1/</guid> </item> <item> <title>格式控制</title> <description>&lt;h1&gt;格式控制&lt;/h1&gt;&lt;h2&gt;1 引言&lt;/h2&gt;&lt;p&gt;本文主要讲述输出时作格式控制的相关内容。&lt;/p&gt;&lt;h2&gt;2 &lt;code&gt;std::setw(int n)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::setw(int n)&lt;/code&gt;是 C++ 在输出操作中使用的字段宽度设置，设置输出的域宽，n表示字段宽度。&lt;/p&gt;&lt;p&gt;只对紧接着的输出有效，紧接着的输出结束后又变回默认的域宽。当后面紧跟着...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/C%2B%2B/%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6/1/</guid> </item> <item> <title>字符串和字符列表的相同和不同之处</title> <description>&lt;h1&gt;字符串和字符列表的相同和不同之处&lt;/h1&gt;&lt;h2&gt;1 引言&lt;/h2&gt;&lt;p&gt;在 Python 中，字符串（str）是 &lt;strong&gt;不可变对象&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;这意味着一旦创建了一个字符串，就无法更改它的内容。&lt;/p&gt;&lt;p&gt;而字符列表（即包含字符的列表，如 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]）是 &lt;strong&gt;可变对象&lt;/strong&gt;，可以更改其中的内容。&lt;/p&gt;&lt;p&gt;这两者在使用和特性上有一...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/</link> <pubDate>Wed, 30 Oct 2024 01:39:33 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/1/</guid> </item> <item> <title>写在前面</title> <description>&lt;h1&gt;写在前面&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 主要记录一些相对独立的知识技术介绍。&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/</link> <pubDate>Tue, 29 Oct 2024 16:30:23 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/</guid> </item> <item> <title>Conda相关问题</title> <description>&lt;h1&gt;Conda 相关问题&lt;/h1&gt;&lt;h2&gt;终端自动启动 Conda Base 环境&lt;/h2&gt;&lt;p&gt;在安装了 Conda 后，有时打开终端会自动激活 Conda Base 环境，如下图所示&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;image/CondaBase.png&#34;&gt;&lt;/p&gt;&lt;p&gt;要取消自动激活环境的功能，只需要在终端中输入 &lt;/p&gt;&lt;p&gt;`conda config --set a...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Conda%E7%9B%B8%E5%85%B3/1/</link> <pubDate>Tue, 29 Oct 2024 16:30:23 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Conda%E7%9B%B8%E5%85%B3/1/</guid> </item> <item> <title>Git相关问题</title> <description>&lt;h1&gt;Git 相关问题&lt;/h1&gt;&lt;h2&gt;SSL certificate problem&lt;/h2&gt;&lt;p&gt;在使用 &lt;code&gt;git clone&lt;/code&gt; 时，有时会出现错误提示 &lt;/p&gt;&lt;p&gt;&lt;code&gt;SSL certificate problem: unable to get local issuer certificate&lt;/code&gt; &lt;/p&gt;&lt;p&gt;问题是由于没有配置信任的服务器 HTT...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Git%E7%9B%B8%E5%85%B3/1/</link> <pubDate>Tue, 29 Oct 2024 16:30:23 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Git%E7%9B%B8%E5%85%B3/1/</guid> </item> <item> <title>WSL安装教程</title> <description>&lt;h1&gt;Win11 家庭版配置 WSL2&lt;/h1&gt;&lt;h2&gt;0. 安装环境&lt;/h2&gt;&lt;p&gt;笔者使用的操作系统为 Windows 11 家庭版，CPU 为 AMD Ryzen 系列。&lt;/p&gt;&lt;p&gt;本教程将安装 WSL2 至非C盘（D盘）。&lt;/p&gt;&lt;p&gt;由于 Windows 11 家庭版不支持 Hyper-V 功能，需要手动设置开启。&lt;/p&gt;&lt;p&gt;新建 txt 文件命名为...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/</link> <pubDate>Tue, 29 Oct 2024 16:30:23 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%85%B6%E4%BB%96/Win11%E5%AE%B6%E5%BA%AD%E7%89%88%E9%85%8D%E7%BD%AEWSL2/1/</guid> </item> <item> <title>LeetCode 1039.多边形三角剖分的最低得分</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：暂无&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/LeetCode%201039.%E5%A4%9A%E8%BE%B9%E5%BD%A2%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%9A%84%E6%9C%80%E4%BD%8E%E5%BE%97%E5%88%86/</link> <pubDate>Tue, 29 Oct 2024 16:30:23 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/LeetCode%201039.%E5%A4%9A%E8%BE%B9%E5%BD%A2%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86%E7%9A%84%E6%9C%80%E4%BD%8E%E5%BE%97%E5%88%86/</guid> </item> <item> <title>Lec05 Bezier曲线 B样条曲线</title> <description>&lt;h1&gt;Lec05 Bezier曲线 B样条曲线&lt;/h1&gt;&lt;h2&gt;建模的两种形式&lt;/h2&gt;&lt;p&gt;$$f(t) = at^2 + bt + c$$&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重建（Reconstruction）&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;逆向工程：形状已有，将其“猜”出&lt;/li&gt;&lt;li&gt;采样→拟合：需要函数空间足够丰富（表达能力够）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;代数观点&lt;/strong&gt;：${a,b,c}$作为...&lt;/li&gt;&lt;/ul&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</link> <pubDate>Tue, 23 Jul 2024 14:46:15 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</guid> </item> <item> <title>开的博客</title> <description>&lt;h1&gt;开的博客&lt;/h1&gt;&lt;p&gt;业精于勤，荒于嬉；行成于思，毁于随。&lt;/p&gt;&lt;p&gt;!!! note &#34;名 人 名 言&#34; &lt;div align=&#34;center&#34; style=&#34;font-size:30px;font-weight:bold&#34;&gt; 我要一步一步往上爬 &lt;br/&gt; 在最高点...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/</guid> </item> <item> <title>PAT A1091 Acute Stroke</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题为三维BFS，本质上和二维BFS相同，不过从上下左右4种方向拓展为上下左右前后6种方向。&lt;/p&gt;&lt;p&gt;一个连通空间即为一个核，达到阈值T的核可以算进总体积中。&lt;/p&gt;&lt;p&gt;注意BFS中每次调用BFS相当于走过了一个连通区域，需要设置visit数组防止重复访问已经访问的坐标。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&amp;lt;cst...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/BFS/PAT%20A1091_Acute%20Stroke/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/BFS/PAT%20A1091_Acute%20Stroke/</guid> </item> <item> <title>PAT A1103 Integer Factorization</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先对存储因子的fac数组进行预处理，比如假设 p = 2，可得 fac[0] = 0, fac[1] = 1, fac[2] = 4 等。&lt;/p&gt;&lt;p&gt;直接预处理至fac[i] &amp;gt;= n，再通过DFS进行搜索求出最优解。 ```cpp&lt;/p&gt;&lt;h1&gt;include&lt;cstdio&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;vector&gt;&lt;/h1&gt;&lt;p&gt;us...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/DFS/PAT%20A1103_Integer%20Factorization/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/DFS/PAT%20A1103_Integer%20Factorization/</guid> </item> <item> <title>PAT A1010 Radix</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题使用二分法来查找答案进制数字，先将已经确定进制的输入 N1 转化为十进制，再将待确定进制的输入 N2 二分查找转化为十进制。&lt;/p&gt;&lt;p&gt;需要注意使用 long long 类型来避免溢出问题。&lt;/p&gt;&lt;p&gt;最重要的是确定上界和下界，下界为 N2 的各位中最大值 + 1，上界为 N1 的十进制值和下界二者中取最大值。...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/PAT%20A1010_Radix/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/PAT%20A1010_Radix/</guid> </item> <item> <title>PAT A1068 Find More Coins</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题为0-1背包的变形版，求0-1背包的最小字典序问题。&lt;/p&gt;&lt;p&gt;其中 dp[i][j] 代表从 1 ~ i 号硬币中选择，在最大支付额度为 j 的条件下能支付的最大金额。&lt;/p&gt;&lt;p&gt;由于本题中负重和价值为同一数据，由状态转移方程 dp[i][j] = max{dp[i-1][j], dp[i-1][j - co...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85/PAT%20A1068_Find%20More%20Coins/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85/PAT%20A1068_Find%20More%20Coins/</guid> </item> <item> <title>PAT A1045 Favorite Color Stripe</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先将喜欢的长度为 M 的颜色序列映射到 0 ~ M-1，之后直接将不喜欢的颜色序列删去，重新整理得到映射后存留的颜色序列a，此时存留的序列一定都是喜欢的颜色。&lt;/p&gt;&lt;p&gt;再按照LIS的模板，dp[i]代表a[i]结尾的最长序列，状态转移方程为dp[i] = max{dp[j]} + 1, 0 &amp;lt; j &amp;lt; i...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97LIS/PAT%20A1045_Favorite%20Color%20Stripe/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97LIS/PAT%20A1045_Favorite%20Color%20Stripe/</guid> </item> </channel></rss>