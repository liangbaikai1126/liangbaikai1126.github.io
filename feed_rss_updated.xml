<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>开的博客</title><link>https://liangbaikai1126.github.io/</link><atom:link href="https://liangbaikai1126.github.io/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/liangbaikai1126/liangbaikai1126.github.io</docs><language>zh</language> <pubDate>Tue, 23 Jul 2024 14:47:10 -0000</pubDate> <lastBuildDate>Tue, 23 Jul 2024 14:47:10 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.15.0</generator> <item> <title>Lec05 Bezier曲线 B样条曲线</title> <description>&lt;h1&gt;Lec05 Bezier曲线 B样条曲线&lt;/h1&gt;&lt;h2&gt;建模的两种形式&lt;/h2&gt;&lt;p&gt;$$f(t) = at^2 + bt + c$$&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重建（Reconstruction）&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;逆向工程：形状已有，将其“猜”出&lt;/li&gt;&lt;li&gt;采样→拟合：需要函数空间足够丰富（表达能力够）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;代数观点&lt;/strong&gt;：${a,b,c}$作为...&lt;/li&gt;&lt;/ul&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</link> <pubDate>Tue, 23 Jul 2024 14:46:15 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</guid> </item> <item> <title>开的博客</title> <description>&lt;h1&gt;开的博客&lt;/h1&gt;&lt;p&gt;业精于勤，荒于嬉；行成于思，毁于随。&lt;/p&gt;&lt;p&gt;!!! note &#34;名 人 名 言&#34; &lt;div align=&#34;center&#34; style=&#34;font-size:30px;font-weight:bold&#34;&gt; 我要一步一步往上爬 &lt;br/&gt; 在最高点...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/</guid> </item> <item> <title>PAT A1091 Acute Stroke</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题为三维BFS，本质上和二维BFS相同，不过从上下左右4种方向拓展为上下左右前后6种方向。&lt;/p&gt;&lt;p&gt;一个连通空间即为一个核，达到阈值T的核可以算进总体积中。&lt;/p&gt;&lt;p&gt;注意BFS中每次调用BFS相当于走过了一个连通区域，需要设置visit数组防止重复访问已经访问的坐标。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&amp;lt;cst...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/BFS/PAT%20A1091_Acute%20Stroke/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/BFS/PAT%20A1091_Acute%20Stroke/</guid> </item> <item> <title>PAT A1103 Integer Factorization</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先对存储因子的fac数组进行预处理，比如假设 p = 2，可得 fac[0] = 0, fac[1] = 1, fac[2] = 4 等。&lt;/p&gt;&lt;p&gt;直接预处理至fac[i] &amp;gt;= n，再通过DFS进行搜索求出最优解。 ```cpp&lt;/p&gt;&lt;h1&gt;include&lt;cstdio&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;vector&gt;&lt;/h1&gt;&lt;p&gt;us...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/DFS/PAT%20A1103_Integer%20Factorization/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/DFS/PAT%20A1103_Integer%20Factorization/</guid> </item> <item> <title>PAT A1010 Radix</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题使用二分法来查找答案进制数字，先将已经确定进制的输入 N1 转化为十进制，再将待确定进制的输入 N2 二分查找转化为十进制。&lt;/p&gt;&lt;p&gt;需要注意使用 long long 类型来避免溢出问题。&lt;/p&gt;&lt;p&gt;最重要的是确定上界和下界，下界为 N2 的各位中最大值 + 1，上界为 N1 的十进制值和下界二者中取最大值。...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/PAT%20A1010_Radix/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/PAT%20A1010_Radix/</guid> </item> <item> <title>PAT A1068 Find More Coins</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题为0-1背包的变形版，求0-1背包的最小字典序问题。&lt;/p&gt;&lt;p&gt;其中 dp[i][j] 代表从 1 ~ i 号硬币中选择，在最大支付额度为 j 的条件下能支付的最大金额。&lt;/p&gt;&lt;p&gt;由于本题中负重和价值为同一数据，由状态转移方程 dp[i][j] = max{dp[i-1][j], dp[i-1][j - co...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85/PAT%20A1068_Find%20More%20Coins/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85/PAT%20A1068_Find%20More%20Coins/</guid> </item> <item> <title>PAT A1045 Favorite Color Stripe</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先将喜欢的长度为 M 的颜色序列映射到 0 ~ M-1，之后直接将不喜欢的颜色序列删去，重新整理得到映射后存留的颜色序列a，此时存留的序列一定都是喜欢的颜色。&lt;/p&gt;&lt;p&gt;再按照LIS的模板，dp[i]代表a[i]结尾的最长序列，状态转移方程为dp[i] = max{dp[j]} + 1, 0 &amp;lt; j &amp;lt; i...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97LIS/PAT%20A1045_Favorite%20Color%20Stripe/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97LIS/PAT%20A1045_Favorite%20Color%20Stripe/</guid> </item> <item> <title>PAT A1021 Deepest Root</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：首先利用并查集确定是否能够构成一棵树，即整个图只有一个father。&lt;/p&gt;&lt;p&gt;由于图连通且有n个结点，边数为n-1，可知一定能构成一棵树。&lt;/p&gt;&lt;p&gt;选取任意结点进行DFS得到最大高度的端点，一定为候选的Deepest Root结点，称作集合A。再次从这些集合A的某一个结点出发，得到最大高度的端点集合称作集合B。...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1021_Deepest%20Root/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1021_Deepest%20Root/</guid> </item> <item> <title>PAT A1034 Head of a Gang</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：通过邻接矩阵构建帮派图，通过DFS确定不同的连通分量来确定帮派个数以及人数。&lt;/p&gt;&lt;p&gt;注意给出的图结构为无向图，为结点添加完权重之后，由最大权重确定帮派牢大。&lt;/p&gt;&lt;p&gt;整个帮派的阈值由边权确定，即每条边只使用一次，使用后将边权置0，防止重复使用边。&lt;/p&gt;&lt;p&gt;注意题目给出最大的n为1000，但考虑到通话是双方的，因此m...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1034_Head%20of%20a%20Gang/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/PAT%20A1034_Head%20of%20a%20Gang/</guid> </item> <item> <title>PAT A1018 Public Bike Management</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先使用Dijkstra算法求出最短路径，使用pre记录最短路径中每个结点的前驱。&lt;/p&gt;&lt;p&gt;再使用DFS从目标结点开始倒序遍历到PBMC，求出具有最小Need同时具有最小remain的路径。&lt;/p&gt;&lt;p&gt;注意，倒序遍历到PBMC之后才开始计算need和remain，而且当出现remain不足当前站点所需自行车数量时，...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1018_Public%20Bike%20Management/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1018_Public%20Bike%20Management/</guid> </item> <item> <title>PAT A1072 Gas Station</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：注意首先加油站必须满足到达所有房屋的距离不超过Ds，在此基础上，要使最近的距离最大。&lt;/p&gt;&lt;p&gt;当出现多个最近距离最大的解的时候，选择平均距离最小的解，优先选择索引更小的位置。使用M次Dijkstra算法将M个加油站位置全部遍历一遍可得到答案。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;inc...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1072_Gas%20Station/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1072_Gas%20Station/</guid> </item> <item> <title>PAT A1087 All Roads Lead to Rome</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：可采用Dijkstra或Dijkstra + DFS的做法。&lt;/p&gt;&lt;p&gt;使用Dijkstra时注意优先处理最短路径，其次是幸福值，最后是平均幸福值。&lt;/p&gt;&lt;p&gt;打印路径时可以通过一维pre数组递归得到。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;h1&gt;include&amp;lt;...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1087_All%20Roads%20Lead%20to%20Rome/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/PAT%20A1087_All%20Roads%20Lead%20to%20Rome/</guid> </item> <item> <title>PAT A1059 Prime Factors</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：对int范围内的整数进行质因数分解，采用打质数表法。&lt;/p&gt;&lt;p&gt;注意由于前10个质数乘积已经超过int最大值范围，只需要开辟Factors大小为10来记录每个质数及其重复次数。&lt;/p&gt;&lt;p&gt;而由于质因子关于sqrt(n)的对称性质，若当前质因子&amp;gt;sqrt(n)时，可判断n本身即为质数。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;includ...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%A8%E6%95%B0/PAT%20A1059_Prime%20Factors/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%A8%E6%95%B0/PAT%20A1059_Prime%20Factors/</guid> </item> <item> <title>PAT A1001 Quick Sort</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：与A1093相似，针对每个数统计其左边的最大值以及右边的最小值。如果满足当前数大于左边最大值且小于右边最小值，则满足条件。&lt;/p&gt;&lt;p&gt;最大值用数组统计，最小值只设变量rightMin，在统计rightMin的循环中统计满足要求的下标进而得出答案。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;相似题目&lt;/strong&gt;：PAT A1093 CountPATs...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%80%92%E6%8E%A8/PAT%20A1001_Quick%20Sort/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%80%92%E6%8E%A8/PAT%20A1001_Quick%20Sort/</guid> </item> <item> <title>PAT A1097 Deduplication on a Linked List</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：遍历给出的静态链表，通过设置标记数组记录每个键值是否已经出现过。&lt;/p&gt;&lt;p&gt;每个结点赋予一个order排序值，初始时所有结点的order初始化为2*maxn，未出现过的键值结点赋值valid从0开始，最终值为有效结点的数量。&lt;/p&gt;&lt;p&gt;出现过要被删除的结点键值按照removed + maxn进行赋值，removed...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/PAT%20A1097_Deduplication%20on%20a%20Linked%20List/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/PAT%20A1097_Deduplication%20on%20a%20Linked%20List/</guid> </item> <item> <title>PAT A1074 Reversing Linked List</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：由于PAT输入数据的特殊性，本题考虑用静态链表来实现。&lt;/p&gt;&lt;p&gt;注意输入数据中可能有无效的结点，因此需要县遍历一次并且确定有效结点数order，并且为每个有效结点附上顺序标记。&lt;/p&gt;&lt;p&gt;根据顺序标记进行排序后直接对静态链表数组中前order个结点进行输出，每k个结点倒序输出，最后一组若不满足k个结点则按正常顺序...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/PAT%20A1074_Reversing%20Linked%20List/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/PAT%20A1074_Reversing%20Linked%20List/</guid> </item> <item> <title>PAT A1056 Mice and Rice</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：每轮可分成a组，其中最后一组可能不会人满。将所有人的初始序列输入队列中，每次比赛一共选出a个下一轮选手，即被淘汰的选手处于a + 1名。&lt;/p&gt;&lt;p&gt;下一轮就有a人参赛，根据每组的最大人数可将下一轮的a人继续分组如此循环直到队列中只剩下1人即为排名第一的选手。&lt;/p&gt;&lt;p&gt;注意，每个小组的比赛中都提前给参赛选手设下排名...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%98%9F%E5%88%97/PAT%20A1056_Mice%20and%20Rice/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E9%98%9F%E5%88%97/PAT%20A1056_Mice%20and%20Rice/</guid> </item> <item> <title>GAMES101：现代计算机图形学入门</title> <description>&lt;h1&gt;GAMES101：现代计算机图形学入门&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 主要为学习GAMES101过程中记录的课堂笔记&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/</guid> </item> <item> <title>GAMES102：几何建模与处理</title> <description>&lt;h1&gt;GAMES102：几何建模与处理&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 主要为学习GAMES102过程中记录的课堂笔记&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/</guid> </item> <item> <title>语言</title> <description>&lt;h1&gt;语言&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 记录编程语言类的部分知识，转载注明原文。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;目前主要使用的语言有：C++。&lt;/code&gt;&lt;/pre&gt;</description><link>https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_updated.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E8%AF%AD%E8%A8%80/</guid> </item> </channel></rss>