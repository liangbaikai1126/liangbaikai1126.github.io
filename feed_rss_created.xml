<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>开的博客</title><link>https://liangbaikai1126.github.io/</link><atom:link href="https://liangbaikai1126.github.io/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/liangbaikai1126/liangbaikai1126.github.io</docs><language>zh</language> <pubDate>Tue, 23 Jul 2024 14:47:10 -0000</pubDate> <lastBuildDate>Tue, 23 Jul 2024 14:47:10 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.15.0</generator> <item> <title>Lec05 Bezier曲线 B样条曲线</title> <description>&lt;h1&gt;Lec05 Bezier曲线 B样条曲线&lt;/h1&gt;&lt;h2&gt;建模的两种形式&lt;/h2&gt;&lt;p&gt;$$f(t) = at^2 + bt + c$$&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重建（Reconstruction）&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;逆向工程：形状已有，将其“猜”出&lt;/li&gt;&lt;li&gt;采样→拟合：需要函数空间足够丰富（表达能力够）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;代数观点&lt;/strong&gt;：${a,b,c}$作为...&lt;/li&gt;&lt;/ul&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</link> <pubDate>Tue, 23 Jul 2024 14:46:15 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/Lec05/1/</guid> </item> <item> <title>GAMES101：现代计算机图形学入门</title> <description>&lt;h1&gt;GAMES101：现代计算机图形学入门&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 主要为学习GAMES101过程中记录的课堂笔记&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/</guid> </item> <item> <title>GAMES102：几何建模与处理</title> <description>&lt;h1&gt;GAMES102：几何建模与处理&lt;/h1&gt;&lt;p&gt;!!! note &#34;摘要&#34; 主要为学习GAMES102过程中记录的课堂笔记&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/</link> <pubDate>Mon, 22 Jul 2024 16:59:21 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES102/</guid> </item> <item> <title>Lecture 03 Transformation</title> <description>&lt;h1&gt;Lecture 03 Transformation&lt;/h1&gt;&lt;h2&gt;2D Transformation&lt;/h2&gt;&lt;p&gt;2D平面上的基础变换矩阵可以通过原点进行推导&lt;/p&gt;&lt;h3&gt;Linear Transforms = Matrices(of the same dimension)&lt;/h3&gt;&lt;p&gt;$$x^{&#39;} = ax + by \y^{...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/</link> <pubDate>Fri, 19 Jul 2024 08:42:45 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec03/1/</guid> </item> <item> <title>Lecture 02 Review of Linear Algebra</title> <description>&lt;h1&gt;Lecture 02 Review of Linear Algebra&lt;/h1&gt;&lt;h2&gt;Dot Product&lt;/h2&gt;&lt;p&gt;在图形学中通常将 $n \times 1$ 的矩阵称为向量&lt;/p&gt;&lt;p&gt;向量的点乘可以判断方向性，＞0为方向基本一致，＜0为方向基本相反，=0为垂直&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;img alt=&#34;&#34; src=&#34;image/1.png&#34;&gt;&amp;lt;/cen...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/</link> <pubDate>Fri, 19 Jul 2024 08:36:34 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/Lec02/1/</guid> </item> <item> <title>PAT A1033 To Fill or Not to Fill</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：注意根据贪心策略，将加油站根据距离的远近进行排序。由于初始油箱为空，若最初的加油站距离不为 0，则无法到达目的地。&lt;/p&gt;&lt;p&gt;从 0 号加油站开始遍历，遍历能到达且油价最低（除了当前油价）的加油站，设置为目的加油站。&lt;/p&gt;&lt;p&gt;若遍历到第一个小于当前油价的加油站 A，立刻结束遍历，因为可以在当前加油站加到刚好到 A...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1033_To%20Fill%20or%20Not%20to%20Fill/</link> <pubDate>Mon, 26 Feb 2024 13:25:39 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1033_To%20Fill%20or%20Not%20to%20Fill/</guid> </item> <item> <title>PAT A1070 Mooncake</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：简单的贪心策略，优先卖出单价最高的月饼。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;cstdio&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;const int MAXN = 1005;&lt;/p&gt;&lt;p&gt;typedef struct { ...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1070_Mooncake/</link> <pubDate>Mon, 26 Feb 2024 13:25:39 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83/PAT%20A1070_Mooncake/</guid> </item> <item> <title>PAT A1041 Be Unique</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：直接用数字统计所有出现的数字的次数，按输入次序遍历哈希表即可。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;const int MAXN = 100005;const int MAXNUM = 10005;&lt;/p&gt;&lt;p&gt;int hashTable[MAX...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1041_Be%20Unique/</link> <pubDate>Sat, 24 Feb 2024 12:02:04 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1041_Be%20Unique/</guid> </item> <item> <title>PAT A1048 Find Coins</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：由于本题中 M &amp;lt;= 1000，因此 哈希表的大小只需要大于 1000，而非题中给出的 N 的最大值 100000，之后便为经典题两数之和的散列解法。注意到若存在多对答案应该按字典序的优先级进行输出，因此选择从 0 开始遍历而非输入的第一个数字开始进行遍历。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&amp;lt;ios...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1048_Find%20Coins/</link> <pubDate>Sat, 24 Feb 2024 12:02:04 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1048_Find%20Coins/</guid> </item> <item> <title>PAT A1050 String Subtraction</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：将 s2 的每个字符统计到哈希表中，再逐个遍历 s1 中的字符。若 s1 中字符在哈希表中未出现过则输出。注意可见 ASCII 码范围为 32 - 126，故只需开辟大小为 128 的 bool 数组作为哈希表即可。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&amp;lt;strin...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1050_String%20Subtraction/</link> <pubDate>Sat, 24 Feb 2024 12:02:04 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1050_String%20Subtraction/</guid> </item> <item> <title>PAT A1084 Broken Keyboard</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：用遍历的方法来判断 s1 中的字符是否出现在 s2 中，若未出现，根据 hashTable 是否记录其曾经输出过。若为 true 则曾经输出过，若为 false 则未输出过。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;string&gt;&lt;/h1&gt;&lt;p&gt;using namespace st...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1084_Broken%20Keyboard/</link> <pubDate>Sat, 24 Feb 2024 12:02:04 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1084_Broken%20Keyboard/</guid> </item> <item> <title>PAT A1092 To Buy or Not to Buy</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：通过下标处理将对应珠子颜色处理成哈希表中对应数字，遍历 s1 填充哈希表。再遍历 s2 减去哈希表中对应值，若哈希表中出现负数，则更新 miss。miss 大于 0，则不满足，否则直接输出 s1.size() - s2.size() 作为多余的珠子数量。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&amp;lt;iostr...&lt;/h1&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1092_To%20Buy%20or%20Not%20to%20Buy/</link> <pubDate>Sat, 24 Feb 2024 12:02:04 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%95%A3%E5%88%97/PAT%20A1092_To%20Buy%20or%20Not%20to%20Buy/</guid> </item> <item> <title>PAT A1075 PAT Judge</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题进行排序时，注意一条提交记录中，if 和 else if 的判断容易混淆，使用 if 更方便进行各种条件的判断。&lt;/p&gt;&lt;p&gt;此外，使用 flag 可以标志是否需要输出，而非通过单独判断 score 是否全为 0 或 -1。因为本题中第一次提交如果编译未通过，需要把分数赋值为 0。故只有当提交记录中的得分...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1075_PAT%20Judge/</link> <pubDate>Fri, 23 Feb 2024 16:38:19 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1075_PAT%20Judge/</guid> </item> <item> <title>PAT A1080 Graduate Admission</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题需要将学生和学校信息封装成结构，对成绩排序成排名后遍历每个学生进行遍历，检查其志愿学校是否还有空余名额或者最后一名录取排名与当前学生相同，则录取，否则落榜。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1080_Graduate%20Admission/</link> <pubDate>Fri, 23 Feb 2024 16:38:19 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1080_Graduate%20Admission/</guid> </item> <item> <title>PAT A1083 List Grades</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：简单的排序题，注意由于分数上限为 100，且分数均不相同，MAXN 取 110。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;string&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;const int MAXN = 110;&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1083_List%20Grades/</link> <pubDate>Fri, 23 Feb 2024 16:38:19 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1083_List%20Grades/</guid> </item> <item> <title>PAT A1095 Cars on Campus</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：通过把时间转化为秒的形式，先记录所有输入的记录，再根据 id 以及 time 进行排序。对于同一个 id 的记录进行相邻的 in 和 out 的查找，并将查找结果存入 valid 数组中，同时增加这一对记录的停留时间到哈希表中，更新最大停留时间。剩下的 K 次查询，用 now 处理至当前查询时间，n...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1095_Cars%20on%20Campus/</link> <pubDate>Fri, 23 Feb 2024 16:38:19 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1095_Cars%20on%20Campus/</guid> </item> <item> <title>PAT A1025 PAT Ranking</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：排序标准为，分数不同时，按分数从大到小进行排序。注意全局排序和局部排序时，分数相同排名也相同，但按照准考证从小到大进行输出。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;cstring&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;cstdio&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;ty...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1025_PAT%20Ranking/</link> <pubDate>Wed, 21 Feb 2024 11:26:43 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1025_PAT%20Ranking/</guid> </item> <item> <title>PAT A1028 List Sorting</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：根据输出的三种 C 的取值编写三个排序 bool 函数即可。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;string&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;p&gt;using namespace std;&lt;/p&gt;&lt;p&gt;const int MAXN = 100005;&lt;/p&gt;&lt;p&gt;typedef...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1028_List%20Sorting/</link> <pubDate>Wed, 21 Feb 2024 11:26:43 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1028_List%20Sorting/</guid> </item> <item> <title>PAT A1055 The World&#39;s Richest</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：本题需要预处理 valid 结构体数组，由于每次查询的人数 M &amp;lt;= 100，让每个年龄的前 100 人进入 valid 数组即可，否则本题在测试点 2 会超时。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;string&gt;&lt;/h1&gt;&lt;p&gt;usin...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1055_The%20World%27s%20Richest/</link> <pubDate>Wed, 21 Feb 2024 11:26:43 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%8E%92%E5%BA%8F/PAT%20A1055_The%20World%27s%20Richest/</guid> </item> <item> <title>PAT A1061 Dating</title> <description>&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：直接进行题目需要的模拟，但是注意判断字母的范围，第一次为 A ~ G，第二次为 A ~ N，第三次则需考虑全部小写字母和大写字母。&lt;/p&gt;&lt;p&gt;```cpp&lt;/p&gt;&lt;h1&gt;include&lt;iostream&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;algorithm&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;string&gt;&lt;/h1&gt;&lt;h1&gt;include&lt;cstdio&gt;&lt;/h1&gt;&lt;p&gt;usi...&lt;/p&gt;</description><link>https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1061_Dating/</link> <pubDate>Wed, 21 Feb 2024 11:26:43 +0000</pubDate><source url="https://liangbaikai1126.github.io/feed_rss_created.xml">开的博客</source><guid isPermaLink="true">https://liangbaikai1126.github.io/%E5%88%B7%E9%A2%98/%E6%A8%A1%E6%8B%9F/PAT%20A1061_Dating/</guid> </item> </channel></rss>